{"version":3,"sources":["logo.svg","serviceWorker.js","Plantillas/Menu.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","useStyles","makeStyles","theme","root","flexGrow","paper","padding","spacing","textAlign","color","palette","text","secondary","absolute","position","top","right","absolute2","AutoGrid","classes","className","style","backgroundColor","Grid","container","item","xs","alignItems","CssBaseline","Paper","value","options","mode","lineNumbers","onChange","editor","data","disabled","id","name","width","height","resize","onkeydown","Tooltip","title","aria-label","Fab","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4FAAAA,EAAOC,QAAU,IAA0B,kC,2KCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,8FCCAC,G,kBAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,SAAU,GAEZC,MAAO,CACLC,QAASJ,EAAMK,QAAQ,GACvBC,UAAW,SACXC,MAAOP,EAAMQ,QAAQC,KAAKC,WAE5BC,SAAU,CACRC,SAAU,WACVC,IAAKb,EAAMK,QAAQ,GACnBS,MAAO,OACPC,UAAW,CACXH,SAAU,WACVC,IAAKb,EAAMK,QAAQ,GACnBS,MAAO,YAII,SAASE,IACtB,IAAMC,EAAUnB,IAEhB,OACE,yBAAKoB,UAAWD,EAAQhB,KAAMkB,MAAO,CAACC,gBAAgB,YACpD,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACjB,QAAS,GACvB,kBAACgB,EAAA,EAAD,CAAME,MAAI,EAACC,IAAE,EAACC,WAAW,WACxB,kBAACC,EAAA,EAAD,MACC,kBAACC,EAAA,EAAD,CAAOT,UAAWD,EAAQd,OAA1B,QAEF,kBAAC,eAAD,CAAayB,MAAM,GACfC,QAAS,CACLC,KAAM,aACN9B,MAAO,QACP+B,aAAa,GAEjBC,SAAU,SAACC,EAAQC,EAAMN,QAI7B,kBAACP,EAAA,EAAD,CAAME,MAAI,EAACC,IAAE,GACX,kBAACG,EAAA,EAAD,CAAOT,UAAWD,EAAQd,OAA1B,iBAGA,8BAAUgC,UAAQ,EAACC,GAAG,WAAWC,KAAK,WAAWlB,MAAO,CAACmB,MAAM,OAAQC,OAAO,OAAQC,OAAQ,QAASC,UAAU,kMAKrH,kBAACpB,EAAA,EAAD,CAAMC,WAAS,EAACjB,QAAS,GACvB,kBAACgB,EAAA,EAAD,CAAME,MAAI,EAACC,IAAE,GACX,kBAACG,EAAA,EAAD,CAAOT,UAAWD,EAAQd,OAA1B,WACA,8BAAUgC,UAAQ,EAACC,GAAG,WAAWC,KAAK,WAAWlB,MAAO,CAACmB,MAAM,OAAQC,OAAO,OAAQC,OAAQ,QAASC,UAAU,iMAGnH,kBAACpB,EAAA,EAAD,CAAME,MAAI,EAACC,IAAE,GACX,kBAACG,EAAA,EAAD,CAAOT,UAAWD,EAAQd,OAA1B,0BAIJ,kBAACuC,EAAA,EAAD,CAASC,MAAM,MAAMC,aAAW,OAChC,kBAACC,EAAA,EAAD,CAAKtC,MAAM,YAAYW,UAAWD,EAAQN,UACtC,kBAAC,IAAD,QAIJ,kBAAC+B,EAAA,EAAD,CAASC,MAAM,MAAMC,aAAW,OAChC,kBAACC,EAAA,EAAD,CAAKtC,MAAM,YAAYW,UAAWD,EAAQF,WACtC,kBAAC,IAAD,SC/EV+B,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAChC,EAAD,OAEFiC,SAASC,eAAe,SFuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6b7e6b87.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport Button from '@material-ui/core/Button';\nimport Fab from '@material-ui/core/Fab';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport TranslateIcon from '@material-ui/icons/Translate';\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport {UnControlled as CodeMirror} from 'react-codemirror2'\nimport 'codemirror/mode/javascript/javascript';\nimport 'codemirror/lib/codemirror.css';\nimport 'codemirror/theme/yonce.css';\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n  absolute: {\n    position: 'absolute',\n    top: theme.spacing(0),\n    right: '60%',\n  },absolute2: {\n    position: 'absolute',\n    top: theme.spacing(0),\n    right: '55%',\n  }\n}));\n\nexport default function AutoGrid() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root} style={{backgroundColor:'#1b262c'}}>\n      <Grid container spacing={2}>\n        <Grid item xs alignItems=\"stretch\" >\n         <CssBaseline />\n          <Paper className={classes.paper}>IDE </Paper>\n       {/* <textarea style={{ backgroundColor: '#cfe8fc', height: '50vh', width: '100%', resize: 'none'}} /> */}\n        <CodeMirror  value=''\n            options={{\n                mode: 'javascript',\n                theme: 'yonce',\n                lineNumbers: true\n            }}\n            onChange={(editor, data, value) => {\n            }}\n        /> \n        </Grid>\n        <Grid item xs> \n          <Paper className={classes.paper}>Traducci√≥n \n         \n          </Paper>\n          <textarea disabled id=\"original\" name=\"original\" style={{width:\"100%\", height:\"50vh\", resize: \"none\"}} onkeydown=\"if(event.keyCode===9){var v=this.value,s=this.selectionStart,e=this.selectionEnd;this.value=v.substring(0, s)+'\\t'+v.substring(e);this.selectionStart=this.selectionEnd=s+1;return false;}\"></textarea>\n          \n        </Grid>\n        \n      </Grid>\n      <Grid container spacing={2}>\n        <Grid item xs>\n          <Paper className={classes.paper}>CONSOLA</Paper>\n          <textarea disabled id=\"original\" name=\"original\" style={{width:\"100%\", height:\"35vh\", resize: \"none\"}} onkeydown=\"if(event.keyCode===9){var v=this.value,s=this.selectionStart,e=this.selectionEnd;this.value=v.substring(0, s)+'\\t'+v.substring(e);this.selectionStart=this.selectionEnd=s+1;return false;}\"></textarea>\n\n        </Grid> \n        <Grid item xs>\n          <Paper className={classes.paper}>Tabla de S√≠mbolos</Paper>\n        </Grid>\n       \n      </Grid>\n      <Tooltip title=\"Add\" aria-label=\"add\">\n      <Fab color=\"secondary\" className={classes.absolute}>\n          <PlayArrowIcon/>\n        </Fab>\n        \n      </Tooltip>\n      <Tooltip title=\"Add\" aria-label=\"add\">\n      <Fab color=\"secondary\" className={classes.absolute2}>\n          <TranslateIcon/>\n        </Fab>\n        \n      </Tooltip>\n    </div>\n    \n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport AutoGrid from './Plantillas/Menu';\nimport IDE from './Plantillas/IDE';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AutoGrid />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}