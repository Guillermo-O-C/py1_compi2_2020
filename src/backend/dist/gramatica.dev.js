"use strict";

/* parser generated by jison 0.4.18 */

/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = function () {
  var o = function o(k, v, _o, l) {
    for (_o = _o || {}, l = k.length; l--; _o[k[l]] = v) {
      ;
    }

    return _o;
  },
      $V0 = [1, 4],
      $V1 = [1, 5],
      $V2 = [1, 6],
      $V3 = [1, 7],
      $V4 = [1, 8],
      $V5 = [1, 9],
      $V6 = [5, 7, 16, 18, 19, 20, 21],
      $V7 = [1, 16],
      $V8 = [2, 43],
      $V9 = [1, 24],
      $Va = [24, 29],
      $Vb = [2, 15],
      $Vc = [1, 27],
      $Vd = [2, 21],
      $Ve = [1, 29],
      $Vf = [1, 30],
      $Vg = [1, 31],
      $Vh = [1, 32],
      $Vi = [1, 33],
      $Vj = [1, 42],
      $Vk = [1, 39],
      $Vl = [1, 37],
      $Vm = [1, 38],
      $Vn = [1, 40],
      $Vo = [1, 41],
      $Vp = [1, 43],
      $Vq = [1, 44],
      $Vr = [1, 45],
      $Vs = [1, 46],
      $Vt = [1, 57],
      $Vu = [1, 56],
      $Vv = [1, 58],
      $Vw = [1, 59],
      $Vx = [1, 60],
      $Vy = [1, 61],
      $Vz = [1, 62],
      $VA = [1, 63],
      $VB = [1, 64],
      $VC = [1, 65],
      $VD = [1, 66],
      $VE = [1, 67],
      $VF = [1, 68],
      $VG = [1, 69],
      $VH = [11, 24, 26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52],
      $VI = [2, 27],
      $VJ = [1, 78],
      $VK = [1, 95],
      $VL = [1, 85],
      $VM = [1, 86],
      $VN = [1, 87],
      $VO = [1, 88],
      $VP = [1, 89],
      $VQ = [1, 90],
      $VR = [1, 91],
      $VS = [1, 92],
      $VT = [1, 93],
      $VU = [1, 94],
      $VV = [2, 80],
      $VW = [2, 8, 14, 16, 18, 19, 20, 21, 32, 33, 35, 38],
      $VX = [1, 125],
      $VY = [11, 24, 26, 39, 40, 45, 46, 47, 48, 49, 50, 51, 52],
      $VZ = [11, 24, 26, 39, 40, 41, 42, 45, 46, 47, 48, 49, 50, 51, 52],
      $V_ = [11, 24, 26, 45, 46, 47, 48, 49, 50, 51, 52],
      $V$ = [11, 24, 26, 51, 52],
      $V01 = [2, 82],
      $V11 = [1, 136],
      $V21 = [8, 9, 39, 53, 54, 55, 56, 57, 58, 59],
      $V31 = [2, 70],
      $V41 = [1, 199];

  var parser = {
    trace: function trace() {},
    yy: {},
    symbols_: {
      "error": 2,
      "ini": 3,
      "sentencias": 4,
      "EOF": 5,
      "sentencia": 6,
      "R_VOID": 7,
      "IDENTIFICADOR": 8,
      "ABRIR_PARENTESIS": 9,
      "parametros": 10,
      "CERRAR_PARENTESIS": 11,
      "ABRIR_LLAVE": 12,
      "instrucciones": 13,
      "CERRAR_LLAVE": 14,
      "R_MAIN": 15,
      "R_INTEGER": 16,
      "declaracion_p": 17,
      "R_DOUBLE": 18,
      "R_STRING": 19,
      "R_BOOLEAN": 20,
      "R_CHAR": 21,
      "listaID": 22,
      "defincion_var": 23,
      "PUNTO_COMA": 24,
      "listaID_P": 25,
      "COMA": 26,
      "parametros_p": 27,
      "instruccion": 28,
      "IGUAL": 29,
      "expresion": 30,
      "argumentos": 31,
      "R_PRINT": 32,
      "R_IF": 33,
      "elseIf": 34,
      "R_FOR": 35,
      "for_init": 36,
      "for_change": 37,
      "R_RETURN": 38,
      "MENOS": 39,
      "MAS": 40,
      "MULTIPLICACION": 41,
      "DIVISION": 42,
      "POTENCIA": 43,
      "MODULO": 44,
      "MAYOR": 45,
      "MENOR": 46,
      "MAYOR_IGUAL": 47,
      "MENOR_IGUAL": 48,
      "IGUALDAD": 49,
      "DISTINTO": 50,
      "AND": 51,
      "OR": 52,
      "NOT": 53,
      "ENTERO": 54,
      "DECIMAL": 55,
      "CARACTER": 56,
      "R_TRUE": 57,
      "R_FALSE": 58,
      "CADENA": 59,
      "R_ELSE": 60,
      "elseIf_P": 61,
      "INCREMENTO": 62,
      "DECREMENTO": 63,
      "argumentos_P": 64,
      "$accept": 0,
      "$end": 1
    },
    terminals_: {
      2: "error",
      5: "EOF",
      7: "R_VOID",
      8: "IDENTIFICADOR",
      9: "ABRIR_PARENTESIS",
      11: "CERRAR_PARENTESIS",
      12: "ABRIR_LLAVE",
      14: "CERRAR_LLAVE",
      15: "R_MAIN",
      16: "R_INTEGER",
      18: "R_DOUBLE",
      19: "R_STRING",
      20: "R_BOOLEAN",
      21: "R_CHAR",
      24: "PUNTO_COMA",
      26: "COMA",
      29: "IGUAL",
      32: "R_PRINT",
      33: "R_IF",
      35: "R_FOR",
      38: "R_RETURN",
      39: "MENOS",
      40: "MAS",
      41: "MULTIPLICACION",
      42: "DIVISION",
      43: "POTENCIA",
      44: "MODULO",
      45: "MAYOR",
      46: "MENOR",
      47: "MAYOR_IGUAL",
      48: "MENOR_IGUAL",
      49: "IGUALDAD",
      50: "DISTINTO",
      51: "AND",
      52: "OR",
      53: "NOT",
      54: "ENTERO",
      55: "DECIMAL",
      56: "CARACTER",
      57: "R_TRUE",
      58: "R_FALSE",
      59: "CADENA",
      60: "R_ELSE",
      62: "INCREMENTO",
      63: "DECREMENTO"
    },
    productions_: [0, [3, 2], [4, 2], [4, 1], [6, 8], [6, 7], [6, 2], [6, 2], [6, 2], [6, 2], [6, 2], [17, 3], [17, 7], [22, 2], [25, 3], [25, 0], [10, 3], [10, 3], [10, 3], [10, 3], [10, 3], [10, 0], [27, 4], [27, 4], [27, 4], [27, 4], [27, 4], [27, 0], [13, 2], [13, 1], [28, 4], [28, 5], [28, 4], [28, 4], [28, 4], [28, 4], [28, 4], [28, 5], [28, 8], [28, 11], [28, 3], [28, 1], [23, 2], [23, 0], [30, 2], [30, 3], [30, 3], [30, 3], [30, 3], [30, 3], [30, 3], [30, 3], [30, 3], [30, 3], [30, 3], [30, 3], [30, 3], [30, 3], [30, 3], [30, 2], [30, 3], [30, 1], [30, 1], [30, 1], [30, 4], [30, 1], [30, 1], [30, 1], [30, 1], [34, 2], [34, 0], [61, 8], [61, 3], [36, 5], [36, 5], [36, 4], [37, 1], [37, 1], [37, 2], [31, 2], [31, 0], [64, 3], [64, 0]],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate
    /* action[1] */
    , $$
    /* vstack */
    , _$
    /* lstack */
    ) {
      /* this == yyval */
      var $0 = $$.length - 1;

      switch (yystate) {
        case 1:
          // cuado se haya reconocido la entrada completa retornamos el AST
          var temporal = salida;
          salida = [];
          var tempAr = ArrayDeErrores;
          ArrayDeErrores = [];
          return {
            AST: $$[$0 - 1],
            Errores: temporal
          };
          break;

        case 2:
        case 28:
          $$[$0 - 1].push($$[$0]);
          this.$ = $$[$0 - 1];
          break;

        case 3:
        case 29:
          this.$ = [$$[$0]];
          break;

        case 4:
          this.$ = instruccionesAPI.nuevaFuncion($$[$0 - 7], $$[$0 - 6], $$[$0 - 4], $$[$0 - 1]);
          break;

        case 5:
          this.$ = instruccionesAPI.nuevoMain($$[$0 - 1]);
          break;

        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
          this.$ = $$[$0];
          currentType = $$[$0 - 1];
          break;

        case 11:
          this.$ = instruccionesAPI.nuevaDeclaracion($$[$0 - 3], $$[$0 - 2], $$[$0 - 1]);
          break;

        case 12:
          this.$ = instruccionesAPI.nuevaFuncion($$[$0 - 7], $$[$0 - 6], $$[$0 - 4], $$[$0 - 1]);
          break;

        case 13:
          this.$ = instruccionesAPI.nuevaListaid($$[$0 - 1], $$[$0]);
          break;

        case 14:
          this.$ = instruccionesAPI.nuevaListaid($$[$0 - 1], $$[$0]);
          break;

        case 15:
          this.$ = "NM";
          break;

        case 16:
        case 18:
        case 19:
        case 20:
        case 22:
        case 26:
          this.$ = instruccionesAPI.nuevoParametro($$[$0 - 2], $$[$0 - 1], $$[$0]);
          break;

        case 17:
        case 23:
        case 24:
        case 25:
          this.$ = instruccionesAPI.nuevoParametro($$[$0 - 2], $$[$0 - 1], $$[$0]);
          break;

        case 21:
          this.$ = "NA";
          break;

        case 27:
          this.$ = "NM";
          break;

        case 30:
        case 75:
          this.$ = instruccionesAPI.nuevaAsignacion($$[$0 - 3], $$[$0 - 1]);
          break;

        case 31:
          this.$ = instruccionesAPI.nuevaLlamada($$[$0 - 4], $$[$0 - 2]);
          break;

        case 32:
        case 35:
        case 36:
          this.$ = instruccionesAPI.nuevaDeclaracion($$[$0 - 3], $$[$0 - 2], $$[$0 - 1]);
          break;

        case 33:
        case 34:
          this.$ = instruccionesAPI.nuevaDeclaracion($$[$0 - 3], $$[$0 - 2], $$[$0 - 1]);
          break;

        case 37:
          this.$ = instruccionesAPI.nuevoImprimir($$[$0 - 2]);
          break;

        case 38:
          this.$ = instruccionesAPI.nuevoIf($$[$0 - 5], $$[$0 - 2], $$[$0]);
          break;

        case 39:
          this.$ = instruccionesAPI.nuevoFor($$[$0 - 8], $$[$0 - 7], $$[$0 - 4], $$[$0 - 1]);
          break;

        case 40:
          this.$ = instruccionesAPI.nuevoReturn($$[$0 - 1]);
          break;

        case 41:
          console.error('Este es un error sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column);
          salida.push('Este es un error sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column);
          ArrayDeErrores.push({
            tipo: "sintáctico",
            linea: this._$.first_line,
            columna: this._$.first_column,
            descripcion: yytext
          });
          break;

        case 42:
          this.$ = $$[$0];
          break;

        case 43:
          this.$ = "null";
          break;

        case 44:
          this.$ = instruccionesAPI.nuevaOperacionUnaria($$[$0], TIPO_OPERACION.NEGATIVO);
          break;

        case 45:
          this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0 - 2], $$[$0], TIPO_OPERACION.SUMA);
          break;

        case 46:
          this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0 - 2], $$[$0], TIPO_OPERACION.RESTA);
          break;

        case 47:
          this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0 - 2], $$[$0], TIPO_OPERACION.MULTIPLICACION);
          break;

        case 48:
          this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0 - 2], $$[$0], TIPO_OPERACION.DIVISION);
          break;

        case 49:
          this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0 - 2], $$[$0], TIPO_OPERACION.POTENCIA);
          break;

        case 50:
          this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0 - 2], $$[$0], TIPO_OPERACION.MODULO);
          break;

        case 51:
          this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0 - 2], $$[$0], TIPO_OPERACION.MAYOR);
          break;

        case 52:
          this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0 - 2], $$[$0], TIPO_OPERACION.MENOR);
          break;

        case 53:
          this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0 - 2], $$[$0], TIPO_OPERACION.MAYOR_IGUAL);
          break;

        case 54:
          this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0 - 2], $$[$0], TIPO_OPERACION.MENOR_IGUAL);
          break;

        case 55:
          this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0 - 2], $$[$0], TIPO_OPERACION.IGUAL_IGUAL);
          break;

        case 56:
          this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0 - 2], $$[$0], TIPO_OPERACION.DISTINTO);
          break;

        case 57:
          this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0 - 2], $$[$0], TIPO_OPERACION.AND);
          break;

        case 58:
          this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0 - 2], $$[$0], TIPO_OPERACION.OR);
          break;

        case 59:
          this.$ = instruccionesAPI.nuevaOperacionUnaria($$[$0], TIPO_OPERACION.NOT);
          break;

        case 60:
          this.$ = $$[$0 - 1];
          break;

        case 61:
          this.$ = instruccionesAPI.nuevoValor(Number($$[$0]), TIPO_VALOR.NUMERO);
          break;

        case 62:
          this.$ = instruccionesAPI.nuevoValor(Number($$[$0]), TIPO_VALOR.DECIMAL);
          break;

        case 63:
          this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.IDENTIFICADOR);
          break;

        case 64:
          this.$ = instruccionesAPI.nuevaLlamada($$[$0 - 3], $$[$0 - 1]);
          break;

        case 65:
          this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.CARACTER);
          break;

        case 66:
          this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.TRUE);
          break;

        case 67:
          this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.FALSE);
          break;

        case 68:
          this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.CADENA);
          break;

        case 69:
          this.$ = $$[$0];
          break;

        case 70:
          this.$ = "NELSE";
          break;

        case 71:
          this.$ = instruccionesAPI.nuevoElseIf($$[$0 - 5], $$[$0 - 2], $$[$0]);
          break;

        case 72:
          this.$ = instruccionesAPI.nuevoElse($$[$0 - 1]);
          break;

        case 73:
        case 74:
          this.$ = instruccionesAPI.nuevaDeclaracion($$[$0 - 4], $$[$0 - 3], $$[$0 - 1]);
          break;

        case 76:
        case 77:
        case 78:
          this.$ = $$[$0];
          break;

        case 79:
        case 81:
          this.$ = instruccionesAPI.nuevoArgumento($$[$0 - 1], $$[$0]);
          break;

        case 80:
          this.$ = "NA";
          break;

        case 82:
          this.$ = "NM";
          break;
      }
    },
    table: [{
      3: 1,
      4: 2,
      6: 3,
      7: $V0,
      16: $V1,
      18: $V2,
      19: $V3,
      20: $V4,
      21: $V5
    }, {
      1: [3]
    }, {
      5: [1, 10],
      6: 11,
      7: $V0,
      16: $V1,
      18: $V2,
      19: $V3,
      20: $V4,
      21: $V5
    }, o($V6, [2, 3]), {
      8: [1, 12],
      15: [1, 13]
    }, {
      8: $V7,
      17: 14,
      22: 15
    }, {
      8: $V7,
      17: 17,
      22: 15
    }, {
      8: $V7,
      17: 18,
      22: 15
    }, {
      8: $V7,
      17: 19,
      22: 15
    }, {
      8: $V7,
      17: 20,
      22: 15
    }, {
      1: [2, 1]
    }, o($V6, [2, 2]), {
      9: [1, 21]
    }, {
      9: [1, 22]
    }, o($V6, [2, 6]), {
      23: 23,
      24: $V8,
      29: $V9
    }, o($Va, $Vb, {
      25: 26,
      9: [1, 25],
      26: $Vc
    }), o($V6, [2, 7]), o($V6, [2, 8]), o($V6, [2, 9]), o($V6, [2, 10]), {
      10: 28,
      11: $Vd,
      16: $Ve,
      18: $Vf,
      19: $Vg,
      20: $Vh,
      21: $Vi
    }, {
      11: [1, 34]
    }, {
      24: [1, 35]
    }, {
      8: $Vj,
      9: $Vk,
      30: 36,
      39: $Vl,
      53: $Vm,
      54: $Vn,
      55: $Vo,
      56: $Vp,
      57: $Vq,
      58: $Vr,
      59: $Vs
    }, {
      10: 47,
      11: $Vd,
      16: $Ve,
      18: $Vf,
      19: $Vg,
      20: $Vh,
      21: $Vi
    }, o($Va, [2, 13]), {
      8: [1, 48]
    }, {
      11: [1, 49]
    }, {
      8: [1, 50]
    }, {
      8: [1, 51]
    }, {
      8: [1, 52]
    }, {
      8: [1, 53]
    }, {
      8: [1, 54]
    }, {
      12: [1, 55]
    }, o($V6, [2, 11]), {
      24: [2, 42],
      39: $Vt,
      40: $Vu,
      41: $Vv,
      42: $Vw,
      43: $Vx,
      44: $Vy,
      45: $Vz,
      46: $VA,
      47: $VB,
      48: $VC,
      49: $VD,
      50: $VE,
      51: $VF,
      52: $VG
    }, {
      8: $Vj,
      9: $Vk,
      30: 70,
      39: $Vl,
      53: $Vm,
      54: $Vn,
      55: $Vo,
      56: $Vp,
      57: $Vq,
      58: $Vr,
      59: $Vs
    }, {
      8: $Vj,
      9: $Vk,
      30: 71,
      39: $Vl,
      53: $Vm,
      54: $Vn,
      55: $Vo,
      56: $Vp,
      57: $Vq,
      58: $Vr,
      59: $Vs
    }, {
      8: $Vj,
      9: $Vk,
      30: 72,
      39: $Vl,
      53: $Vm,
      54: $Vn,
      55: $Vo,
      56: $Vp,
      57: $Vq,
      58: $Vr,
      59: $Vs
    }, o($VH, [2, 61]), o($VH, [2, 62]), o($VH, [2, 63], {
      9: [1, 73]
    }), o($VH, [2, 65]), o($VH, [2, 66]), o($VH, [2, 67]), o($VH, [2, 68]), {
      11: [1, 74]
    }, o($Va, $Vb, {
      25: 75,
      26: $Vc
    }), {
      12: [1, 76]
    }, {
      11: $VI,
      26: $VJ,
      27: 77
    }, {
      11: $VI,
      26: $VJ,
      27: 79
    }, {
      11: $VI,
      26: $VJ,
      27: 80
    }, {
      11: $VI,
      26: $VJ,
      27: 81
    }, {
      11: $VI,
      26: $VJ,
      27: 82
    }, {
      2: $VK,
      8: $VL,
      13: 83,
      16: $VM,
      18: $VN,
      19: $VO,
      20: $VP,
      21: $VQ,
      28: 84,
      32: $VR,
      33: $VS,
      35: $VT,
      38: $VU
    }, {
      8: $Vj,
      9: $Vk,
      30: 96,
      39: $Vl,
      53: $Vm,
      54: $Vn,
      55: $Vo,
      56: $Vp,
      57: $Vq,
      58: $Vr,
      59: $Vs
    }, {
      8: $Vj,
      9: $Vk,
      30: 97,
      39: $Vl,
      53: $Vm,
      54: $Vn,
      55: $Vo,
      56: $Vp,
      57: $Vq,
      58: $Vr,
      59: $Vs
    }, {
      8: $Vj,
      9: $Vk,
      30: 98,
      39: $Vl,
      53: $Vm,
      54: $Vn,
      55: $Vo,
      56: $Vp,
      57: $Vq,
      58: $Vr,
      59: $Vs
    }, {
      8: $Vj,
      9: $Vk,
      30: 99,
      39: $Vl,
      53: $Vm,
      54: $Vn,
      55: $Vo,
      56: $Vp,
      57: $Vq,
      58: $Vr,
      59: $Vs
    }, {
      8: $Vj,
      9: $Vk,
      30: 100,
      39: $Vl,
      53: $Vm,
      54: $Vn,
      55: $Vo,
      56: $Vp,
      57: $Vq,
      58: $Vr,
      59: $Vs
    }, {
      8: $Vj,
      9: $Vk,
      30: 101,
      39: $Vl,
      53: $Vm,
      54: $Vn,
      55: $Vo,
      56: $Vp,
      57: $Vq,
      58: $Vr,
      59: $Vs
    }, {
      8: $Vj,
      9: $Vk,
      30: 102,
      39: $Vl,
      53: $Vm,
      54: $Vn,
      55: $Vo,
      56: $Vp,
      57: $Vq,
      58: $Vr,
      59: $Vs
    }, {
      8: $Vj,
      9: $Vk,
      30: 103,
      39: $Vl,
      53: $Vm,
      54: $Vn,
      55: $Vo,
      56: $Vp,
      57: $Vq,
      58: $Vr,
      59: $Vs
    }, {
      8: $Vj,
      9: $Vk,
      30: 104,
      39: $Vl,
      53: $Vm,
      54: $Vn,
      55: $Vo,
      56: $Vp,
      57: $Vq,
      58: $Vr,
      59: $Vs
    }, {
      8: $Vj,
      9: $Vk,
      30: 105,
      39: $Vl,
      53: $Vm,
      54: $Vn,
      55: $Vo,
      56: $Vp,
      57: $Vq,
      58: $Vr,
      59: $Vs
    }, {
      8: $Vj,
      9: $Vk,
      30: 106,
      39: $Vl,
      53: $Vm,
      54: $Vn,
      55: $Vo,
      56: $Vp,
      57: $Vq,
      58: $Vr,
      59: $Vs
    }, {
      8: $Vj,
      9: $Vk,
      30: 107,
      39: $Vl,
      53: $Vm,
      54: $Vn,
      55: $Vo,
      56: $Vp,
      57: $Vq,
      58: $Vr,
      59: $Vs
    }, {
      8: $Vj,
      9: $Vk,
      30: 108,
      39: $Vl,
      53: $Vm,
      54: $Vn,
      55: $Vo,
      56: $Vp,
      57: $Vq,
      58: $Vr,
      59: $Vs
    }, {
      8: $Vj,
      9: $Vk,
      30: 109,
      39: $Vl,
      53: $Vm,
      54: $Vn,
      55: $Vo,
      56: $Vp,
      57: $Vq,
      58: $Vr,
      59: $Vs
    }, o($VH, [2, 44]), o($VH, [2, 59]), {
      11: [1, 110],
      39: $Vt,
      40: $Vu,
      41: $Vv,
      42: $Vw,
      43: $Vx,
      44: $Vy,
      45: $Vz,
      46: $VA,
      47: $VB,
      48: $VC,
      49: $VD,
      50: $VE,
      51: $VF,
      52: $VG
    }, {
      8: $Vj,
      9: $Vk,
      11: $VV,
      30: 112,
      31: 111,
      39: $Vl,
      53: $Vm,
      54: $Vn,
      55: $Vo,
      56: $Vp,
      57: $Vq,
      58: $Vr,
      59: $Vs
    }, {
      12: [1, 113]
    }, o($Va, [2, 14]), {
      2: $VK,
      8: $VL,
      13: 114,
      16: $VM,
      18: $VN,
      19: $VO,
      20: $VP,
      21: $VQ,
      28: 84,
      32: $VR,
      33: $VS,
      35: $VT,
      38: $VU
    }, {
      11: [2, 16]
    }, {
      16: [1, 115],
      18: [1, 116],
      19: [1, 117],
      20: [1, 118],
      21: [1, 119]
    }, {
      11: [2, 17]
    }, {
      11: [2, 18]
    }, {
      11: [2, 19]
    }, {
      11: [2, 20]
    }, {
      2: $VK,
      8: $VL,
      14: [1, 120],
      16: $VM,
      18: $VN,
      19: $VO,
      20: $VP,
      21: $VQ,
      28: 121,
      32: $VR,
      33: $VS,
      35: $VT,
      38: $VU
    }, o($VW, [2, 29]), {
      9: [1, 123],
      29: [1, 122]
    }, {
      8: $VX,
      22: 124
    }, {
      8: $VX,
      22: 126
    }, {
      8: $VX,
      22: 127
    }, {
      8: $VX,
      22: 128
    }, {
      8: $VX,
      22: 129
    }, {
      9: [1, 130]
    }, {
      9: [1, 131]
    }, {
      9: [1, 132]
    }, {
      8: $Vj,
      9: $Vk,
      30: 133,
      39: $Vl,
      53: $Vm,
      54: $Vn,
      55: $Vo,
      56: $Vp,
      57: $Vq,
      58: $Vr,
      59: $Vs
    }, o($VW, [2, 41]), o($VY, [2, 45], {
      41: $Vv,
      42: $Vw,
      43: $Vx,
      44: $Vy
    }), o($VY, [2, 46], {
      41: $Vv,
      42: $Vw,
      43: $Vx,
      44: $Vy
    }), o($VZ, [2, 47], {
      43: $Vx,
      44: $Vy
    }), o($VZ, [2, 48], {
      43: $Vx,
      44: $Vy
    }), o($VH, [2, 49]), o($VH, [2, 50]), o($V_, [2, 51], {
      39: $Vt,
      40: $Vu,
      41: $Vv,
      42: $Vw,
      43: $Vx,
      44: $Vy
    }), o($V_, [2, 52], {
      39: $Vt,
      40: $Vu,
      41: $Vv,
      42: $Vw,
      43: $Vx,
      44: $Vy
    }), o($V_, [2, 53], {
      39: $Vt,
      40: $Vu,
      41: $Vv,
      42: $Vw,
      43: $Vx,
      44: $Vy
    }), o($V_, [2, 54], {
      39: $Vt,
      40: $Vu,
      41: $Vv,
      42: $Vw,
      43: $Vx,
      44: $Vy
    }), o($V_, [2, 55], {
      39: $Vt,
      40: $Vu,
      41: $Vv,
      42: $Vw,
      43: $Vx,
      44: $Vy
    }), o($V_, [2, 56], {
      39: $Vt,
      40: $Vu,
      41: $Vv,
      42: $Vw,
      43: $Vx,
      44: $Vy
    }), o($V$, [2, 57], {
      39: $Vt,
      40: $Vu,
      41: $Vv,
      42: $Vw,
      43: $Vx,
      44: $Vy,
      45: $Vz,
      46: $VA,
      47: $VB,
      48: $VC,
      49: $VD,
      50: $VE
    }), o($V$, [2, 58], {
      39: $Vt,
      40: $Vu,
      41: $Vv,
      42: $Vw,
      43: $Vx,
      44: $Vy,
      45: $Vz,
      46: $VA,
      47: $VB,
      48: $VC,
      49: $VD,
      50: $VE
    }), o($VH, [2, 60]), {
      11: [1, 134]
    }, {
      11: $V01,
      26: $V11,
      39: $Vt,
      40: $Vu,
      41: $Vv,
      42: $Vw,
      43: $Vx,
      44: $Vy,
      45: $Vz,
      46: $VA,
      47: $VB,
      48: $VC,
      49: $VD,
      50: $VE,
      51: $VF,
      52: $VG,
      64: 135
    }, {
      2: $VK,
      8: $VL,
      13: 137,
      16: $VM,
      18: $VN,
      19: $VO,
      20: $VP,
      21: $VQ,
      28: 84,
      32: $VR,
      33: $VS,
      35: $VT,
      38: $VU
    }, {
      2: $VK,
      8: $VL,
      14: [1, 138],
      16: $VM,
      18: $VN,
      19: $VO,
      20: $VP,
      21: $VQ,
      28: 121,
      32: $VR,
      33: $VS,
      35: $VT,
      38: $VU
    }, {
      8: [1, 139]
    }, {
      8: [1, 140]
    }, {
      8: [1, 141]
    }, {
      8: [1, 142]
    }, {
      8: [1, 143]
    }, o($V6, [2, 5]), o($VW, [2, 28]), {
      8: $Vj,
      9: $Vk,
      30: 144,
      39: $Vl,
      53: $Vm,
      54: $Vn,
      55: $Vo,
      56: $Vp,
      57: $Vq,
      58: $Vr,
      59: $Vs
    }, {
      8: $Vj,
      9: $Vk,
      11: $VV,
      30: 112,
      31: 145,
      39: $Vl,
      53: $Vm,
      54: $Vn,
      55: $Vo,
      56: $Vp,
      57: $Vq,
      58: $Vr,
      59: $Vs
    }, {
      23: 146,
      24: $V8,
      29: $V9
    }, o($Va, $Vb, {
      25: 26,
      26: $Vc
    }), {
      23: 147,
      24: $V8,
      29: $V9
    }, {
      23: 148,
      24: $V8,
      29: $V9
    }, {
      23: 149,
      24: $V8,
      29: $V9
    }, {
      23: 150,
      24: $V8,
      29: $V9
    }, {
      8: $Vj,
      9: $Vk,
      30: 151,
      39: $Vl,
      53: $Vm,
      54: $Vn,
      55: $Vo,
      56: $Vp,
      57: $Vq,
      58: $Vr,
      59: $Vs
    }, {
      8: $Vj,
      9: $Vk,
      30: 152,
      39: $Vl,
      53: $Vm,
      54: $Vn,
      55: $Vo,
      56: $Vp,
      57: $Vq,
      58: $Vr,
      59: $Vs
    }, {
      8: [1, 156],
      16: [1, 154],
      18: [1, 155],
      36: 153
    }, {
      24: [1, 157],
      39: $Vt,
      40: $Vu,
      41: $Vv,
      42: $Vw,
      43: $Vx,
      44: $Vy,
      45: $Vz,
      46: $VA,
      47: $VB,
      48: $VC,
      49: $VD,
      50: $VE,
      51: $VF,
      52: $VG
    }, o($VH, [2, 64]), {
      11: [2, 79]
    }, {
      8: $Vj,
      9: $Vk,
      30: 158,
      39: $Vl,
      53: $Vm,
      54: $Vn,
      55: $Vo,
      56: $Vp,
      57: $Vq,
      58: $Vr,
      59: $Vs
    }, {
      2: $VK,
      8: $VL,
      14: [1, 159],
      16: $VM,
      18: $VN,
      19: $VO,
      20: $VP,
      21: $VQ,
      28: 121,
      32: $VR,
      33: $VS,
      35: $VT,
      38: $VU
    }, o($V6, [2, 4]), {
      11: $VI,
      26: $VJ,
      27: 160
    }, {
      11: $VI,
      26: $VJ,
      27: 161
    }, {
      11: $VI,
      26: $VJ,
      27: 162
    }, {
      11: $VI,
      26: $VJ,
      27: 163
    }, {
      11: $VI,
      26: $VJ,
      27: 164
    }, {
      24: [1, 165],
      39: $Vt,
      40: $Vu,
      41: $Vv,
      42: $Vw,
      43: $Vx,
      44: $Vy,
      45: $Vz,
      46: $VA,
      47: $VB,
      48: $VC,
      49: $VD,
      50: $VE,
      51: $VF,
      52: $VG
    }, {
      11: [1, 166]
    }, {
      24: [1, 167]
    }, {
      24: [1, 168]
    }, {
      24: [1, 169]
    }, {
      24: [1, 170]
    }, {
      24: [1, 171]
    }, {
      11: [1, 172],
      39: $Vt,
      40: $Vu,
      41: $Vv,
      42: $Vw,
      43: $Vx,
      44: $Vy,
      45: $Vz,
      46: $VA,
      47: $VB,
      48: $VC,
      49: $VD,
      50: $VE,
      51: $VF,
      52: $VG
    }, {
      11: [1, 173],
      39: $Vt,
      40: $Vu,
      41: $Vv,
      42: $Vw,
      43: $Vx,
      44: $Vy,
      45: $Vz,
      46: $VA,
      47: $VB,
      48: $VC,
      49: $VD,
      50: $VE,
      51: $VF,
      52: $VG
    }, {
      8: $Vj,
      9: $Vk,
      30: 174,
      39: $Vl,
      53: $Vm,
      54: $Vn,
      55: $Vo,
      56: $Vp,
      57: $Vq,
      58: $Vr,
      59: $Vs
    }, {
      8: [1, 175]
    }, {
      8: [1, 176]
    }, {
      29: [1, 177]
    }, o($VW, [2, 40]), {
      11: $V01,
      26: $V11,
      39: $Vt,
      40: $Vu,
      41: $Vv,
      42: $Vw,
      43: $Vx,
      44: $Vy,
      45: $Vz,
      46: $VA,
      47: $VB,
      48: $VC,
      49: $VD,
      50: $VE,
      51: $VF,
      52: $VG,
      64: 178
    }, o($V6, [2, 12]), {
      11: [2, 22]
    }, {
      11: [2, 23]
    }, {
      11: [2, 24]
    }, {
      11: [2, 25]
    }, {
      11: [2, 26]
    }, o($VW, [2, 30]), {
      24: [1, 179]
    }, o($VW, [2, 32]), o($VW, [2, 33]), o($VW, [2, 34]), o($VW, [2, 35]), o($VW, [2, 36]), {
      24: [1, 180]
    }, {
      12: [1, 181]
    }, {
      24: [1, 182],
      39: $Vt,
      40: $Vu,
      41: $Vv,
      42: $Vw,
      43: $Vx,
      44: $Vy,
      45: $Vz,
      46: $VA,
      47: $VB,
      48: $VC,
      49: $VD,
      50: $VE,
      51: $VF,
      52: $VG
    }, {
      29: [1, 183]
    }, {
      29: [1, 184]
    }, {
      8: $Vj,
      9: $Vk,
      30: 185,
      39: $Vl,
      53: $Vm,
      54: $Vn,
      55: $Vo,
      56: $Vp,
      57: $Vq,
      58: $Vr,
      59: $Vs
    }, {
      11: [2, 81]
    }, o($VW, [2, 31]), o($VW, [2, 37]), {
      2: $VK,
      8: $VL,
      13: 186,
      16: $VM,
      18: $VN,
      19: $VO,
      20: $VP,
      21: $VQ,
      28: 84,
      32: $VR,
      33: $VS,
      35: $VT,
      38: $VU
    }, {
      8: [1, 187]
    }, {
      8: $Vj,
      9: $Vk,
      30: 188,
      39: $Vl,
      53: $Vm,
      54: $Vn,
      55: $Vo,
      56: $Vp,
      57: $Vq,
      58: $Vr,
      59: $Vs
    }, {
      8: $Vj,
      9: $Vk,
      30: 189,
      39: $Vl,
      53: $Vm,
      54: $Vn,
      55: $Vo,
      56: $Vp,
      57: $Vq,
      58: $Vr,
      59: $Vs
    }, {
      24: [1, 190],
      39: $Vt,
      40: $Vu,
      41: $Vv,
      42: $Vw,
      43: $Vx,
      44: $Vy,
      45: $Vz,
      46: $VA,
      47: $VB,
      48: $VC,
      49: $VD,
      50: $VE,
      51: $VF,
      52: $VG
    }, {
      2: $VK,
      8: $VL,
      14: [1, 191],
      16: $VM,
      18: $VN,
      19: $VO,
      20: $VP,
      21: $VQ,
      28: 121,
      32: $VR,
      33: $VS,
      35: $VT,
      38: $VU
    }, {
      29: [1, 195],
      37: 192,
      62: [1, 193],
      63: [1, 194]
    }, {
      24: [1, 196],
      39: $Vt,
      40: $Vu,
      41: $Vv,
      42: $Vw,
      43: $Vx,
      44: $Vy,
      45: $Vz,
      46: $VA,
      47: $VB,
      48: $VC,
      49: $VD,
      50: $VE,
      51: $VF,
      52: $VG
    }, {
      24: [1, 197],
      39: $Vt,
      40: $Vu,
      41: $Vv,
      42: $Vw,
      43: $Vx,
      44: $Vy,
      45: $Vz,
      46: $VA,
      47: $VB,
      48: $VC,
      49: $VD,
      50: $VE,
      51: $VF,
      52: $VG
    }, o($V21, [2, 75]), o($VW, $V31, {
      34: 198,
      60: $V41
    }), {
      11: [1, 200]
    }, {
      11: [2, 76]
    }, {
      11: [2, 77]
    }, {
      8: $Vj,
      9: $Vk,
      30: 201,
      39: $Vl,
      53: $Vm,
      54: $Vn,
      55: $Vo,
      56: $Vp,
      57: $Vq,
      58: $Vr,
      59: $Vs
    }, o($V21, [2, 73]), o($V21, [2, 74]), o($VW, [2, 38]), {
      12: [1, 204],
      33: [1, 203],
      61: 202
    }, {
      12: [1, 205]
    }, {
      11: [2, 78],
      39: $Vt,
      40: $Vu,
      41: $Vv,
      42: $Vw,
      43: $Vx,
      44: $Vy,
      45: $Vz,
      46: $VA,
      47: $VB,
      48: $VC,
      49: $VD,
      50: $VE,
      51: $VF,
      52: $VG
    }, o($VW, [2, 69]), {
      9: [1, 206]
    }, {
      2: $VK,
      8: $VL,
      13: 207,
      16: $VM,
      18: $VN,
      19: $VO,
      20: $VP,
      21: $VQ,
      28: 84,
      32: $VR,
      33: $VS,
      35: $VT,
      38: $VU
    }, {
      2: $VK,
      8: $VL,
      13: 208,
      16: $VM,
      18: $VN,
      19: $VO,
      20: $VP,
      21: $VQ,
      28: 84,
      32: $VR,
      33: $VS,
      35: $VT,
      38: $VU
    }, {
      8: $Vj,
      9: $Vk,
      30: 209,
      39: $Vl,
      53: $Vm,
      54: $Vn,
      55: $Vo,
      56: $Vp,
      57: $Vq,
      58: $Vr,
      59: $Vs
    }, {
      2: $VK,
      8: $VL,
      14: [1, 210],
      16: $VM,
      18: $VN,
      19: $VO,
      20: $VP,
      21: $VQ,
      28: 121,
      32: $VR,
      33: $VS,
      35: $VT,
      38: $VU
    }, {
      2: $VK,
      8: $VL,
      14: [1, 211],
      16: $VM,
      18: $VN,
      19: $VO,
      20: $VP,
      21: $VQ,
      28: 121,
      32: $VR,
      33: $VS,
      35: $VT,
      38: $VU
    }, {
      11: [1, 212],
      39: $Vt,
      40: $Vu,
      41: $Vv,
      42: $Vw,
      43: $Vx,
      44: $Vy,
      45: $Vz,
      46: $VA,
      47: $VB,
      48: $VC,
      49: $VD,
      50: $VE,
      51: $VF,
      52: $VG
    }, o($VW, [2, 72]), o($VW, [2, 39]), {
      12: [1, 213]
    }, {
      2: $VK,
      8: $VL,
      13: 214,
      16: $VM,
      18: $VN,
      19: $VO,
      20: $VP,
      21: $VQ,
      28: 84,
      32: $VR,
      33: $VS,
      35: $VT,
      38: $VU
    }, {
      2: $VK,
      8: $VL,
      14: [1, 215],
      16: $VM,
      18: $VN,
      19: $VO,
      20: $VP,
      21: $VQ,
      28: 121,
      32: $VR,
      33: $VS,
      35: $VT,
      38: $VU
    }, o($VW, $V31, {
      34: 216,
      60: $V41
    }), o($VW, [2, 71])],
    defaultActions: {
      10: [2, 1],
      77: [2, 16],
      79: [2, 17],
      80: [2, 18],
      81: [2, 19],
      82: [2, 20],
      135: [2, 79],
      160: [2, 22],
      161: [2, 23],
      162: [2, 24],
      163: [2, 25],
      164: [2, 26],
      178: [2, 81],
      193: [2, 76],
      194: [2, 77]
    },
    parseError: function parseError(str, hash) {
      if (hash.recoverable) {
        this.trace(str);
      } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
      }
    },
    parse: function parse(input) {
      var self = this,
          stack = [0],
          tstack = [],
          // token stack
      vstack = [null],
          // semantic value stack
      lstack = [],
          // location stack
      table = this.table,
          yytext = '',
          yylineno = 0,
          yyleng = 0,
          recovering = 0,
          TERROR = 2,
          EOF = 1;
      var args = lstack.slice.call(arguments, 1); //this.reductionCount = this.shiftCount = 0;

      var lexer = Object.create(this.lexer);
      var sharedState = {
        yy: {}
      }; // copy state

      for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
          sharedState.yy[k] = this.yy[k];
        }
      }

      lexer.setInput(input, sharedState.yy);
      sharedState.yy.lexer = lexer;
      sharedState.yy.parser = this;

      if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
      }

      var yyloc = lexer.yylloc;
      lstack.push(yyloc);
      var ranges = lexer.options && lexer.options.ranges;

      if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
      } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
      }

      function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
      }

      _token_stack: var lex = function lex() {
        var token;
        token = lexer.lex() || EOF; // if token isn't its numeric value, convert

        if (typeof token !== 'number') {
          token = self.symbols_[token] || token;
        }

        return token;
      };

      var symbol,
          preErrorSymbol,
          state,
          action,
          a,
          r,
          yyval = {},
          p,
          len,
          newState,
          expected;

      while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1]; // use default actions if available

        if (this.defaultActions[state]) {
          action = this.defaultActions[state];
        } else {
          if (symbol === null || typeof symbol == 'undefined') {
            symbol = lex();
          } // read action for current state and first input


          action = table[state] && table[state][symbol];
        }

        _handle_error: // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
          // Return the rule stack depth where the nearest error rule can be found.
          // Return FALSE when no error recovery rule was found.
          var locateNearestErrorRecoveryRule = function locateNearestErrorRecoveryRule(state) {
            var stack_probe = stack.length - 1;
            var depth = 0; // try to recover from error

            for (;;) {
              // check for error recovery rule in this state
              if (TERROR.toString() in table[state]) {
                return depth;
              }

              if (state === 0 || stack_probe < 2) {
                return false; // No suitable error recovery rule available.
              }

              stack_probe -= 2; // popStack(1): [symbol, action]

              state = stack[stack_probe];
              ++depth;
            }
          };

          var error_rule_depth;
          var errStr = '';

          if (!recovering) {
            // first see if there's any chance at hitting an error recovery rule:
            error_rule_depth = locateNearestErrorRecoveryRule(state); // Report error

            expected = [];

            for (p in table[state]) {
              if (this.terminals_[p] && p > TERROR) {
                expected.push("'" + this.terminals_[p] + "'");
              }
            }

            if (lexer.showPosition) {
              errStr = 'Parse error on line ' + (yylineno + 1) + ":\n" + lexer.showPosition() + "\nExpecting " + expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol) + "'";
            } else {
              errStr = 'Parse error on line ' + (yylineno + 1) + ": Unexpected " + (symbol == EOF ? "end of input" : "'" + (this.terminals_[symbol] || symbol) + "'");
            }

            this.parseError(errStr, {
              text: lexer.match,
              token: this.terminals_[symbol] || symbol,
              line: lexer.yylineno,
              loc: yyloc,
              expected: expected,
              recoverable: error_rule_depth !== false
            });
          } else if (preErrorSymbol !== EOF) {
            error_rule_depth = locateNearestErrorRecoveryRule(state);
          } // just recovered from another error


          if (recovering == 3) {
            if (symbol === EOF || preErrorSymbol === EOF) {
              throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
            } // discard current lookahead and grab another


            yyleng = lexer.yyleng;
            yytext = lexer.yytext;
            yylineno = lexer.yylineno;
            yyloc = lexer.yylloc;
            symbol = lex();
          } // try to recover from error


          if (error_rule_depth === false) {
            throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
          }

          popStack(error_rule_depth);
          preErrorSymbol = symbol == TERROR ? null : symbol; // save the lookahead token

          symbol = TERROR; // insert generic error symbol as new lookahead

          state = stack[stack.length - 1];
          action = table[state] && table[state][TERROR];
          recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        } // this shouldn't happen, unless resolve defaults are off


        if (action[0] instanceof Array && action.length > 1) {
          throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }

        switch (action[0]) {
          case 1:
            // shift
            //this.shiftCount++;
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]); // push state

            symbol = null;

            if (!preErrorSymbol) {
              // normal execution/no error
              yyleng = lexer.yyleng;
              yytext = lexer.yytext;
              yylineno = lexer.yylineno;
              yyloc = lexer.yylloc;

              if (recovering > 0) {
                recovering--;
              }
            } else {
              // error just occurred, resume old lookahead f/ before error
              symbol = preErrorSymbol;
              preErrorSymbol = null;
            }

            break;

          case 2:
            // reduce
            //this.reductionCount++;
            len = this.productions_[action[1]][1]; // perform semantic action

            yyval.$ = vstack[vstack.length - len]; // default to $$ = $1
            // default location, uses first token for firsts, last for lasts

            yyval._$ = {
              first_line: lstack[lstack.length - (len || 1)].first_line,
              last_line: lstack[lstack.length - 1].last_line,
              first_column: lstack[lstack.length - (len || 1)].first_column,
              last_column: lstack[lstack.length - 1].last_column
            };

            if (ranges) {
              yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
            }

            r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

            if (typeof r !== 'undefined') {
              return r;
            } // pop off stack


            if (len) {
              stack = stack.slice(0, -1 * len * 2);
              vstack = vstack.slice(0, -1 * len);
              lstack = lstack.slice(0, -1 * len);
            }

            stack.push(this.productions_[action[1]][0]); // push nonterminal (reduce)

            vstack.push(yyval.$);
            lstack.push(yyval._$); // goto new state = table[STATE][NONTERMINAL]

            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;

          case 3:
            // accept
            return true;
        }
      }

      return true;
    }
  };

  var TIPO_OPERACION = require('./instrucciones').TIPO_OPERACION;

  var TIPO_VALOR = require('./instrucciones').TIPO_VALOR;

  var instruccionesAPI = require('./instrucciones').instruccionesAPI;

  var TIPO_DATO = require('./instrucciones').TIPO_DATO;

  var TS = require('./instrucciones').TS;

  var salida = [];
  var ArrayDeErrores = [];
  var currentType = "";
  /* generated by jison-lex 0.3.4 */

  var lexer = function () {
    var lexer = {
      EOF: 1,
      parseError: function parseError(str, hash) {
        if (this.yy.parser) {
          this.yy.parser.parseError(str, hash);
        } else {
          throw new Error(str);
        }
      },
      // resets the lexer, sets new input
      setInput: function setInput(input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
          first_line: 1,
          first_column: 0,
          last_line: 1,
          last_column: 0
        };

        if (this.options.ranges) {
          this.yylloc.range = [0, 0];
        }

        this.offset = 0;
        return this;
      },
      // consumes and returns one char from the input
      input: function input() {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);

        if (lines) {
          this.yylineno++;
          this.yylloc.last_line++;
        } else {
          this.yylloc.last_column++;
        }

        if (this.options.ranges) {
          this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
      },
      // unshifts one char (or a string) into the input
      unput: function unput(ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);
        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len); //this.yyleng -= len;

        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
          this.yylineno -= lines.length - 1;
        }

        var r = this.yylloc.range;
        this.yylloc = {
          first_line: this.yylloc.first_line,
          last_line: this.yylineno + 1,
          first_column: this.yylloc.first_column,
          last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
        };

        if (this.options.ranges) {
          this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }

        this.yyleng = this.yytext.length;
        return this;
      },
      // When called from action, caches matched text and appends it on next action
      more: function more() {
        this._more = true;
        return this;
      },
      // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
      reject: function reject() {
        if (this.options.backtrack_lexer) {
          this._backtrack = true;
        } else {
          return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
            text: "",
            token: null,
            line: this.yylineno
          });
        }

        return this;
      },
      // retain first n characters of the match
      less: function less(n) {
        this.unput(this.match.slice(n));
      },
      // displays already matched input, i.e. for error messages
      pastInput: function pastInput() {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
      },
      // displays upcoming input, i.e. for error messages
      upcomingInput: function upcomingInput() {
        var next = this.match;

        if (next.length < 20) {
          next += this._input.substr(0, 20 - next.length);
        }

        return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
      },
      // displays the character position where the lexing error occurred, i.e. for error messages
      showPosition: function showPosition() {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
      },
      // test the lexed token: return FALSE when not a match, otherwise return token
      test_match: function test_match(match, indexed_rule) {
        var token, lines, backup;

        if (this.options.backtrack_lexer) {
          // save context
          backup = {
            yylineno: this.yylineno,
            yylloc: {
              first_line: this.yylloc.first_line,
              last_line: this.last_line,
              first_column: this.yylloc.first_column,
              last_column: this.yylloc.last_column
            },
            yytext: this.yytext,
            match: this.match,
            matches: this.matches,
            matched: this.matched,
            yyleng: this.yyleng,
            offset: this.offset,
            _more: this._more,
            _input: this._input,
            yy: this.yy,
            conditionStack: this.conditionStack.slice(0),
            done: this.done
          };

          if (this.options.ranges) {
            backup.yylloc.range = this.yylloc.range.slice(0);
          }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);

        if (lines) {
          this.yylineno += lines.length;
        }

        this.yylloc = {
          first_line: this.yylloc.last_line,
          last_line: this.yylineno + 1,
          first_column: this.yylloc.last_column,
          last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;

        if (this.options.ranges) {
          this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }

        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);

        if (this.done && this._input) {
          this.done = false;
        }

        if (token) {
          return token;
        } else if (this._backtrack) {
          // recover context
          for (var k in backup) {
            this[k] = backup[k];
          }

          return false; // rule action called reject() implying the next rule should be tested instead.
        }

        return false;
      },
      // return next match in input
      next: function next() {
        if (this.done) {
          return this.EOF;
        }

        if (!this._input) {
          this.done = true;
        }

        var token, match, tempMatch, index;

        if (!this._more) {
          this.yytext = '';
          this.match = '';
        }

        var rules = this._currentRules();

        for (var i = 0; i < rules.length; i++) {
          tempMatch = this._input.match(this.rules[rules[i]]);

          if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
            match = tempMatch;
            index = i;

            if (this.options.backtrack_lexer) {
              token = this.test_match(tempMatch, rules[i]);

              if (token !== false) {
                return token;
              } else if (this._backtrack) {
                match = false;
                continue; // rule action called reject() implying a rule MISmatch.
              } else {
                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                return false;
              }
            } else if (!this.options.flex) {
              break;
            }
          }
        }

        if (match) {
          token = this.test_match(match, rules[index]);

          if (token !== false) {
            return token;
          } // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)


          return false;
        }

        if (this._input === "") {
          return this.EOF;
        } else {
          return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
            text: "",
            token: null,
            line: this.yylineno
          });
        }
      },
      // return next match that has a token
      lex: function lex() {
        var r = this.next();

        if (r) {
          return r;
        } else {
          return this.lex();
        }
      },
      // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
      begin: function begin(condition) {
        this.conditionStack.push(condition);
      },
      // pop the previously active lexer condition state off the condition stack
      popState: function popState() {
        var n = this.conditionStack.length - 1;

        if (n > 0) {
          return this.conditionStack.pop();
        } else {
          return this.conditionStack[0];
        }
      },
      // produce the lexer rule set which is active for the currently active lexer condition state
      _currentRules: function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
          return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
          return this.conditions["INITIAL"].rules;
        }
      },
      // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
      topState: function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);

        if (n >= 0) {
          return this.conditionStack[n];
        } else {
          return "INITIAL";
        }
      },
      // alias for begin(condition)
      pushState: function pushState(condition) {
        this.begin(condition);
      },
      // return the number of states currently on the stack
      stateStackSize: function stateStackSize() {
        return this.conditionStack.length;
      },
      options: {
        "case-sensitive": true
      },
      performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {
        var YYSTATE = YY_START;

        switch ($avoiding_name_collisions) {
          case 0:
            return 16;
            break;

          case 1:
            return 18;
            break;

          case 2:
            return 20;
            break;

          case 3:
            return 21;
            break;

          case 4:
            return 19;
            break;

          case 5:
            return 58;
            break;

          case 6:
            return 57;
            break;

          case 7:
            return 'R_CLASS';
            break;

          case 8:
            return 'R_IMPORT';
            break;

          case 9:
            return 33;
            break;

          case 10:
            return 60;
            break;

          case 11:
            return 'R_SWITCH';
            break;

          case 12:
            return 'R_CASE';
            break;

          case 13:
            return 'R_DEFAULT';
            break;

          case 14:
            return 'R_BREAK';
            break;

          case 15:
            return 'R_CONTINUE';
            break;

          case 16:
            return 'R_WHILE';
            break;

          case 17:
            return 'R_DO';
            break;

          case 18:
            return 35;
            break;

          case 19:
            return 7;
            break;

          case 20:
            return 38;
            break;

          case 21:
            return 15;
            break;

          case 22:
            return 'R_SYSTEM';
            break;

          case 23:
            return 'R_OUT';
            break;

          case 24:
            return 32;
            break;

          case 25:
            return 'R_PRINTLN';
            break;

          case 26:
            yy_.yytext = yy_.yytext.substr(1, yy_.yyleng - 2);
            return 59;
            break;

          case 27:
            yy_.yytext = yy_.yytext.substr(1, yy_.yyleng - 2);
            return 56;
            break;

          case 28:
            return 55;
            break;

          case 29:
            return 54;
            break;

          case 30:
            return 8;
            break;

          case 31:
            break;

          case 32:
            // comentario simple línea
            break;

          case 33:
            // comentario multiple líneas
            break;

          case 34:
            return 62;
            break;

          case 35:
            return 63;
            break;

          case 36:
            return "MAS";
            break;

          case 37:
            return 39;
            break;

          case 38:
            return 41;
            break;

          case 39:
            return 42;
            break;

          case 40:
            return 43;
            break;

          case 41:
            return 44;
            break;

          case 42:
            return 49;
            break;

          case 43:
            return 50;
            break;

          case 44:
            return 29;
            break;

          case 45:
            return 47;
            break;

          case 46:
            return 45;
            break;

          case 47:
            return 48;
            break;

          case 48:
            return 46;
            break;

          case 49:
            return 51;
            break;

          case 50:
            return 52;
            break;

          case 51:
            return 53;
            break;

          case 52:
            return 12;
            break;

          case 53:
            return 14;
            break;

          case 54:
            return 9;
            break;

          case 55:
            return 11;
            break;

          case 56:
            return 'ABRIR_CORCHETE';
            break;

          case 57:
            return 'CERRAR_CORCHETE';
            break;

          case 58:
            return 24;
            break;

          case 59:
            return 'DOS_PUNTOS';
            break;

          case 60:
            return 'PUNTO';
            break;

          case 61:
            return 26;
            break;

          case 62:
            return 5;
            break;

          case 63:
            console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
            salida.push('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
            ArrayDeErrores.push({
              tipo: "léxico",
              linea: this._$.first_line,
              columna: this._$.first_column,
              descripcion: yy_.yytext
            });
            break;
        }
      },
      rules: [/^(?:int\b)/, /^(?:double\b)/, /^(?:boolean\b)/, /^(?:char\b)/, /^(?:String\b)/, /^(?:false\b)/, /^(?:true\b)/, /^(?:class\b)/, /^(?:import\b)/, /^(?:if\b)/, /^(?:else\b)/, /^(?:switch\b)/, /^(?:case\b)/, /^(?:default\b)/, /^(?:break\b)/, /^(?:continue\b)/, /^(?:while\b)/, /^(?:do\b)/, /^(?:for\b)/, /^(?:void\b)/, /^(?:return\b)/, /^(?:main\b)/, /^(?:System\b)/, /^(?:out\b)/, /^(?:print\b)/, /^(?:println\b)/, /^(?:"(\\"|\\n|\\t|\\r|\\\\|[^\"])*")/, /^(?:'[^\"]?')/, /^(?:[0-9]+\.([0-9]+)?\b)/, /^(?:[0-9]+\b)/, /^(?:([a-zA-Z])[a-zA-Z0-9_]*)/, /^(?:\s+)/, /^(?:\/\/.*)/, /^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/, /^(?:\+\+)/, /^(?:--)/, /^(?:\+)/, /^(?:-)/, /^(?:\*)/, /^(?:\/)/, /^(?:\^)/, /^(?:%)/, /^(?:==)/, /^(?:!=)/, /^(?:=)/, /^(?:>=)/, /^(?:>)/, /^(?:<=)/, /^(?:<)/, /^(?:&&)/, /^(?:\|\|)/, /^(?:!)/, /^(?:\{)/, /^(?:\})/, /^(?:\()/, /^(?:\))/, /^(?:\[)/, /^(?:\])/, /^(?:;)/, /^(?::)/, /^(?:\.)/, /^(?:,)/, /^(?:$)/, /^(?:.)/],
      conditions: {
        "INITIAL": {
          "rules": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63],
          "inclusive": true
        }
      }
    };
    return lexer;
  }();

  parser.lexer = lexer;

  function Parser() {
    this.yy = {};
  }

  Parser.prototype = parser;
  parser.Parser = Parser;
  return new Parser();
}();

if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
  exports.parser = gramatica;
  exports.Parser = gramatica.Parser;

  exports.parse = function () {
    return gramatica.parse.apply(gramatica, arguments);
  };

  exports.main = function commonjsMain(args) {
    if (!args[1]) {
      console.log('Usage: ' + args[0] + ' FILE');
      process.exit(1);
    }

    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");

    return exports.parser.parse(source);
  };

  if (typeof module !== 'undefined' && require.main === module) {
    exports.main(process.argv.slice(1));
  }
}