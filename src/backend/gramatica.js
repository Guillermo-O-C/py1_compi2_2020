/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,20],$V1=[1,6],$V2=[1,7],$V3=[1,8],$V4=[1,9],$V5=[1,13],$V6=[1,18],$V7=[1,10],$V8=[1,11],$V9=[1,12],$Va=[1,14],$Vb=[1,16],$Vc=[1,17],$Vd=[1,19],$Ve=[1,21],$Vf=[2,5,9,15,17,21,23,25,27,30,31,32,37,43,44,79,89],$Vg=[20,40,41,42],$Vh=[2,134],$Vi=[1,34],$Vj=[1,33],$Vk=[1,39],$Vl=[1,52],$Vm=[2,125],$Vn=[1,42],$Vo=[1,37],$Vp=[1,38],$Vq=[1,40],$Vr=[1,41],$Vs=[1,43],$Vt=[1,44],$Vu=[1,45],$Vv=[1,46],$Vw=[1,47],$Vx=[1,49],$Vy=[1,51],$Vz=[1,68],$VA=[1,73],$VB=[1,74],$VC=[1,75],$VD=[1,76],$VE=[1,79],$VF=[1,77],$VG=[1,78],$VH=[1,80],$VI=[1,82],$VJ=[1,83],$VK=[2,73],$VL=[12,15,20,34,40,41,42,46,47,48,49,50,51,52,53,54,55,56,57,58,59,71,72,75],$VM=[1,94],$VN=[1,93],$VO=[1,95],$VP=[1,96],$VQ=[1,97],$VR=[1,98],$VS=[1,99],$VT=[1,100],$VU=[1,101],$VV=[1,102],$VW=[1,103],$VX=[1,104],$VY=[1,105],$VZ=[1,106],$V_=[1,107],$V$=[12,15,20,34,46,47,48,49,50,51,52,53,54,55,56,57,58,59,71,72,75],$V01=[1,116],$V11=[20,40,75],$V21=[2,88],$V31=[1,121],$V41=[2,9,15,17,21,23,25,27,30,31,37,43,44,79],$V51=[2,75],$V61=[1,151],$V71=[2,103],$V81=[1,175],$V91=[20,75],$Va1=[2,84],$Vb1=[1,180],$Vc1=[1,185],$Vd1=[1,182],$Ve1=[1,183],$Vf1=[1,184],$Vg1=[12,75],$Vh1=[12,15,20,34,46,47,52,53,54,55,56,57,58,59,71,72,75],$Vi1=[12,15,20,34,46,47,48,49,52,53,54,55,56,57,58,59,71,72,75],$Vj1=[12,15,20,34,52,53,54,55,56,57,58,59,71,72,75],$Vk1=[12,15,20,34,58,59,71,72,75],$Vl1=[2,80],$Vm1=[1,222],$Vn1=[12,13,15,20,40,75],$Vo1=[2,94],$Vp1=[1,225],$Vq1=[1,231],$Vr1=[2,114],$Vs1=[1,235],$Vt1=[1,236],$Vu1=[2,123],$Vv1=[1,255],$Vw1=[1,276],$Vx1=[1,274],$Vy1=[1,275],$Vz1=[10,13,25,46,60,61,62,63,64,65,66,67,69,73],$VA1=[2,109],$VB1=[1,300],$VC1=[1,314];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaracion":7,"type":8,"R_IF":9,"ABRIR_PARENTESIS":10,"expresion":11,"CERRAR_PARENTESIS":12,"ABRIR_LLAVE":13,"sentencias":14,"CERRAR_LLAVE":15,"elseIf":16,"R_CONSOLE":17,"PUNTO":18,"R_LOG":19,"PUNTO_COMA":20,"R_SWITCH":21,"cases":22,"R_FOR":23,"for_init":24,"IDENTIFICADOR":25,"for_change":26,"R_LET":27,"R_OF":28,"R_IN":29,"R_WHILE":30,"R_DO":31,"R_FUNCTION":32,"parametros":33,"DOS_PUNTOS":34,"tipo":35,"argumentos":36,"R_RETURN":37,"retorno":38,"id":39,"IGUAL":40,"INCREMENTO":41,"DECREMENTO":42,"R_BREAK":43,"R_CONTINUE":44,"sentencia":45,"MENOS":46,"MAS":47,"MULTIPLICACION":48,"DIVISION":49,"POTENCIA":50,"MODULO":51,"MAYOR":52,"MENOR":53,"MAYOR_IGUAL":54,"MENOR_IGUAL":55,"IGUALDAD":56,"DISTINTO":57,"AND":58,"OR":59,"NOT":60,"ENTERO":61,"DECIMAL":62,"R_TRUE":63,"R_FALSE":64,"CADENA":65,"CADENA_CHARS":66,"CADENA_EJECUTABLE":67,"objeto":68,"ABRIR_CORCHETE":69,"arrays":70,"CERRAR_CORCHETE":71,"OPERADOR_TERNARIO":72,"R_NULL":73,"argumentos_P":74,"COMA":75,"definicion_tipo":76,"definicion":77,"listaID":78,"R_CONST":79,"listaIDConst":80,"definicion_const":81,"R_NUMBER":82,"declarar_array":83,"R_STRING":84,"R_BOOLEAN":85,"obj_atributos":86,"obj_atributos_pr":87,"arrays_pr":88,"R_TYPE":89,"type_atributos":90,"type_atributos_pr":91,"R_ELSE":92,"elseIf_P":93,"R_CASE":94,"R_DEFAULT":95,"parametros_pr":96,"array_position":97,"id_pr":98,"R_POP":99,"R_LENGTH":100,"R_PUSH":101,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"R_IF",10:"ABRIR_PARENTESIS",12:"CERRAR_PARENTESIS",13:"ABRIR_LLAVE",15:"CERRAR_LLAVE",17:"R_CONSOLE",18:"PUNTO",19:"R_LOG",20:"PUNTO_COMA",21:"R_SWITCH",23:"R_FOR",25:"IDENTIFICADOR",27:"R_LET",28:"R_OF",29:"R_IN",30:"R_WHILE",31:"R_DO",32:"R_FUNCTION",34:"DOS_PUNTOS",37:"R_RETURN",40:"IGUAL",41:"INCREMENTO",42:"DECREMENTO",43:"R_BREAK",44:"R_CONTINUE",46:"MENOS",47:"MAS",48:"MULTIPLICACION",49:"DIVISION",50:"POTENCIA",51:"MODULO",52:"MAYOR",53:"MENOR",54:"MAYOR_IGUAL",55:"MENOR_IGUAL",56:"IGUALDAD",57:"DISTINTO",58:"AND",59:"OR",60:"NOT",61:"ENTERO",62:"DECIMAL",63:"R_TRUE",64:"R_FALSE",65:"CADENA",66:"CADENA_CHARS",67:"CADENA_EJECUTABLE",69:"ABRIR_CORCHETE",71:"CERRAR_CORCHETE",72:"OPERADOR_TERNARIO",73:"R_NULL",75:"COMA",79:"R_CONST",82:"R_NUMBER",84:"R_STRING",85:"R_BOOLEAN",89:"R_TYPE",92:"R_ELSE",94:"R_CASE",95:"R_DEFAULT",99:"R_POP",100:"R_LENGTH",101:"R_PUSH"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,8],[6,7],[6,7],[6,11],[6,10],[6,10],[6,7],[6,9],[6,10],[6,5],[6,3],[6,4],[6,3],[6,3],[6,2],[6,2],[6,2],[14,2],[14,1],[45,1],[45,8],[45,7],[45,7],[45,11],[45,10],[45,10],[45,7],[45,9],[45,5],[45,3],[45,4],[45,3],[45,3],[45,2],[45,2],[45,2],[11,2],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,2],[11,3],[11,1],[11,1],[11,4],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,3],[11,1],[11,5],[11,1],[36,2],[36,0],[74,3],[74,0],[7,6],[7,6],[7,2],[78,5],[78,0],[80,6],[80,0],[77,2],[77,0],[81,2],[81,1],[76,2],[76,0],[35,2],[35,2],[35,2],[35,2],[83,3],[83,0],[68,3],[68,2],[86,4],[87,2],[87,0],[70,2],[70,0],[88,3],[88,0],[8,7],[90,3],[91,2],[91,0],[16,2],[16,0],[93,8],[93,3],[22,7],[22,5],[22,0],[24,6],[24,4],[26,1],[26,1],[26,2],[33,3],[33,0],[96,4],[96,0],[38,1],[38,0],[97,4],[97,0],[39,2],[98,4],[98,3],[98,4],[98,2],[98,5],[98,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		// cuado se haya reconocido la entrada completa retornamos el AST
		var temporal = salida;
		salida=[];
		var tempAr = ArrayDeErrores;
		ArrayDeErrores = [];
		return {AST: $$[$0-1], Errores: temporal};
	
break;
case 2: case 23:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3:
this.$=[$$[$0]];
break;
case 4: case 5: case 25: case 83: case 85: case 87: case 98: case 106: case 117: case 118: case 119: case 124:
this.$=$$[$0];
break;
case 6: case 26:
 this.$ = instruccionesAPI.nuevoIf($$[$0-5], $$[$0-2], $$[$0]);
break;
case 7: case 27:
this.$ = instruccionesAPI.nuevoImprimir($$[$0-2]);
break;
case 8: case 28:
this.$=instruccionesAPI.nuevoSwitch($$[$0-4], $$[$0-1]);
break;
case 9: case 29:
 this.$ = instruccionesAPI.nuevoFor($$[$0-8], $$[$0-7], {id:$$[$0-5], paso:$$[$0-4]}, $$[$0-1]);
break;
case 10: case 30:
this.$=instruccionesAPI.nuevoForOF($$[$0-6], $$[$0-4], $$[$0-1]);
break;
case 11: case 31:
this.$=instruccionesAPI.nuevoForIn($$[$0-6], $$[$0-4], $$[$0-1]);
break;
case 12: case 32:
this.$=instruccionesAPI.nuevoWhile($$[$0-4], $$[$0-1]);
break;
case 13: case 33:
this.$=instruccionesAPI.nuevoDoWhile($$[$0-6], $$[$0-2]);
break;
case 14:
  this.$ = instruccionesAPI.nuevaFuncion($$[$0-3], $$[$0-8], $$[$0-6], $$[$0-1], _$[$0-8].first_line, _$[$0-8].first_column); console.log(_$[$0-8]);
break;
case 15: case 34:
this.$ = instruccionesAPI.nuevaLlamada($$[$0-4], $$[$0-2]);
break;
case 16: case 35:
this.$=instruccionesAPI.nuevoReturn($$[$0-1]);
break;
case 17: case 36: case 116:
this.$ = instruccionesAPI.nuevaAsignacion($$[$0-3], $$[$0-1]);
break;
case 18:
this.$=instruccionesAPI.nuevoIncremento($$[$0-2]);
break;
case 19:
this.$=instruccionesAPI.nuevoDecremento($$[$0-2]);
break;
case 20: case 39:
this.$=instruccionesAPI.nuevoAcceso($$[$0-1]);
break;
case 21: case 40:
this.$=instruccionesAPI.nuevoBreak();
break;
case 22: case 41:
this.$=instruccionesAPI.nuevoContinue();
break;
case 24:
 this.$ = [$$[$0]]; 
break;
case 37:
this.$=instruccionesAPI.nuevoIncremento($$[$0-2], $$[$0-1]);
break;
case 38:
this.$=instruccionesAPI.nuevoDecremento($$[$0-2], $$[$0-1]);
break;
case 42:
 this.$ = instruccionesAPI.nuevaOperacionUnaria($$[$0], TIPO_OPERACION.NEGATIVO); 
break;
case 43:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.SUMA); 
break;
case 44:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.RESTA); 
break;
case 45:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MULTIPLICACION); 
break;
case 46:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DIVISION); 
break;
case 47:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.POTENCIA); 
break;
case 48:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MODULO); 
break;
case 49:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR); 
break;
case 50:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR); 
break;
case 51:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR_IGUAL); 
break;
case 52:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR_IGUAL); 
break;
case 53:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.IGUAL_IGUAL); 
break;
case 54:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DISTINTO); 
break;
case 55:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.AND); 
break;
case 56:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.OR); 
break;
case 57:
this.$ =  instruccionesAPI.nuevaOperacionUnaria($$[$0], TIPO_OPERACION.NOT);
break;
case 58:
 this.$ = $$[$0-1]; 
break;
case 59:
 this.$ = instruccionesAPI.nuevoValor(Number($$[$0]), TIPO_VALOR.NUMERO); 
break;
case 60:
 this.$ = instruccionesAPI.nuevoValor(Number($$[$0]), TIPO_VALOR.DECIMAL); 
break;
case 61:
 this.$ = instruccionesAPI.nuevaLlamada($$[$0-3], $$[$0-1]); 
break;
case 62:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.TRUE); 
break;
case 63:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.FALSE); 
break;
case 64:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.CADENA); 
break;
case 65:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.CADENA_CHARS); 
break;
case 66:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.CADENA_EJECUTABLE); 
break;
case 67:
 this.$ = instruccionesAPI.nuevoObjeto($$[$0]); 
break;
case 68:
 this.$ = instruccionesAPI.nuevoArray($$[$0-1]); 
break;
case 69:
this.$=instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.IDENTIFICADOR);
break;
case 70:
this.$=instruccionesAPI.nuevoOperadorTernario($$[$0-4], $$[$0-2], $$[$0]);
break;
case 71:
this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.NULL);
break;
case 72: case 74:
this.$ = instruccionesAPI.nuevoArgumento($$[$0-1], $$[$0]);
break;
case 73:
this.$ = "Epsilon";
break;
case 75:
this.$ =  "Epsilon";
break;
case 76: case 77:
this.$ = instruccionesAPI.nuevaDeclaracion($$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 79:
this.$=instruccionesAPI.nuevoID($$[$0-3],$$[$0-2], $$[$0-1],$$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 80: case 82: case 96: case 99: case 101: case 103: case 107: case 114: case 121: case 123: case 125: case 134:
this.$="Epsilon";
break;
case 81:
this.$=instruccionesAPI.nuevoID($$[$0-4], $$[$0-3], $$[$0-1], $$[$0]);
break;
case 84:
this.$="undefined";
break;
case 86:
 console.error('Error sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column+' la declaración de un const tiene que ser inicializado.');	
break;
case 88:
this.$={tipo:"infer", isArray:false};
break;
case 89: case 90: case 91:
 this.$=instruccionesAPI.nuevoTipo($$[$0-1],$$[$0]); 
break;
case 92:
 this.$ = instruccionesAPI.nuevoTipo($$[$0-1], $$[$0]);
break;
case 93:
this.$=instruccionesAPI.nuevaDimension($$[$0]);
break;
case 94:
this.$=false;
break;
case 95:
this.$=$$[$0-1];
break;
case 97:
this.$=instruccionesAPI.nuevoObjAtributo($$[$0-3], $$[$0-1], $$[$0]);
break;
case 100: case 102:
this.$=instruccionesAPI.nuevoDato($$[$0-1], $$[$0]);
break;
case 104:
this.$=instruccionesAPI.nuevoType($$[$0-5],$$[$0-2], _$[$0-5].first_line, _$[$0-5].first_column);
break;
case 105:
this.$=instruccionesAPI.nuevoTypeAtributo($$[$0-2], $$[$0-1], $$[$0]);
break;
case 108:
 this.$ = $$[$0];
break;
case 109:
 this.$ = "Epsilon"; 
break;
case 110:
this.$ = instruccionesAPI.nuevoElseIf($$[$0-5], $$[$0-2], $$[$0]);
break;
case 111:
this.$ =  instruccionesAPI.nuevoElse($$[$0-1]);
break;
case 112:
this.$=instruccionesAPI.nuevoCase($$[$0-5], $$[$0-2], $$[$0]);
break;
case 113:
this.$=instruccionesAPI.nuevoDefault($$[$0-1]);
break;
case 115:
this.$ = instruccionesAPI.nuevaDeclaracion($$[$0-5], $$[$0-4], $$[$0-3], $$[$0-1], "Epsilon");
break;
case 120: case 122:
this.$=instruccionesAPI.nuevoParametro($$[$0-1], $$[$0-2], $$[$0]);
break;
case 126:
this.$=instruccionesAPI.nuevoArrayIndex($$[$0-2], $$[$0]);
break;
case 127:
this.$="false";
break;
case 128:
this.$=instruccionesAPI.nuevaReferencia($$[$0-1], $$[$0]);
break;
case 129:
this.$=instruccionesAPI.nuevoAccPosicion($$[$0-2], $$[$0]);
break;
case 130:
this.$=instruccionesAPI.nuevoAccAtributo($$[$0-1], $$[$0]);
break;
case 131:
this.$=instruccionesAPI.nuevoPop();
break;
case 132:
this.$=instruccionesAPI.nuevoLength();
break;
case 133:
this.$=instruccionesAPI.nuevoPush($$[$0-1]);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:$V1,17:$V2,21:$V3,23:$V4,25:$V5,27:$V6,30:$V7,31:$V8,32:$V9,37:$Va,39:15,43:$Vb,44:$Vc,79:$Vd,89:$Ve},{1:[3]},{2:$V0,5:[1,22],6:23,7:4,8:5,9:$V1,17:$V2,21:$V3,23:$V4,25:$V5,27:$V6,30:$V7,31:$V8,32:$V9,37:$Va,39:15,43:$Vb,44:$Vc,79:$Vd,89:$Ve},o($Vf,[2,3]),o($Vf,[2,4]),o($Vf,[2,5]),{10:[1,24]},{18:[1,25]},{10:[1,26]},{10:[1,27]},{10:[1,28]},{13:[1,29]},{25:[1,30]},o($Vg,$Vh,{98:32,10:[1,31],18:$Vi,69:$Vj}),{10:$Vk,11:36,13:$Vl,20:$Vm,25:$Vn,38:35,39:50,46:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:48,69:$Vx,73:$Vy},{20:[1,56],40:[1,53],41:[1,54],42:[1,55]},{20:[1,57]},{20:[1,58]},{25:[1,59]},{25:[1,60]},{20:[1,61]},{25:[1,62]},{1:[2,1]},o($Vf,[2,2]),{10:$Vk,11:63,13:$Vl,25:$Vn,39:50,46:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:48,69:$Vx,73:$Vy},{19:[1,64]},{10:$Vk,11:65,13:$Vl,25:$Vn,39:50,46:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:48,69:$Vx,73:$Vy},{24:66,25:$Vz,27:[1,67]},{10:$Vk,11:69,13:$Vl,25:$Vn,39:50,46:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:48,69:$Vx,73:$Vy},{2:$V0,7:72,9:$VA,14:70,17:$VB,21:$VC,23:$VD,25:$VE,27:$V6,30:$VF,31:$VG,37:$VH,39:81,43:$VI,44:$VJ,45:71,79:$Vd},{10:[1,84]},{10:$Vk,11:86,12:$VK,13:$Vl,25:$Vn,36:85,39:50,46:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:48,69:$Vx,73:$Vy},o($VL,[2,128]),{10:$Vk,11:87,13:$Vl,25:$Vn,39:50,46:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:48,69:$Vx,73:$Vy},{25:[1,88],99:[1,89],100:[1,90],101:[1,91]},{20:[1,92]},{20:[2,124],46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,72:$V_},{10:$Vk,11:108,13:$Vl,25:$Vn,39:50,46:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:48,69:$Vx,73:$Vy},{10:$Vk,11:109,13:$Vl,25:$Vn,39:50,46:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:48,69:$Vx,73:$Vy},{10:$Vk,11:110,13:$Vl,25:$Vn,39:50,46:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:48,69:$Vx,73:$Vy},o($V$,[2,59]),o($V$,[2,60]),o($V$,$Vh,{98:32,10:[1,111],18:$Vi,69:$Vj}),o($V$,[2,62]),o($V$,[2,63]),o($V$,[2,64]),o($V$,[2,65]),o($V$,[2,66]),o($V$,[2,67]),{10:$Vk,11:113,13:$Vl,25:$Vn,39:50,46:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:48,69:$Vx,70:112,71:[2,101],73:$Vy},o($V$,[2,69]),o($V$,[2,71]),{15:[1,115],25:$V01,86:114},{10:$Vk,11:117,13:$Vl,25:$Vn,39:50,46:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:48,69:$Vx,73:$Vy},{20:[1,118]},{20:[1,119]},o($Vf,[2,20]),o($Vf,[2,21]),o($Vf,[2,22]),o($V11,$V21,{76:120,34:$V31}),o($V11,$V21,{76:122,34:$V31}),o($Vf,[2,78]),{40:[1,123]},{12:[1,124],46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,72:$V_},{10:[1,125]},{12:[1,126],46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,72:$V_},{10:$Vk,11:127,13:$Vl,25:$Vn,39:50,46:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:48,69:$Vx,73:$Vy},{25:[1,128]},{40:[1,129]},{12:[1,130],46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,72:$V_},{2:$V0,7:72,9:$VA,15:[1,131],17:$VB,21:$VC,23:$VD,25:$VE,27:$V6,30:$VF,31:$VG,37:$VH,39:81,43:$VI,44:$VJ,45:132,79:$Vd},o($V41,[2,24]),o($V41,[2,25]),{10:[1,133]},{18:[1,134]},{10:[1,135]},{10:[1,136]},{10:[1,137]},{13:[1,138]},o($Vg,$Vh,{98:32,10:[1,139],18:$Vi,69:$Vj}),{10:$Vk,11:36,13:$Vl,20:$Vm,25:$Vn,38:140,39:50,46:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:48,69:$Vx,73:$Vy},{20:[1,144],40:[1,141],41:[1,142],42:[1,143]},{20:[1,145]},{20:[1,146]},{12:[2,121],25:[1,148],33:147},{12:[1,149]},{12:$V51,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,72:$V_,74:150,75:$V61},{46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,71:[1,152],72:$V_},o($VL,$Vh,{98:153,18:$Vi,69:$Vj}),{10:[1,154]},o($VL,[2,132]),{10:[1,155]},o($Vf,[2,16]),{10:$Vk,11:156,13:$Vl,25:$Vn,39:50,46:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:48,69:$Vx,73:$Vy},{10:$Vk,11:157,13:$Vl,25:$Vn,39:50,46:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:48,69:$Vx,73:$Vy},{10:$Vk,11:158,13:$Vl,25:$Vn,39:50,46:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:48,69:$Vx,73:$Vy},{10:$Vk,11:159,13:$Vl,25:$Vn,39:50,46:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:48,69:$Vx,73:$Vy},{10:$Vk,11:160,13:$Vl,25:$Vn,39:50,46:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:48,69:$Vx,73:$Vy},{10:$Vk,11:161,13:$Vl,25:$Vn,39:50,46:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:48,69:$Vx,73:$Vy},{10:$Vk,11:162,13:$Vl,25:$Vn,39:50,46:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:48,69:$Vx,73:$Vy},{10:$Vk,11:163,13:$Vl,25:$Vn,39:50,46:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:48,69:$Vx,73:$Vy},{10:$Vk,11:164,13:$Vl,25:$Vn,39:50,46:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:48,69:$Vx,73:$Vy},{10:$Vk,11:165,13:$Vl,25:$Vn,39:50,46:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:48,69:$Vx,73:$Vy},{10:$Vk,11:166,13:$Vl,25:$Vn,39:50,46:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:48,69:$Vx,73:$Vy},{10:$Vk,11:167,13:$Vl,25:$Vn,39:50,46:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:48,69:$Vx,73:$Vy},{10:$Vk,11:168,13:$Vl,25:$Vn,39:50,46:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:48,69:$Vx,73:$Vy},{10:$Vk,11:169,13:$Vl,25:$Vn,39:50,46:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:48,69:$Vx,73:$Vy},{10:$Vk,11:170,13:$Vl,25:$Vn,39:50,46:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:48,69:$Vx,73:$Vy},o($V$,[2,42]),o($V$,[2,57]),{12:[1,171],46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,72:$V_},{10:$Vk,11:86,12:$VK,13:$Vl,25:$Vn,36:172,39:50,46:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:48,69:$Vx,73:$Vy},{71:[1,173]},{46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,71:$V71,72:$V_,75:$V81,88:174},{15:[1,176]},o($V$,[2,96]),{34:[1,177]},{20:[1,178],46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,72:$V_},o($Vf,[2,18]),o($Vf,[2,19]),o($V91,$Va1,{77:179,40:$Vb1}),{25:$Vc1,35:181,82:$Vd1,84:$Ve1,85:$Vf1},o($V91,$Va1,{77:186,40:$Vb1}),{13:[1,187]},{13:[1,188]},{10:$Vk,11:189,13:$Vl,25:$Vn,39:50,46:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:48,69:$Vx,73:$Vy},{13:[1,190]},{20:[1,191],46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,72:$V_},{28:[1,192],29:[1,193],34:$V31,40:$V21,76:194},{10:$Vk,11:195,13:$Vl,25:$Vn,39:50,46:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:48,69:$Vx,73:$Vy},{13:[1,196]},{30:[1,197]},o($V41,[2,23]),{10:$Vk,11:198,13:$Vl,25:$Vn,39:50,46:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:48,69:$Vx,73:$Vy},{19:[1,199]},{10:$Vk,11:200,13:$Vl,25:$Vn,39:50,46:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:48,69:$Vx,73:$Vy},{24:201,25:$Vz,27:[1,202]},{10:$Vk,11:203,13:$Vl,25:$Vn,39:50,46:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:48,69:$Vx,73:$Vy},{2:$V0,7:72,9:$VA,14:204,17:$VB,21:$VC,23:$VD,25:$VE,27:$V6,30:$VF,31:$VG,37:$VH,39:81,43:$VI,44:$VJ,45:71,79:$Vd},{10:$Vk,11:86,12:$VK,13:$Vl,25:$Vn,36:205,39:50,46:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:48,69:$Vx,73:$Vy},{20:[1,206]},{10:$Vk,11:207,13:$Vl,25:$Vn,39:50,46:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:48,69:$Vx,73:$Vy},{20:[1,208]},{20:[1,209]},o($V41,[2,39]),o($V41,[2,40]),o($V41,[2,41]),{12:[1,210]},o($Vg1,$V21,{76:211,34:$V31}),{20:[1,212]},{12:[2,72]},{10:$Vk,11:213,13:$Vl,25:$Vn,39:50,46:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:48,69:$Vx,73:$Vy},o($VL,$Vh,{98:214,18:$Vi,69:$Vj}),o($VL,[2,130]),{12:[1,215]},{10:$Vk,11:216,13:$Vl,25:$Vn,39:50,46:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:48,69:$Vx,73:$Vy},o($Vh1,[2,43],{48:$VO,49:$VP,50:$VQ,51:$VR}),o($Vh1,[2,44],{48:$VO,49:$VP,50:$VQ,51:$VR}),o($Vi1,[2,45],{50:$VQ,51:$VR}),o($Vi1,[2,46],{50:$VQ,51:$VR}),o($V$,[2,47]),o($V$,[2,48]),o($Vj1,[2,49],{46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR}),o($Vj1,[2,50],{46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR}),o($Vj1,[2,51],{46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR}),o($Vj1,[2,52],{46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR}),o($Vj1,[2,53],{46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR}),o($Vj1,[2,54],{46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR}),o($Vk1,[2,55],{46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX}),o($Vk1,[2,56],{46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX}),{34:[1,217],46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,72:$V_},o($V$,[2,58]),{12:[1,218]},o($V$,[2,68]),{71:[2,100]},{10:$Vk,11:219,13:$Vl,25:$Vn,39:50,46:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:48,69:$Vx,73:$Vy},o($V$,[2,95]),{10:$Vk,11:220,13:$Vl,25:$Vn,39:50,46:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:48,69:$Vx,73:$Vy},o($Vf,[2,17]),{20:$Vl1,75:$Vm1,78:221},{10:$Vk,11:223,13:$Vl,25:$Vn,39:50,46:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:48,69:$Vx,73:$Vy},o([12,15,20,40,75],[2,87]),o($Vn1,$Vo1,{83:224,69:$Vp1}),o($Vn1,$Vo1,{83:226,69:$Vp1}),o($Vn1,$Vo1,{83:227,69:$Vp1}),o($Vn1,$Vo1,{83:228,69:$Vp1}),{20:$Vl1,75:$Vm1,78:229},{25:$Vq1,90:230},{2:$V0,7:72,9:$VA,14:232,17:$VB,21:$VC,23:$VD,25:$VE,27:$V6,30:$VF,31:$VG,37:$VH,39:81,43:$VI,44:$VJ,45:71,79:$Vd},{12:[1,233],46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,72:$V_},{15:$Vr1,22:234,94:$Vs1,95:$Vt1},{25:[1,237]},{25:[1,238]},{25:[1,239]},{40:[1,240]},{20:[1,241],46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,72:$V_},{2:$V0,7:72,9:$VA,14:242,17:$VB,21:$VC,23:$VD,25:$VE,27:$V6,30:$VF,31:$VG,37:$VH,39:81,43:$VI,44:$VJ,45:71,79:$Vd},{10:[1,243]},{12:[1,244],46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,72:$V_},{10:[1,245]},{12:[1,246],46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,72:$V_},{10:$Vk,11:247,13:$Vl,25:$Vn,39:50,46:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:48,69:$Vx,73:$Vy},{25:[1,248]},{12:[1,249],46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,72:$V_},{2:$V0,7:72,9:$VA,15:[1,250],17:$VB,21:$VC,23:$VD,25:$VE,27:$V6,30:$VF,31:$VG,37:$VH,39:81,43:$VI,44:$VJ,45:132,79:$Vd},{12:[1,251]},o($V41,[2,35]),{20:[1,252],46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,72:$V_},o($V41,[2,37]),o($V41,[2,38]),{34:[1,253]},{12:$Vu1,75:$Vv1,96:254},o($Vf,[2,15]),{12:$V51,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,72:$V_,74:256,75:$V61},o($VL,[2,129]),o($VL,[2,131]),{12:[1,257],46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,72:$V_},{10:$Vk,11:258,13:$Vl,25:$Vn,39:50,46:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:48,69:$Vx,73:$Vy},o($V$,[2,61]),{46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,71:$V71,72:$V_,75:$V81,88:259},{15:[2,99],46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,72:$V_,75:[1,261],87:260},{20:[1,262]},{25:[1,263]},o($V91,[2,83],{46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,72:$V_}),o($Vn1,[2,89]),{71:[1,264]},o($Vn1,[2,90]),o($Vn1,[2,91]),o($Vn1,[2,92]),{20:[1,265]},{15:[1,266]},o([15,75],$V21,{76:267,34:$V31}),{2:$V0,7:72,9:$VA,15:[1,268],17:$VB,21:$VC,23:$VD,25:$VE,27:$V6,30:$VF,31:$VG,37:$VH,39:81,43:$VI,44:$VJ,45:132,79:$Vd},{20:[1,269]},{15:[1,270]},{10:$Vk,11:271,13:$Vl,25:$Vn,39:50,46:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:48,69:$Vx,73:$Vy},{34:[1,272]},{26:273,40:$Vw1,41:$Vx1,42:$Vy1},{12:[1,277]},{12:[1,278]},{10:$Vk,11:279,13:$Vl,25:$Vn,39:50,46:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:48,69:$Vx,73:$Vy},o($Vz1,[2,116]),{2:$V0,7:72,9:$VA,15:[1,280],17:$VB,21:$VC,23:$VD,25:$VE,27:$V6,30:$VF,31:$VG,37:$VH,39:81,43:$VI,44:$VJ,45:132,79:$Vd},{10:$Vk,11:281,13:$Vl,25:$Vn,39:50,46:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:48,69:$Vx,73:$Vy},{13:[1,282]},{10:$Vk,11:283,13:$Vl,25:$Vn,39:50,46:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:48,69:$Vx,73:$Vy},{13:[1,284]},{20:[1,285],46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,72:$V_},{28:[1,286],29:[1,287],34:$V31,40:$V21,76:194},{13:[1,288]},{30:[1,289]},{20:[1,290]},o($V41,[2,36]),{25:$Vc1,35:291,82:$Vd1,84:$Ve1,85:$Vf1},{12:[2,120]},{25:[1,292]},{12:[2,74]},o($VL,[2,133]),o([12,15,20,34,71,72,75],[2,70],{46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ}),{71:[2,102]},{15:[2,97]},{25:$V01,86:293},o($Vf,[2,76]),o($V11,$V21,{76:294,34:$V31}),o($Vn1,$Vo1,{83:295,69:$Vp1}),o($Vf,[2,77]),{20:[1,296]},{15:[2,107],75:[1,298],91:297},o($Vf,$VA1,{16:299,92:$VB1}),o($Vf,[2,7]),o($Vf,[2,8]),{34:[1,301],46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,72:$V_},{13:[1,302]},{12:[1,303]},{12:[2,117]},{12:[2,118]},{10:$Vk,11:304,13:$Vl,25:$Vn,39:50,46:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:48,69:$Vx,73:$Vy},{13:[1,305]},{13:[1,306]},{20:[1,307],46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,72:$V_},o($Vf,[2,12]),{12:[1,308],46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,72:$V_},{2:$V0,7:72,9:$VA,14:309,17:$VB,21:$VC,23:$VD,25:$VE,27:$V6,30:$VF,31:$VG,37:$VH,39:81,43:$VI,44:$VJ,45:71,79:$Vd},{12:[1,310],46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,72:$V_},{15:$Vr1,22:311,94:$Vs1,95:$Vt1},{25:[1,312]},{25:$VC1,39:313},{25:$VC1,39:315},{2:$V0,7:72,9:$VA,14:316,17:$VB,21:$VC,23:$VD,25:$VE,27:$V6,30:$VF,31:$VG,37:$VH,39:81,43:$VI,44:$VJ,45:71,79:$Vd},{10:[1,317]},o($V41,[2,34]),{13:[1,318]},o($Vg1,$V21,{76:319,34:$V31}),{15:[2,98]},o($V91,$Va1,{77:320,40:$Vb1}),o($Vn1,[2,93]),o($Vf,[2,104]),{15:[2,105]},{25:$Vq1,90:321},o($Vf,[2,6]),{9:[1,323],13:[1,324],93:322},{13:[1,325]},{2:$V0,7:72,9:$VA,14:326,17:$VB,21:$VC,23:$VD,25:$VE,27:$V6,30:$VF,31:$VG,37:$VH,39:81,43:$VI,44:$VJ,45:71,79:$Vd},{13:[1,327]},{12:[2,119],46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,72:$V_},{2:$V0,7:72,9:$VA,14:328,17:$VB,21:$VC,23:$VD,25:$VE,27:$V6,30:$VF,31:$VG,37:$VH,39:81,43:$VI,44:$VJ,45:71,79:$Vd},{2:$V0,7:72,9:$VA,14:329,17:$VB,21:$VC,23:$VD,25:$VE,27:$V6,30:$VF,31:$VG,37:$VH,39:81,43:$VI,44:$VJ,45:71,79:$Vd},o($Vz1,[2,115]),{20:[1,330]},{2:$V0,7:72,9:$VA,15:[1,331],17:$VB,21:$VC,23:$VD,25:$VE,27:$V6,30:$VF,31:$VG,37:$VH,39:81,43:$VI,44:$VJ,45:132,79:$Vd},{20:[1,332]},{15:[1,333]},{26:334,40:$Vw1,41:$Vx1,42:$Vy1},{12:[1,335]},{12:$Vh,18:$Vi,69:$Vj,98:32},{12:[1,336]},{2:$V0,7:72,9:$VA,15:[1,337],17:$VB,21:$VC,23:$VD,25:$VE,27:$V6,30:$VF,31:$VG,37:$VH,39:81,43:$VI,44:$VJ,45:132,79:$Vd},{10:$Vk,11:338,13:$Vl,25:$Vn,39:50,46:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:48,69:$Vx,73:$Vy},{2:$V0,4:339,6:3,7:4,8:5,9:$V1,17:$V2,21:$V3,23:$V4,25:$V5,27:$V6,30:$V7,31:$V8,32:$V9,37:$Va,39:15,43:$Vb,44:$Vc,79:$Vd,89:$Ve},{12:$Vu1,75:$Vv1,96:340},{20:$Vl1,75:$Vm1,78:341},{15:[2,106]},o($Vf,[2,108]),{10:[1,342]},{2:$V0,7:72,9:$VA,14:343,17:$VB,21:$VC,23:$VD,25:$VE,27:$V6,30:$VF,31:$VG,37:$VH,39:81,43:$VI,44:$VJ,45:71,79:$Vd},{2:$V0,7:72,9:$VA,14:344,17:$VB,21:$VC,23:$VD,25:$VE,27:$V6,30:$VF,31:$VG,37:$VH,39:81,43:$VI,44:$VJ,45:71,79:$Vd},{2:$V0,7:72,9:$VA,15:[1,345],17:$VB,21:$VC,23:$VD,25:$VE,27:$V6,30:$VF,31:$VG,37:$VH,39:81,43:$VI,44:$VJ,45:132,79:$Vd},{2:$V0,7:72,9:$VA,14:346,17:$VB,21:$VC,23:$VD,25:$VE,27:$V6,30:$VF,31:$VG,37:$VH,39:81,43:$VI,44:$VJ,45:71,79:$Vd},{2:$V0,7:72,9:$VA,15:[1,347],17:$VB,21:$VC,23:$VD,25:$VE,27:$V6,30:$VF,31:$VG,37:$VH,39:81,43:$VI,44:$VJ,45:132,79:$Vd},{2:$V0,7:72,9:$VA,15:[1,348],17:$VB,21:$VC,23:$VD,25:$VE,27:$V6,30:$VF,31:$VG,37:$VH,39:81,43:$VI,44:$VJ,45:132,79:$Vd},o($Vf,[2,13]),o($V41,$VA1,{16:349,92:$VB1}),o($V41,[2,27]),o($V41,[2,28]),{12:[1,350]},{13:[1,351]},{13:[1,352]},o($V41,[2,32]),{12:[1,353],46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,72:$V_},{2:$V0,6:23,7:4,8:5,9:$V1,15:[1,354],17:$V2,21:$V3,23:$V4,25:$V5,27:$V6,30:$V7,31:$V8,32:$V9,37:$Va,39:15,43:$Vb,44:$Vc,79:$Vd,89:$Ve},{12:[2,122]},{20:[2,79]},{10:$Vk,11:355,13:$Vl,25:$Vn,39:50,46:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:48,69:$Vx,73:$Vy},{2:$V0,7:72,9:$VA,15:[1,356],17:$VB,21:$VC,23:$VD,25:$VE,27:$V6,30:$VF,31:$VG,37:$VH,39:81,43:$VI,44:$VJ,45:132,79:$Vd},{2:$V0,7:72,9:$VA,15:[1,357],17:$VB,21:$VC,23:$VD,25:$VE,27:$V6,30:$VF,31:$VG,37:$VH,39:81,43:$VI,44:$VJ,45:132,79:$Vd},{15:[2,113]},{2:$V0,7:72,9:$VA,15:[1,358],17:$VB,21:$VC,23:$VD,25:$VE,27:$V6,30:$VF,31:$VG,37:$VH,39:81,43:$VI,44:$VJ,45:132,79:$Vd},o($Vf,[2,10]),o($Vf,[2,11]),o($V41,[2,26]),{13:[1,359]},{2:$V0,7:72,9:$VA,14:360,17:$VB,21:$VC,23:$VD,25:$VE,27:$V6,30:$VF,31:$VG,37:$VH,39:81,43:$VI,44:$VJ,45:71,79:$Vd},{2:$V0,7:72,9:$VA,14:361,17:$VB,21:$VC,23:$VD,25:$VE,27:$V6,30:$VF,31:$VG,37:$VH,39:81,43:$VI,44:$VJ,45:71,79:$Vd},{20:[1,362]},o($Vf,[2,14]),{12:[1,363],46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,59:$VZ,72:$V_},o($Vf,[2,111]),{15:$Vr1,22:364,94:$Vs1,95:$Vt1},o($Vf,[2,9]),{2:$V0,7:72,9:$VA,14:365,17:$VB,21:$VC,23:$VD,25:$VE,27:$V6,30:$VF,31:$VG,37:$VH,39:81,43:$VI,44:$VJ,45:71,79:$Vd},{2:$V0,7:72,9:$VA,15:[1,366],17:$VB,21:$VC,23:$VD,25:$VE,27:$V6,30:$VF,31:$VG,37:$VH,39:81,43:$VI,44:$VJ,45:132,79:$Vd},{2:$V0,7:72,9:$VA,15:[1,367],17:$VB,21:$VC,23:$VD,25:$VE,27:$V6,30:$VF,31:$VG,37:$VH,39:81,43:$VI,44:$VJ,45:132,79:$Vd},o($V41,[2,33]),{13:[1,368]},{15:[2,112]},{2:$V0,7:72,9:$VA,15:[1,369],17:$VB,21:$VC,23:$VD,25:$VE,27:$V6,30:$VF,31:$VG,37:$VH,39:81,43:$VI,44:$VJ,45:132,79:$Vd},o($V41,[2,30]),o($V41,[2,31]),{2:$V0,7:72,9:$VA,14:370,17:$VB,21:$VC,23:$VD,25:$VE,27:$V6,30:$VF,31:$VG,37:$VH,39:81,43:$VI,44:$VJ,45:71,79:$Vd},o($V41,[2,29]),{2:$V0,7:72,9:$VA,15:[1,371],17:$VB,21:$VC,23:$VD,25:$VE,27:$V6,30:$VF,31:$VG,37:$VH,39:81,43:$VI,44:$VJ,45:132,79:$Vd},o($Vf,$VA1,{16:372,92:$VB1}),o($Vf,[2,110])],
defaultActions: {22:[2,1],150:[2,72],174:[2,100],254:[2,120],256:[2,74],259:[2,102],260:[2,97],274:[2,117],275:[2,118],293:[2,98],297:[2,105],321:[2,106],340:[2,122],341:[2,79],345:[2,113],364:[2,112]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	const TIPO_OPERACION	= require('./instrucciones').TIPO_OPERACION;
	const TIPO_VALOR 		= require('./instrucciones').TIPO_VALOR;
	const instruccionesAPI	= require('./instrucciones').instruccionesAPI;
	const TIPO_DATO = require('./instrucciones').TIPO_DATO;
	const TS = require('./instrucciones').TS;
	var salida=[];
	var ArrayDeErrores = [];
	var currentType="";
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 82;
break;
case 1:return 85;
break;
case 2:return 84;
break;
case 3:return 27;
break;
case 4:return 79;
break;
case 5:return 17;
break;
case 6:return 19;
break;
case 7:return 64;
break;
case 8:return 63;
break;
case 9:return 9;
break;
case 10:return 92;
break;
case 11:return 21;
break;
case 12:return 94;
break;
case 13:return 95;
break;
case 14:return 43;
break;
case 15:return 44;
break;
case 16:return 30;
break;
case 17:return 31;
break;
case 18:return 23;
break;
case 19:return 'R_VOID';
break;
case 20:return 37;
break;
case 21:return 101;
break;
case 22:return 99;
break;
case 23:return 100;
break;
case 24:return 89;
break;
case 25:return 28;
break;
case 26:return 29;
break;
case 27:return 32 ;
break;
case 28:return 73;
break;
case 29: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 65;
break;
case 30: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 66;
break;
case 31: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 67;
break;
case 32:return 62;
break;
case 33:return 61;
break;
case 34:return 25;
break;
case 35:
break;
case 36:// comentario simple línea
break;
case 37:// comentario multiple líneas
break;
case 38:return 41;
break;
case 39:return 42;
break;
case 40:return "MAS";
break;
case 41:return 46;
break;
case 42:return 50;
break;
case 43:return 48;
break;
case 44:return 49;
break;
case 45:return 51;
break;
case 46:return 56;
break;
case 47:return 57;
break;
case 48:return 40;
break;
case 49:return 54;
break;
case 50:return 52;
break;
case 51:return 55;
break;
case 52:return 53;
break;
case 53:return 58;
break;
case 54:return 59;
break;
case 55:return 60;
break;
case 56:return 13;
break;
case 57:return 15;
break;
case 58:return 10;
break;
case 59:return 12;
break;
case 60:return 69;
break;
case 61:return 71;
break;
case 62:return 20;
break;
case 63:return 34;
break;
case 64:return 18;
break;
case 65:return 75;
break;
case 66:return 72;
break;
case 67:return 5;
break;
case 68: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); salida.push('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);  ArrayDeErrores.push({tipo:"léxico", linea:this._$.first_line, columna:this._$.first_column, descripcion: yy_.yytext});
break;
}
},
rules: [/^(?:number\b)/,/^(?:boolean\b)/,/^(?:string\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:console\b)/,/^(?:log\b)/,/^(?:false\b)/,/^(?:true\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:void\b)/,/^(?:return\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:length\b)/,/^(?:type\b)/,/^(?:of\b)/,/^(?:in\b)/,/^(?:function\b)/,/^(?:null\b)/,/^(?:"(\\"|\\n|\\t|\\r|\\\\|[^\"])*")/,/^(?:'(\\'|\\n|\\t|\\r|\\\\|[^\'])*')/,/^(?:`(\\"|\\n|\\t|\\r|\\\\|[^\"])*`)/,/^(?:[0-9]+\.([0-9]+)?\b)/,/^(?:[0-9]+\b)/,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/,/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:==)/,/^(?:!=)/,/^(?:=)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:;)/,/^(?::)/,/^(?:\.)/,/^(?:,)/,/^(?:\?)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}