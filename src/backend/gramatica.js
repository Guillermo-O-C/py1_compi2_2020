/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,18],$V1=[1,6],$V2=[1,7],$V3=[1,8],$V4=[1,9],$V5=[1,13],$V6=[1,16],$V7=[1,10],$V8=[1,11],$V9=[1,12],$Va=[1,14],$Vb=[1,17],$Vc=[1,19],$Vd=[2,5,9,15,17,21,23,25,27,30,31,32,37,76,86],$Ve=[20,40,41,42],$Vf=[2,130],$Vg=[1,32],$Vh=[1,31],$Vi=[1,37],$Vj=[1,49],$Vk=[2,121],$Vl=[1,40],$Vm=[1,35],$Vn=[1,36],$Vo=[1,38],$Vp=[1,39],$Vq=[1,41],$Vr=[1,42],$Vs=[1,43],$Vt=[1,44],$Vu=[1,45],$Vv=[1,47],$Vw=[1,63],$Vx=[1,69],$Vy=[1,70],$Vz=[1,71],$VA=[1,72],$VB=[1,75],$VC=[1,73],$VD=[1,74],$VE=[1,76],$VF=[2,69],$VG=[12,15,20,34,40,41,42,44,45,46,47,48,49,50,51,52,53,54,55,56,57,69,70,72],$VH=[1,88],$VI=[1,87],$VJ=[1,89],$VK=[1,90],$VL=[1,91],$VM=[1,92],$VN=[1,93],$VO=[1,94],$VP=[1,95],$VQ=[1,96],$VR=[1,97],$VS=[1,98],$VT=[1,99],$VU=[1,100],$VV=[1,101],$VW=[12,15,20,34,44,45,46,47,48,49,50,51,52,53,54,55,56,57,69,70,72],$VX=[1,110],$VY=[20,40,72],$VZ=[2,84],$V_=[1,115],$V$=[2,9,15,17,21,23,25,27,30,31,37,76,86],$V01=[2,71],$V11=[1,143],$V21=[2,99],$V31=[1,167],$V41=[20,72],$V51=[2,80],$V61=[1,172],$V71=[1,177],$V81=[1,174],$V91=[1,175],$Va1=[1,176],$Vb1=[12,72],$Vc1=[12,15,20,34,44,45,50,51,52,53,54,55,56,57,69,70,72],$Vd1=[12,15,20,34,44,45,46,47,50,51,52,53,54,55,56,57,69,70,72],$Ve1=[12,15,20,34,50,51,52,53,54,55,56,57,69,70,72],$Vf1=[12,15,20,34,56,57,69,70,72],$Vg1=[2,76],$Vh1=[1,214],$Vi1=[12,13,15,20,40,72],$Vj1=[2,90],$Vk1=[1,217],$Vl1=[1,223],$Vm1=[2,110],$Vn1=[1,227],$Vo1=[1,228],$Vp1=[2,119],$Vq1=[1,247],$Vr1=[1,269],$Vs1=[1,267],$Vt1=[1,268],$Vu1=[10,13,25,44,58,59,60,61,62,63,64,65,67],$Vv1=[2,105],$Vw1=[1,295];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaracion":7,"type":8,"R_IF":9,"ABRIR_PARENTESIS":10,"expresion":11,"CERRAR_PARENTESIS":12,"ABRIR_LLAVE":13,"sentencias":14,"CERRAR_LLAVE":15,"elseIf":16,"R_CONSOLE":17,"PUNTO":18,"R_LOG":19,"PUNTO_COMA":20,"R_SWITCH":21,"cases":22,"R_FOR":23,"for_init":24,"IDENTIFICADOR":25,"for_change":26,"R_LET":27,"R_OF":28,"R_IN":29,"R_WHILE":30,"R_DO":31,"R_FUNCTION":32,"parametros":33,"DOS_PUNTOS":34,"tipo":35,"argumentos":36,"R_RETURN":37,"retorno":38,"id":39,"IGUAL":40,"INCREMENTO":41,"DECREMENTO":42,"sentencia":43,"MENOS":44,"MAS":45,"MULTIPLICACION":46,"DIVISION":47,"POTENCIA":48,"MODULO":49,"MAYOR":50,"MENOR":51,"MAYOR_IGUAL":52,"MENOR_IGUAL":53,"IGUALDAD":54,"DISTINTO":55,"AND":56,"OR":57,"NOT":58,"ENTERO":59,"DECIMAL":60,"R_TRUE":61,"R_FALSE":62,"CADENA":63,"CADENA_CHARS":64,"CADENA_EJECUTABLE":65,"objeto":66,"ABRIR_CORCHETE":67,"arrays":68,"CERRAR_CORCHETE":69,"OPERADOR_TERNARIO":70,"argumentos_P":71,"COMA":72,"definicion_tipo":73,"definicion":74,"listaID":75,"R_CONST":76,"listaIDConst":77,"definicion_const":78,"R_NUMBER":79,"declarar_array":80,"R_STRING":81,"R_BOOLEAN":82,"obj_atributos":83,"obj_atributos_pr":84,"arrays_pr":85,"R_TYPE":86,"type_atributos":87,"type_atributos_pr":88,"R_ELSE":89,"elseIf_P":90,"R_CASE":91,"R_DEFAULT":92,"parametros_pr":93,"array_position":94,"id_pr":95,"R_POP":96,"R_LENGTH":97,"R_PUSH":98,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"R_IF",10:"ABRIR_PARENTESIS",12:"CERRAR_PARENTESIS",13:"ABRIR_LLAVE",15:"CERRAR_LLAVE",17:"R_CONSOLE",18:"PUNTO",19:"R_LOG",20:"PUNTO_COMA",21:"R_SWITCH",23:"R_FOR",25:"IDENTIFICADOR",27:"R_LET",28:"R_OF",29:"R_IN",30:"R_WHILE",31:"R_DO",32:"R_FUNCTION",34:"DOS_PUNTOS",37:"R_RETURN",40:"IGUAL",41:"INCREMENTO",42:"DECREMENTO",44:"MENOS",45:"MAS",46:"MULTIPLICACION",47:"DIVISION",48:"POTENCIA",49:"MODULO",50:"MAYOR",51:"MENOR",52:"MAYOR_IGUAL",53:"MENOR_IGUAL",54:"IGUALDAD",55:"DISTINTO",56:"AND",57:"OR",58:"NOT",59:"ENTERO",60:"DECIMAL",61:"R_TRUE",62:"R_FALSE",63:"CADENA",64:"CADENA_CHARS",65:"CADENA_EJECUTABLE",67:"ABRIR_CORCHETE",69:"CERRAR_CORCHETE",70:"OPERADOR_TERNARIO",72:"COMA",76:"R_CONST",79:"R_NUMBER",81:"R_STRING",82:"R_BOOLEAN",86:"R_TYPE",89:"R_ELSE",91:"R_CASE",92:"R_DEFAULT",96:"R_POP",97:"R_LENGTH",98:"R_PUSH"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,8],[6,7],[6,7],[6,11],[6,10],[6,10],[6,7],[6,9],[6,10],[6,5],[6,3],[6,4],[6,3],[6,3],[6,2],[14,2],[14,1],[43,1],[43,1],[43,8],[43,7],[43,7],[43,11],[43,10],[43,10],[43,7],[43,9],[43,5],[43,3],[43,4],[43,3],[43,3],[43,2],[11,2],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,2],[11,3],[11,1],[11,1],[11,4],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,3],[11,1],[11,5],[36,2],[36,0],[71,3],[71,0],[7,6],[7,7],[7,2],[75,5],[75,0],[77,6],[77,0],[74,2],[74,0],[78,2],[78,1],[73,2],[73,0],[35,2],[35,2],[35,2],[35,2],[80,3],[80,0],[66,3],[66,2],[83,4],[84,2],[84,0],[68,2],[68,0],[85,3],[85,0],[8,7],[87,3],[88,2],[88,0],[16,2],[16,0],[90,8],[90,3],[22,7],[22,5],[22,0],[24,6],[24,4],[26,1],[26,1],[26,2],[33,3],[33,0],[93,4],[93,0],[38,1],[38,0],[94,4],[94,0],[39,2],[95,4],[95,3],[95,4],[95,2],[95,5],[95,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		// cuado se haya reconocido la entrada completa retornamos el AST
		var temporal = salida;
		salida=[];
		var tempAr = ArrayDeErrores;
		ArrayDeErrores = [];
		return {AST: $$[$0-1], Errores: temporal};
	
break;
case 2: case 21:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3:
this.$=[$$[$0]];
break;
case 4: case 5: case 23: case 24: case 79: case 81: case 83: case 94: case 102: case 113: case 114: case 115: case 120:
this.$=$$[$0];
break;
case 6: case 25:
 this.$ = instruccionesAPI.nuevoIf($$[$0-5], $$[$0-2], $$[$0]);
break;
case 7: case 26:
this.$ = instruccionesAPI.nuevoImprimir($$[$0-2]);
break;
case 8: case 27:
this.$=instruccionesAPI.nuevoSwitch($$[$0-4], $$[$0-1]);
break;
case 9: case 28:
 this.$ = instruccionesAPI.nuevoFor($$[$0-8], $$[$0-7], $$[$0-4], $$[$0-1]);
break;
case 10: case 29:
this.$=instruccionesAPI.nuevoForOF($$[$0-6], $$[$0-4], $$[$0-1]);
break;
case 11: case 30:
this.$=instruccionesAPI.nuevoForIn($$[$0-6], $$[$0-4], $$[$0-1]);
break;
case 12: case 31:
this.$=instruccionesAPI.nuevoWhile($$[$0-4], $$[$0-1]);
break;
case 13: case 32:
this.$=instruccionesAPI.nuevoDoWhile($$[$0-6], $$[$0-2]);
break;
case 14:
  this.$ = instruccionesAPI.nuevaFuncion($$[$0-3], $$[$0-8], $$[$0-6], $$[$0-1]); 
break;
case 15: case 33:
this.$ = instruccionesAPI.nuevaLlamada($$[$0-4], $$[$0-2]);
break;
case 16: case 34:
this.$=instruccionesAPI.nuevoReturn($$[$0-1]);
break;
case 17: case 35:
this.$ = instruccionesAPI.nuevaAsignacion($$[$0-3], $$[$0-2],$$[$0]);
break;
case 18: case 36:
this.$=instruccionesAPI.nuevoIncremento($$[$0-2], $$[$0-1]);
break;
case 19: case 37:
this.$=instruccionesAPI.nuevoDecremento($$[$0-2], $$[$0-1]);
break;
case 20: case 38: case 91:
this.$=$$[$0-1];
break;
case 22:
 this.$ = [$$[$0]]; 
break;
case 39:
 this.$ = instruccionesAPI.nuevaOperacionUnaria($$[$0], TIPO_OPERACION.NEGATIVO); 
break;
case 40:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.SUMA); 
break;
case 41:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.RESTA); 
break;
case 42:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MULTIPLICACION); 
break;
case 43:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DIVISION); 
break;
case 44:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.POTENCIA); 
break;
case 45:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MODULO); 
break;
case 46:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR); 
break;
case 47:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR); 
break;
case 48:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR_IGUAL); 
break;
case 49:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR_IGUAL); 
break;
case 50:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.IGUAL_IGUAL); 
break;
case 51:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DISTINTO); 
break;
case 52:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.AND); 
break;
case 53:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.OR); 
break;
case 54:
this.$ =  instruccionesAPI.nuevaOperacionUnaria($$[$0], TIPO_OPERACION.NOT);
break;
case 55:
 this.$ = $$[$0-1]; 
break;
case 56:
 this.$ = instruccionesAPI.nuevoValor(Number($$[$0]), TIPO_VALOR.NUMERO); 
break;
case 57:
 this.$ = instruccionesAPI.nuevoValor(Number($$[$0]), TIPO_VALOR.DECIMAL); 
break;
case 58:
 this.$ = instruccionesAPI.nuevaLlamada($$[$0-3], $$[$0-1]); 
break;
case 59:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.TRUE); 
break;
case 60:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.FALSE); 
break;
case 61:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.CADENA); 
break;
case 62:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.CADENA_CHARS); 
break;
case 63:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.CADENA_EJECUTABLE); 
break;
case 64:
 this.$ = instruccionesAPI.nuevoObjeto($$[$0]); 
break;
case 65:
 this.$ = instruccionesAPI.nuevoArray($$[$0-1]); 
break;
case 66:
this.$=instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.IDENTIFICADOR);
break;
case 67:
this.$=instruccionesAPI.nuevoOperadorTernario($$[$0-4], $$[$0-2], $$[$0]);
break;
case 68: case 70:
this.$ = instruccionesAPI.nuevoArgumento($$[$0-1], $$[$0]);
break;
case 69:
this.$ = "Epsilon";
break;
case 71:
this.$ =  "Epsilon";
break;
case 72:
this.$ = instruccionesAPI.nuevaDeclaracion($$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1]);
break;
case 73:
this.$ = instruccionesAPI.nuevaDeclaracion($$[$0-6], $$[$0-5], $$[$0-4], $$[$0-2], $$[$0-1]);
break;
case 75:
this.$=instruccionesAPI.nuevoID($$[$0-3],$$[$0-2], $$[$0-1],$$[$0]);
break;
case 76: case 78: case 92: case 95: case 97: case 99: case 103: case 110: case 117: case 119: case 121: case 130:
this.$="Epsilon";
break;
case 77:
this.$=instruccionesAPI.nuevoID($$[$0-4], $$[$0-3], $$[$0-1], $$[$0]);
break;
case 80:
this.$="undefined";
break;
case 82:
 console.error('Error sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column+' la declaración de un const tiene que ser inicializado.');	
break;
case 84:
this.$={tipo:"infer", isArray:"undefinied"};
break;
case 85: case 86: case 87:
 this.$=instruccionesAPI.nuevoTipo($$[$0-1],$$[$0]); 
break;
case 88:
 this.$ = instruccionesAPI.nuevoTipo($$[$0-1], $$[$0]);
break;
case 89:
this.$=instruccionesAPI.nuevaDimension($$[$0]);
break;
case 90:
this.$=false;
break;
case 93:
this.$=instruccionesAPI.nuevoObjAtributo($$[$0-3], $$[$0-1], $$[$0]);
break;
case 96: case 98:
this.$=instruccionesAPI.nuevoDato($$[$0-1], $$[$0]);
break;
case 100:
this.$=instruccionesAPI.nuevoType($$[$0-5],$$[$0-2]);
break;
case 101:
this.$=instruccionesAPI.nuevoTypeAtributo($$[$0-2], $$[$0-1], $$[$0]);
break;
case 104:
 this.$ = $$[$0];
break;
case 105:
 this.$ = "Epsilon"; 
break;
case 106:
this.$ = instruccionesAPI.nuevoElseIf($$[$0-5], $$[$0-2], $$[$0]);
break;
case 107:
this.$ =  instruccionesAPI.nuevoElse($$[$0-1]);
break;
case 108:
this.$=instruccionesAPI.nuevoCase($$[$0-5], $$[$0-2], $$[$0]);
break;
case 109:
this.$=instruccionesAPI.nuevoDefault($$[$0-1]);
break;
case 111:
this.$ = instruccionesAPI.nuevaDeclaracion($$[$0-5], $$[$0-4], $$[$0-1], $$[$0-3]);
break;
case 112:
this.$ = instruccionesAPI.nuevaAsignacion($$[$0-3], $$[$0-1]);
break;
case 116: case 118:
this.$=instruccionesAPI.nuevoParametro($$[$0-1], $$[$0-2], $$[$0]);
break;
case 122:
this.$=instruccionesAPI.nuevoArrayIndex($$[$0-2], $$[$0]);
break;
case 123:
this.$="false";
break;
case 124:
this.$=instruccionesAPI.nuevaReferencia($$[$0-1], $$[$0]);
break;
case 125:
this.$=instruccionesAPI.nuevoAccPosicion($$[$0-2], $$[$0]);
break;
case 126:
this.$=instruccionesAPI.nuevoAccAtributo($$[$0-1], $$[$0]);
break;
case 127:
this.$=instruccionesAPI.nuevoPop();
break;
case 128:
this.$=instruccionesAPI.nuevoLength();
break;
case 129:
this.$=instruccionesAPI.nuevoPush($$[$0-1]);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:$V1,17:$V2,21:$V3,23:$V4,25:$V5,27:$V6,30:$V7,31:$V8,32:$V9,37:$Va,39:15,76:$Vb,86:$Vc},{1:[3]},{2:$V0,5:[1,20],6:21,7:4,8:5,9:$V1,17:$V2,21:$V3,23:$V4,25:$V5,27:$V6,30:$V7,31:$V8,32:$V9,37:$Va,39:15,76:$Vb,86:$Vc},o($Vd,[2,3]),o($Vd,[2,4]),o($Vd,[2,5]),{10:[1,22]},{18:[1,23]},{10:[1,24]},{10:[1,25]},{10:[1,26]},{13:[1,27]},{25:[1,28]},o($Ve,$Vf,{95:30,10:[1,29],18:$Vg,67:$Vh}),{10:$Vi,11:34,13:$Vj,20:$Vk,25:$Vl,38:33,39:48,44:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:46,67:$Vv},{20:[1,53],40:[1,50],41:[1,51],42:[1,52]},{25:[1,54]},{25:[1,55]},{20:[1,56]},{25:[1,57]},{1:[2,1]},o($Vd,[2,2]),{10:$Vi,11:58,13:$Vj,25:$Vl,39:48,44:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:46,67:$Vv},{19:[1,59]},{10:$Vi,11:60,13:$Vj,25:$Vl,39:48,44:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:46,67:$Vv},{24:61,25:$Vw,27:[1,62]},{10:$Vi,11:64,13:$Vj,25:$Vl,39:48,44:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:46,67:$Vv},{2:$V0,7:67,8:68,9:$Vx,14:65,17:$Vy,21:$Vz,23:$VA,25:$VB,27:$V6,30:$VC,31:$VD,37:$VE,39:77,43:66,76:$Vb,86:$Vc},{10:[1,78]},{10:$Vi,11:80,12:$VF,13:$Vj,25:$Vl,36:79,39:48,44:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:46,67:$Vv},o($VG,[2,124]),{10:$Vi,11:81,13:$Vj,25:$Vl,39:48,44:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:46,67:$Vv},{25:[1,82],96:[1,83],97:[1,84],98:[1,85]},{20:[1,86]},{20:[2,120],44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,70:$VV},{10:$Vi,11:102,13:$Vj,25:$Vl,39:48,44:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:46,67:$Vv},{10:$Vi,11:103,13:$Vj,25:$Vl,39:48,44:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:46,67:$Vv},{10:$Vi,11:104,13:$Vj,25:$Vl,39:48,44:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:46,67:$Vv},o($VW,[2,56]),o($VW,[2,57]),o($VW,$Vf,{95:30,10:[1,105],18:$Vg,67:$Vh}),o($VW,[2,59]),o($VW,[2,60]),o($VW,[2,61]),o($VW,[2,62]),o($VW,[2,63]),o($VW,[2,64]),{10:$Vi,11:107,13:$Vj,25:$Vl,39:48,44:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:46,67:$Vv,68:106,69:[2,97]},o($VW,[2,66]),{15:[1,109],25:$VX,83:108},{10:$Vi,11:111,13:$Vj,25:$Vl,39:48,44:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:46,67:$Vv},{20:[1,112]},{20:[1,113]},o($Vd,[2,20]),o($VY,$VZ,{73:114,34:$V_}),{34:$V_,40:$VZ,73:116},o($Vd,[2,74]),{40:[1,117]},{12:[1,118],44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,70:$VV},{10:[1,119]},{12:[1,120],44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,70:$VV},{10:$Vi,11:121,13:$Vj,25:$Vl,39:48,44:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:46,67:$Vv},{25:[1,122]},{40:[1,123]},{12:[1,124],44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,70:$VV},{2:$V0,7:67,8:68,9:$Vx,15:[1,125],17:$Vy,21:$Vz,23:$VA,25:$VB,27:$V6,30:$VC,31:$VD,37:$VE,39:77,43:126,76:$Vb,86:$Vc},o($V$,[2,22]),o($V$,[2,23]),o($V$,[2,24]),{10:[1,127]},{18:[1,128]},{10:[1,129]},{10:[1,130]},{10:[1,131]},{13:[1,132]},o($Ve,$Vf,{95:30,10:[1,133],18:$Vg,67:$Vh}),{10:$Vi,11:34,13:$Vj,20:$Vk,25:$Vl,38:134,39:48,44:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:46,67:$Vv},{20:[1,138],40:[1,135],41:[1,136],42:[1,137]},{12:[2,117],25:[1,140],33:139},{12:[1,141]},{12:$V01,44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,70:$VV,71:142,72:$V11},{44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,69:[1,144],70:$VV},o($VG,$Vf,{95:145,18:$Vg,67:$Vh}),{10:[1,146]},o($VG,[2,128]),{10:[1,147]},o($Vd,[2,16]),{10:$Vi,11:148,13:$Vj,25:$Vl,39:48,44:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:46,67:$Vv},{10:$Vi,11:149,13:$Vj,25:$Vl,39:48,44:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:46,67:$Vv},{10:$Vi,11:150,13:$Vj,25:$Vl,39:48,44:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:46,67:$Vv},{10:$Vi,11:151,13:$Vj,25:$Vl,39:48,44:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:46,67:$Vv},{10:$Vi,11:152,13:$Vj,25:$Vl,39:48,44:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:46,67:$Vv},{10:$Vi,11:153,13:$Vj,25:$Vl,39:48,44:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:46,67:$Vv},{10:$Vi,11:154,13:$Vj,25:$Vl,39:48,44:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:46,67:$Vv},{10:$Vi,11:155,13:$Vj,25:$Vl,39:48,44:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:46,67:$Vv},{10:$Vi,11:156,13:$Vj,25:$Vl,39:48,44:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:46,67:$Vv},{10:$Vi,11:157,13:$Vj,25:$Vl,39:48,44:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:46,67:$Vv},{10:$Vi,11:158,13:$Vj,25:$Vl,39:48,44:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:46,67:$Vv},{10:$Vi,11:159,13:$Vj,25:$Vl,39:48,44:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:46,67:$Vv},{10:$Vi,11:160,13:$Vj,25:$Vl,39:48,44:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:46,67:$Vv},{10:$Vi,11:161,13:$Vj,25:$Vl,39:48,44:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:46,67:$Vv},{10:$Vi,11:162,13:$Vj,25:$Vl,39:48,44:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:46,67:$Vv},o($VW,[2,39]),o($VW,[2,54]),{12:[1,163],44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,70:$VV},{10:$Vi,11:80,12:$VF,13:$Vj,25:$Vl,36:164,39:48,44:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:46,67:$Vv},{69:[1,165]},{44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,69:$V21,70:$VV,72:$V31,85:166},{15:[1,168]},o($VW,[2,92]),{34:[1,169]},{20:[1,170],44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,70:$VV},o($Vd,[2,18]),o($Vd,[2,19]),o($V41,$V51,{74:171,40:$V61}),{25:$V71,35:173,79:$V81,81:$V91,82:$Va1},{40:[1,178]},{13:[1,179]},{13:[1,180]},{10:$Vi,11:181,13:$Vj,25:$Vl,39:48,44:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:46,67:$Vv},{13:[1,182]},{20:[1,183],44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,70:$VV},{28:[1,184],29:[1,185],34:$V_,40:$VZ,73:186},{10:$Vi,11:187,13:$Vj,25:$Vl,39:48,44:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:46,67:$Vv},{13:[1,188]},{30:[1,189]},o($V$,[2,21]),{10:$Vi,11:190,13:$Vj,25:$Vl,39:48,44:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:46,67:$Vv},{19:[1,191]},{10:$Vi,11:192,13:$Vj,25:$Vl,39:48,44:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:46,67:$Vv},{24:193,25:$Vw,27:[1,194]},{10:$Vi,11:195,13:$Vj,25:$Vl,39:48,44:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:46,67:$Vv},{2:$V0,7:67,8:68,9:$Vx,14:196,17:$Vy,21:$Vz,23:$VA,25:$VB,27:$V6,30:$VC,31:$VD,37:$VE,39:77,43:66,76:$Vb,86:$Vc},{10:$Vi,11:80,12:$VF,13:$Vj,25:$Vl,36:197,39:48,44:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:46,67:$Vv},{20:[1,198]},{10:$Vi,11:199,13:$Vj,25:$Vl,39:48,44:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:46,67:$Vv},{20:[1,200]},{20:[1,201]},o($V$,[2,38]),{12:[1,202]},o($Vb1,$VZ,{73:203,34:$V_}),{20:[1,204]},{12:[2,68]},{10:$Vi,11:205,13:$Vj,25:$Vl,39:48,44:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:46,67:$Vv},o($VG,$Vf,{95:206,18:$Vg,67:$Vh}),o($VG,[2,126]),{12:[1,207]},{10:$Vi,11:208,13:$Vj,25:$Vl,39:48,44:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:46,67:$Vv},o($Vc1,[2,40],{46:$VJ,47:$VK,48:$VL,49:$VM}),o($Vc1,[2,41],{46:$VJ,47:$VK,48:$VL,49:$VM}),o($Vd1,[2,42],{48:$VL,49:$VM}),o($Vd1,[2,43],{48:$VL,49:$VM}),o($VW,[2,44]),o($VW,[2,45]),o($Ve1,[2,46],{44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM}),o($Ve1,[2,47],{44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM}),o($Ve1,[2,48],{44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM}),o($Ve1,[2,49],{44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM}),o($Ve1,[2,50],{44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM}),o($Ve1,[2,51],{44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM}),o($Vf1,[2,52],{44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS}),o($Vf1,[2,53],{44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS}),{34:[1,209],44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,70:$VV},o($VW,[2,55]),{12:[1,210]},o($VW,[2,65]),{69:[2,96]},{10:$Vi,11:211,13:$Vj,25:$Vl,39:48,44:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:46,67:$Vv},o($VW,[2,91]),{10:$Vi,11:212,13:$Vj,25:$Vl,39:48,44:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:46,67:$Vv},o($Vd,[2,17]),{20:$Vg1,72:$Vh1,75:213},{10:$Vi,11:215,13:$Vj,25:$Vl,39:48,44:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:46,67:$Vv},o([12,15,20,40,72],[2,83]),o($Vi1,$Vj1,{80:216,67:$Vk1}),o($Vi1,$Vj1,{80:218,67:$Vk1}),o($Vi1,$Vj1,{80:219,67:$Vk1}),o($Vi1,$Vj1,{80:220,67:$Vk1}),{10:$Vi,11:221,13:$Vj,25:$Vl,39:48,44:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:46,67:$Vv},{25:$Vl1,87:222},{2:$V0,7:67,8:68,9:$Vx,14:224,17:$Vy,21:$Vz,23:$VA,25:$VB,27:$V6,30:$VC,31:$VD,37:$VE,39:77,43:66,76:$Vb,86:$Vc},{12:[1,225],44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,70:$VV},{15:$Vm1,22:226,91:$Vn1,92:$Vo1},{25:[1,229]},{25:[1,230]},{25:[1,231]},{40:[1,232]},{20:[1,233],44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,70:$VV},{2:$V0,7:67,8:68,9:$Vx,14:234,17:$Vy,21:$Vz,23:$VA,25:$VB,27:$V6,30:$VC,31:$VD,37:$VE,39:77,43:66,76:$Vb,86:$Vc},{10:[1,235]},{12:[1,236],44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,70:$VV},{10:[1,237]},{12:[1,238],44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,70:$VV},{10:$Vi,11:239,13:$Vj,25:$Vl,39:48,44:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:46,67:$Vv},{25:[1,240]},{12:[1,241],44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,70:$VV},{2:$V0,7:67,8:68,9:$Vx,15:[1,242],17:$Vy,21:$Vz,23:$VA,25:$VB,27:$V6,30:$VC,31:$VD,37:$VE,39:77,43:126,76:$Vb,86:$Vc},{12:[1,243]},o($V$,[2,34]),{20:[1,244],44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,70:$VV},o($V$,[2,36]),o($V$,[2,37]),{34:[1,245]},{12:$Vp1,72:$Vq1,93:246},o($Vd,[2,15]),{12:$V01,44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,70:$VV,71:248,72:$V11},o($VG,[2,125]),o($VG,[2,127]),{12:[1,249],44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,70:$VV},{10:$Vi,11:250,13:$Vj,25:$Vl,39:48,44:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:46,67:$Vv},o($VW,[2,58]),{44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,69:$V21,70:$VV,72:$V31,85:251},{15:[2,95],44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,70:$VV,72:[1,253],84:252},{20:[1,254]},{25:[1,255]},o($V41,[2,79],{44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,70:$VV}),o($Vi1,[2,85]),{69:[1,256]},o($Vi1,[2,86]),o($Vi1,[2,87]),o($Vi1,[2,88]),{20:[2,78],44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,70:$VV,72:[1,258],77:257},{15:[1,259]},o([15,72],$VZ,{73:260,34:$V_}),{2:$V0,7:67,8:68,9:$Vx,15:[1,261],17:$Vy,21:$Vz,23:$VA,25:$VB,27:$V6,30:$VC,31:$VD,37:$VE,39:77,43:126,76:$Vb,86:$Vc},{20:[1,262]},{15:[1,263]},{10:$Vi,11:264,13:$Vj,25:$Vl,39:48,44:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:46,67:$Vv},{34:[1,265]},{26:266,40:$Vr1,41:$Vs1,42:$Vt1},{12:[1,270]},{12:[1,271]},{10:$Vi,11:272,13:$Vj,25:$Vl,39:48,44:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:46,67:$Vv},o($Vu1,[2,112]),{2:$V0,7:67,8:68,9:$Vx,15:[1,273],17:$Vy,21:$Vz,23:$VA,25:$VB,27:$V6,30:$VC,31:$VD,37:$VE,39:77,43:126,76:$Vb,86:$Vc},{10:$Vi,11:274,13:$Vj,25:$Vl,39:48,44:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:46,67:$Vv},{13:[1,275]},{10:$Vi,11:276,13:$Vj,25:$Vl,39:48,44:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:46,67:$Vv},{13:[1,277]},{20:[1,278],44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,70:$VV},{28:[1,279],29:[1,280],34:$V_,40:$VZ,73:186},{13:[1,281]},{30:[1,282]},{20:[1,283]},o($V$,[2,35]),{25:$V71,35:284,79:$V81,81:$V91,82:$Va1},{12:[2,116]},{25:[1,285]},{12:[2,70]},o($VG,[2,129]),o([12,15,20,34,69,70,72],[2,67],{44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU}),{69:[2,98]},{15:[2,93]},{25:$VX,83:286},o($Vd,[2,72]),o($VY,$VZ,{73:287,34:$V_}),o($Vi1,$Vj1,{80:288,67:$Vk1}),{20:[1,289]},{25:[1,290]},{20:[1,291]},{15:[2,103],72:[1,293],88:292},o($Vd,$Vv1,{16:294,89:$Vw1}),o($Vd,[2,7]),o($Vd,[2,8]),{34:[1,296],44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,70:$VV},{13:[1,297]},{12:[1,298]},{12:[2,113]},{12:[2,114]},{10:$Vi,11:299,13:$Vj,25:$Vl,39:48,44:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:46,67:$Vv},{13:[1,300]},{13:[1,301]},{20:[1,302],44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,70:$VV},o($Vd,[2,12]),{12:[1,303],44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,70:$VV},{2:$V0,7:67,8:68,9:$Vx,14:304,17:$Vy,21:$Vz,23:$VA,25:$VB,27:$V6,30:$VC,31:$VD,37:$VE,39:77,43:66,76:$Vb,86:$Vc},{12:[1,305],44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,70:$VV},{15:$Vm1,22:306,91:$Vn1,92:$Vo1},{25:[1,307]},{25:[1,308]},{25:[1,309]},{2:$V0,7:67,8:68,9:$Vx,14:310,17:$Vy,21:$Vz,23:$VA,25:$VB,27:$V6,30:$VC,31:$VD,37:$VE,39:77,43:66,76:$Vb,86:$Vc},{10:[1,311]},o($V$,[2,33]),{13:[1,312]},o($Vb1,$VZ,{73:313,34:$V_}),{15:[2,94]},o($V41,$V51,{74:314,40:$V61}),o($Vi1,[2,89]),o($Vd,[2,73]),{34:$V_,40:$VZ,73:315},o($Vd,[2,100]),{15:[2,101]},{25:$Vl1,87:316},o($Vd,[2,6]),{9:[1,318],13:[1,319],90:317},{13:[1,320]},{2:$V0,7:67,8:68,9:$Vx,14:321,17:$Vy,21:$Vz,23:$VA,25:$VB,27:$V6,30:$VC,31:$VD,37:$VE,39:77,43:66,76:$Vb,86:$Vc},{13:[1,322]},{12:[2,115],44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,70:$VV},{2:$V0,7:67,8:68,9:$Vx,14:323,17:$Vy,21:$Vz,23:$VA,25:$VB,27:$V6,30:$VC,31:$VD,37:$VE,39:77,43:66,76:$Vb,86:$Vc},{2:$V0,7:67,8:68,9:$Vx,14:324,17:$Vy,21:$Vz,23:$VA,25:$VB,27:$V6,30:$VC,31:$VD,37:$VE,39:77,43:66,76:$Vb,86:$Vc},o($Vu1,[2,111]),{20:[1,325]},{2:$V0,7:67,8:68,9:$Vx,15:[1,326],17:$Vy,21:$Vz,23:$VA,25:$VB,27:$V6,30:$VC,31:$VD,37:$VE,39:77,43:126,76:$Vb,86:$Vc},{20:[1,327]},{15:[1,328]},{26:329,40:$Vr1,41:$Vs1,42:$Vt1},{12:[1,330]},{12:[1,331]},{2:$V0,7:67,8:68,9:$Vx,15:[1,332],17:$Vy,21:$Vz,23:$VA,25:$VB,27:$V6,30:$VC,31:$VD,37:$VE,39:77,43:126,76:$Vb,86:$Vc},{10:$Vi,11:333,13:$Vj,25:$Vl,39:48,44:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:46,67:$Vv},{2:$V0,4:334,6:3,7:4,8:5,9:$V1,17:$V2,21:$V3,23:$V4,25:$V5,27:$V6,30:$V7,31:$V8,32:$V9,37:$Va,39:15,76:$Vb,86:$Vc},{12:$Vp1,72:$Vq1,93:335},{20:$Vg1,72:$Vh1,75:336},{40:[1,337]},{15:[2,102]},o($Vd,[2,104]),{10:[1,338]},{2:$V0,7:67,8:68,9:$Vx,14:339,17:$Vy,21:$Vz,23:$VA,25:$VB,27:$V6,30:$VC,31:$VD,37:$VE,39:77,43:66,76:$Vb,86:$Vc},{2:$V0,7:67,8:68,9:$Vx,14:340,17:$Vy,21:$Vz,23:$VA,25:$VB,27:$V6,30:$VC,31:$VD,37:$VE,39:77,43:66,76:$Vb,86:$Vc},{2:$V0,7:67,8:68,9:$Vx,15:[1,341],17:$Vy,21:$Vz,23:$VA,25:$VB,27:$V6,30:$VC,31:$VD,37:$VE,39:77,43:126,76:$Vb,86:$Vc},{2:$V0,7:67,8:68,9:$Vx,14:342,17:$Vy,21:$Vz,23:$VA,25:$VB,27:$V6,30:$VC,31:$VD,37:$VE,39:77,43:66,76:$Vb,86:$Vc},{2:$V0,7:67,8:68,9:$Vx,15:[1,343],17:$Vy,21:$Vz,23:$VA,25:$VB,27:$V6,30:$VC,31:$VD,37:$VE,39:77,43:126,76:$Vb,86:$Vc},{2:$V0,7:67,8:68,9:$Vx,15:[1,344],17:$Vy,21:$Vz,23:$VA,25:$VB,27:$V6,30:$VC,31:$VD,37:$VE,39:77,43:126,76:$Vb,86:$Vc},o($Vd,[2,13]),o($V$,$Vv1,{16:345,89:$Vw1}),o($V$,[2,26]),o($V$,[2,27]),{12:[1,346]},{13:[1,347]},{13:[1,348]},o($V$,[2,31]),{12:[1,349],44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,70:$VV},{2:$V0,6:21,7:4,8:5,9:$V1,15:[1,350],17:$V2,21:$V3,23:$V4,25:$V5,27:$V6,30:$V7,31:$V8,32:$V9,37:$Va,39:15,76:$Vb,86:$Vc},{12:[2,118]},{20:[2,75]},{10:$Vi,11:351,13:$Vj,25:$Vl,39:48,44:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:46,67:$Vv},{10:$Vi,11:352,13:$Vj,25:$Vl,39:48,44:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:46,67:$Vv},{2:$V0,7:67,8:68,9:$Vx,15:[1,353],17:$Vy,21:$Vz,23:$VA,25:$VB,27:$V6,30:$VC,31:$VD,37:$VE,39:77,43:126,76:$Vb,86:$Vc},{2:$V0,7:67,8:68,9:$Vx,15:[1,354],17:$Vy,21:$Vz,23:$VA,25:$VB,27:$V6,30:$VC,31:$VD,37:$VE,39:77,43:126,76:$Vb,86:$Vc},{15:[2,109]},{2:$V0,7:67,8:68,9:$Vx,15:[1,355],17:$Vy,21:$Vz,23:$VA,25:$VB,27:$V6,30:$VC,31:$VD,37:$VE,39:77,43:126,76:$Vb,86:$Vc},o($Vd,[2,10]),o($Vd,[2,11]),o($V$,[2,25]),{13:[1,356]},{2:$V0,7:67,8:68,9:$Vx,14:357,17:$Vy,21:$Vz,23:$VA,25:$VB,27:$V6,30:$VC,31:$VD,37:$VE,39:77,43:66,76:$Vb,86:$Vc},{2:$V0,7:67,8:68,9:$Vx,14:358,17:$Vy,21:$Vz,23:$VA,25:$VB,27:$V6,30:$VC,31:$VD,37:$VE,39:77,43:66,76:$Vb,86:$Vc},{20:[1,359]},o($Vd,[2,14]),{20:$Vg1,44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,70:$VV,72:$Vh1,75:360},{12:[1,361],44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,70:$VV},o($Vd,[2,107]),{15:$Vm1,22:362,91:$Vn1,92:$Vo1},o($Vd,[2,9]),{2:$V0,7:67,8:68,9:$Vx,14:363,17:$Vy,21:$Vz,23:$VA,25:$VB,27:$V6,30:$VC,31:$VD,37:$VE,39:77,43:66,76:$Vb,86:$Vc},{2:$V0,7:67,8:68,9:$Vx,15:[1,364],17:$Vy,21:$Vz,23:$VA,25:$VB,27:$V6,30:$VC,31:$VD,37:$VE,39:77,43:126,76:$Vb,86:$Vc},{2:$V0,7:67,8:68,9:$Vx,15:[1,365],17:$Vy,21:$Vz,23:$VA,25:$VB,27:$V6,30:$VC,31:$VD,37:$VE,39:77,43:126,76:$Vb,86:$Vc},o($V$,[2,32]),{20:[2,77]},{13:[1,366]},{15:[2,108]},{2:$V0,7:67,8:68,9:$Vx,15:[1,367],17:$Vy,21:$Vz,23:$VA,25:$VB,27:$V6,30:$VC,31:$VD,37:$VE,39:77,43:126,76:$Vb,86:$Vc},o($V$,[2,29]),o($V$,[2,30]),{2:$V0,7:67,8:68,9:$Vx,14:368,17:$Vy,21:$Vz,23:$VA,25:$VB,27:$V6,30:$VC,31:$VD,37:$VE,39:77,43:66,76:$Vb,86:$Vc},o($V$,[2,28]),{2:$V0,7:67,8:68,9:$Vx,15:[1,369],17:$Vy,21:$Vz,23:$VA,25:$VB,27:$V6,30:$VC,31:$VD,37:$VE,39:77,43:126,76:$Vb,86:$Vc},o($Vd,$Vv1,{16:370,89:$Vw1}),o($Vd,[2,106])],
defaultActions: {20:[2,1],142:[2,68],166:[2,96],246:[2,116],248:[2,70],251:[2,98],252:[2,93],267:[2,113],268:[2,114],286:[2,94],292:[2,101],316:[2,102],335:[2,118],336:[2,75],341:[2,109],360:[2,77],362:[2,108]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	const TIPO_OPERACION	= require('./instrucciones').TIPO_OPERACION;
	const TIPO_VALOR 		= require('./instrucciones').TIPO_VALOR;
	const instruccionesAPI	= require('./instrucciones').instruccionesAPI;
	const TIPO_DATO = require('./instrucciones').TIPO_DATO;
	const TS = require('./instrucciones').TS;
	var salida=[];
	var ArrayDeErrores = [];
	var currentType="";
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 79;
break;
case 1:return 82;
break;
case 2:return 81;
break;
case 3:return 27;
break;
case 4:return 76;
break;
case 5:return 17;
break;
case 6:return 19;
break;
case 7:return 62;
break;
case 8:return 61;
break;
case 9:return 9;
break;
case 10:return 89;
break;
case 11:return 21;
break;
case 12:return 91;
break;
case 13:return 92;
break;
case 14:return 'R_BREAK';
break;
case 15:return 'R_CONTINUE';
break;
case 16:return 30;
break;
case 17:return 31;
break;
case 18:return 23;
break;
case 19:return 'R_VOID';
break;
case 20:return 37;
break;
case 21:return 98;
break;
case 22:return 96;
break;
case 23:return 97;
break;
case 24:return 86;
break;
case 25:return 28;
break;
case 26:return 29;
break;
case 27:return 32;
break;
case 28: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 63;
break;
case 29: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 64;
break;
case 30: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 65;
break;
case 31:return 60;
break;
case 32:return 59;
break;
case 33:return 25;
break;
case 34:
break;
case 35:// comentario simple línea
break;
case 36:// comentario multiple líneas
break;
case 37:return 41;
break;
case 38:return 42;
break;
case 39:return "MAS";
break;
case 40:return 44;
break;
case 41:return 48;
break;
case 42:return 46;
break;
case 43:return 47;
break;
case 44:return 49;
break;
case 45:return 54;
break;
case 46:return 55;
break;
case 47:return 40;
break;
case 48:return 52;
break;
case 49:return 50;
break;
case 50:return 53;
break;
case 51:return 51;
break;
case 52:return 56;
break;
case 53:return 57;
break;
case 54:return 58;
break;
case 55:return 13;
break;
case 56:return 15;
break;
case 57:return 10;
break;
case 58:return 12;
break;
case 59:return 67;
break;
case 60:return 69;
break;
case 61:return 20;
break;
case 62:return 34;
break;
case 63:return 18;
break;
case 64:return 72;
break;
case 65:return 70;
break;
case 66:return 5;
break;
case 67: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); salida.push('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);  ArrayDeErrores.push({tipo:"léxico", linea:this._$.first_line, columna:this._$.first_column, descripcion: yy_.yytext});
break;
}
},
rules: [/^(?:number\b)/,/^(?:boolean\b)/,/^(?:string\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:console\b)/,/^(?:log\b)/,/^(?:false\b)/,/^(?:true\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:void\b)/,/^(?:return\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:length\b)/,/^(?:type\b)/,/^(?:of\b)/,/^(?:in\b)/,/^(?:function\b)/,/^(?:"(\\"|\\n|\\t|\\r|\\\\|[^\"])*")/,/^(?:'(\\'|\\n|\\t|\\r|\\\\|[^\'])*')/,/^(?:`(\\"|\\n|\\t|\\r|\\\\|[^\"])*`)/,/^(?:[0-9]+\.([0-9]+)?\b)/,/^(?:[0-9]+\b)/,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/,/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:==)/,/^(?:!=)/,/^(?:=)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:;)/,/^(?::)/,/^(?:\.)/,/^(?:,)/,/^(?:\?)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}