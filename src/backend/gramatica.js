/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,21],$V1=[1,6],$V2=[1,7],$V3=[1,8],$V4=[1,9],$V5=[1,13],$V6=[1,19],$V7=[1,10],$V8=[1,11],$V9=[1,12],$Va=[1,14],$Vb=[1,16],$Vc=[1,17],$Vd=[1,18],$Ve=[1,20],$Vf=[1,22],$Vg=[2,5,9,15,17,21,23,25,27,31,32,33,38,45,46,47,82,93],$Vh=[20,40,41,42,43,44],$Vi=[2,140],$Vj=[1,35],$Vk=[1,34],$Vl=[1,40],$Vm=[1,53],$Vn=[2,131],$Vo=[1,43],$Vp=[1,38],$Vq=[1,39],$Vr=[1,41],$Vs=[1,42],$Vt=[1,44],$Vu=[1,45],$Vv=[1,46],$Vw=[1,47],$Vx=[1,48],$Vy=[1,50],$Vz=[1,52],$VA=[1,72],$VB=[1,77],$VC=[1,78],$VD=[1,79],$VE=[1,80],$VF=[1,83],$VG=[1,81],$VH=[1,82],$VI=[1,84],$VJ=[1,86],$VK=[1,87],$VL=[1,88],$VM=[2,79],$VN=[12,15,20,35,40,41,42,43,44,49,50,51,52,53,54,55,56,57,58,59,60,61,62,74,75,78],$VO=[1,99],$VP=[1,98],$VQ=[1,100],$VR=[1,101],$VS=[1,102],$VT=[1,103],$VU=[1,104],$VV=[1,105],$VW=[1,106],$VX=[1,107],$VY=[1,108],$VZ=[1,109],$V_=[1,110],$V$=[1,111],$V01=[1,112],$V11=[12,15,20,35,49,50,51,52,53,54,55,56,57,58,59,60,61,62,74,75,78],$V21=[1,121],$V31=[20,40,78],$V41=[2,93],$V51=[1,129],$V61=[2,5,9,15,17,21,23,25,27,31,32,33,38,45,46,47,82,93,98,99],$V71=[2,9,15,17,21,23,25,27,31,32,38,45,46,47,82,98,99],$V81=[2,81],$V91=[1,162],$Va1=[2,109],$Vb1=[1,186],$Vc1=[20,78],$Vd1=[2,90],$Ve1=[1,194],$Vf1=[1,199],$Vg1=[1,196],$Vh1=[1,197],$Vi1=[1,198],$Vj1=[1,200],$Vk1=[12,78],$Vl1=[12,15,20,35,49,50,55,56,57,58,59,60,61,62,74,75,78],$Vm1=[12,15,20,35,49,50,51,52,55,56,57,58,59,60,61,62,74,75,78],$Vn1=[12,15,20,35,55,56,57,58,59,60,61,62,74,75,78],$Vo1=[12,15,20,35,59,60,61,62,74,75,78],$Vp1=[2,86],$Vq1=[1,240],$Vr1=[12,13,15,20,40,78],$Vs1=[2,100],$Vt1=[1,243],$Vu1=[1,249],$Vv1=[2,120],$Vw1=[1,253],$Vx1=[1,254],$Vy1=[1,257],$Vz1=[2,129],$VA1=[1,277],$VB1=[1,298],$VC1=[1,296],$VD1=[1,297],$VE1=[10,13,25,49,63,64,65,66,67,68,69,70,72,76],$VF1=[2,115],$VG1=[1,322];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaracion":7,"type":8,"R_IF":9,"ABRIR_PARENTESIS":10,"expresion":11,"CERRAR_PARENTESIS":12,"ABRIR_LLAVE":13,"sentencias":14,"CERRAR_LLAVE":15,"elseIf":16,"R_CONSOLE":17,"PUNTO":18,"R_LOG":19,"PUNTO_COMA":20,"R_SWITCH":21,"cases":22,"R_FOR":23,"for_init":24,"IDENTIFICADOR":25,"for_change":26,"R_LET":27,"R_OF":28,"id":29,"R_IN":30,"R_WHILE":31,"R_DO":32,"R_FUNCTION":33,"parametros":34,"DOS_PUNTOS":35,"tipo":36,"argumentos":37,"R_RETURN":38,"retorno":39,"IGUAL":40,"INCREMENTO":41,"DECREMENTO":42,"ASIGNACION_SUMA":43,"ASIGNACION_RESTA":44,"R_BREAK":45,"R_CONTINUE":46,"R_GRAFICAR_TS":47,"sentencia":48,"MENOS":49,"MAS":50,"MULTIPLICACION":51,"DIVISION":52,"POTENCIA":53,"MODULO":54,"MAYOR":55,"MENOR":56,"MAYOR_IGUAL":57,"MENOR_IGUAL":58,"IGUALDAD":59,"DISTINTO":60,"AND":61,"OR":62,"NOT":63,"ENTERO":64,"DECIMAL":65,"R_TRUE":66,"R_FALSE":67,"CADENA":68,"CADENA_CHARS":69,"CADENA_EJECUTABLE":70,"objeto":71,"ABRIR_CORCHETE":72,"arrays":73,"CERRAR_CORCHETE":74,"OPERADOR_TERNARIO":75,"R_NULL":76,"argumentos_P":77,"COMA":78,"definicion_tipo":79,"definicion":80,"listaID":81,"R_CONST":82,"listaIDConst":83,"definicion_const":84,"R_NUMBER":85,"declarar_array":86,"R_STRING":87,"R_BOOLEAN":88,"R_VOID":89,"obj_atributos":90,"obj_atributos_pr":91,"arrays_pr":92,"R_TYPE":93,"type_atributos":94,"type_atributos_pr":95,"R_ELSE":96,"elseIf_P":97,"R_CASE":98,"R_DEFAULT":99,"parametros_pr":100,"array_position":101,"id_pr":102,"R_POP":103,"R_LENGTH":104,"R_PUSH":105,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"R_IF",10:"ABRIR_PARENTESIS",12:"CERRAR_PARENTESIS",13:"ABRIR_LLAVE",15:"CERRAR_LLAVE",17:"R_CONSOLE",18:"PUNTO",19:"R_LOG",20:"PUNTO_COMA",21:"R_SWITCH",23:"R_FOR",25:"IDENTIFICADOR",27:"R_LET",28:"R_OF",30:"R_IN",31:"R_WHILE",32:"R_DO",33:"R_FUNCTION",35:"DOS_PUNTOS",38:"R_RETURN",40:"IGUAL",41:"INCREMENTO",42:"DECREMENTO",43:"ASIGNACION_SUMA",44:"ASIGNACION_RESTA",45:"R_BREAK",46:"R_CONTINUE",47:"R_GRAFICAR_TS",49:"MENOS",50:"MAS",51:"MULTIPLICACION",52:"DIVISION",53:"POTENCIA",54:"MODULO",55:"MAYOR",56:"MENOR",57:"MAYOR_IGUAL",58:"MENOR_IGUAL",59:"IGUALDAD",60:"DISTINTO",61:"AND",62:"OR",63:"NOT",64:"ENTERO",65:"DECIMAL",66:"R_TRUE",67:"R_FALSE",68:"CADENA",69:"CADENA_CHARS",70:"CADENA_EJECUTABLE",72:"ABRIR_CORCHETE",74:"CERRAR_CORCHETE",75:"OPERADOR_TERNARIO",76:"R_NULL",78:"COMA",82:"R_CONST",85:"R_NUMBER",87:"R_STRING",88:"R_BOOLEAN",89:"R_VOID",93:"R_TYPE",96:"R_ELSE",98:"R_CASE",99:"R_DEFAULT",103:"R_POP",104:"R_LENGTH",105:"R_PUSH"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,8],[6,7],[6,7],[6,11],[6,10],[6,10],[6,7],[6,9],[6,10],[6,5],[6,3],[6,4],[6,3],[6,3],[6,4],[6,4],[6,2],[6,2],[6,2],[6,4],[14,2],[14,1],[48,1],[48,8],[48,7],[48,7],[48,11],[48,10],[48,10],[48,7],[48,9],[48,5],[48,3],[48,4],[48,3],[48,3],[48,4],[48,4],[48,2],[48,2],[48,2],[48,4],[11,2],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,2],[11,3],[11,1],[11,1],[11,4],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,3],[11,1],[11,5],[11,1],[37,2],[37,0],[77,3],[77,0],[7,6],[7,6],[7,2],[81,5],[81,0],[83,6],[83,0],[80,2],[80,0],[84,2],[79,2],[79,0],[36,2],[36,2],[36,2],[36,2],[36,1],[86,3],[86,0],[71,3],[71,2],[90,4],[91,2],[91,0],[73,2],[73,0],[92,3],[92,0],[8,7],[94,3],[95,2],[95,0],[16,2],[16,0],[97,8],[97,3],[22,5],[22,3],[22,0],[24,6],[24,4],[26,1],[26,1],[26,2],[34,3],[34,0],[100,4],[100,0],[39,1],[39,0],[101,4],[101,0],[29,2],[102,4],[102,3],[102,4],[102,2],[102,5],[102,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		// cuado se haya reconocido la entrada completa retornamos el AST
		var temporal = salida;
		salida=[];
		var tempAr = ArrayDeErrores;
		ArrayDeErrores = [];
		return {AST: $$[$0-1], Errores: temporal, ErrArr:tempAr};
	
break;
case 2: case 26:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3:
this.$=[$$[$0]];
break;
case 4: case 5: case 28: case 89: case 91: case 92: case 104: case 112: case 123: case 124: case 125: case 130:
this.$=$$[$0];
break;
case 6: case 29:
 this.$ = instruccionesAPI.nuevoIf($$[$0-5], $$[$0-2], $$[$0]);
break;
case 7: case 30:
this.$ = instruccionesAPI.nuevoImprimir($$[$0-2]);
break;
case 8: case 31:
this.$=instruccionesAPI.nuevoSwitch($$[$0-4], $$[$0-1]);
break;
case 9: case 32:
 this.$ = instruccionesAPI.nuevoFor($$[$0-8], $$[$0-7], {id:$$[$0-5], paso:$$[$0-4]}, $$[$0-1]);
break;
case 10: case 33:
this.$=instruccionesAPI.nuevoForOF($$[$0-6], $$[$0-4], $$[$0-1]);
break;
case 11: case 34:
this.$=instruccionesAPI.nuevoForIn($$[$0-6], $$[$0-4], $$[$0-1]);
break;
case 12: case 35:
this.$=instruccionesAPI.nuevoWhile($$[$0-4], $$[$0-1]);
break;
case 13: case 36:
this.$=instruccionesAPI.nuevoDoWhile($$[$0-6], $$[$0-2]);
break;
case 14:
  this.$ = instruccionesAPI.nuevaFuncion($$[$0-3], $$[$0-8], $$[$0-6], $$[$0-1], _$[$0-8].first_line, _$[$0-8].first_column); 
break;
case 15: case 37:
this.$ = instruccionesAPI.nuevaLlamada($$[$0-4], $$[$0-2], _$[$0-4].first_column, _$[$0-4].first_line);
break;
case 16: case 38:
this.$=instruccionesAPI.nuevoReturn($$[$0-1]);
break;
case 17: case 39:
this.$ = instruccionesAPI.nuevaAsignacion($$[$0-3], $$[$0-1], _$[$0-3].first_column, _$[$0-3].first_line);
break;
case 18:
this.$=instruccionesAPI.nuevoIncremento($$[$0-2], _$[$0-2].first_column, _$[$0-2].first_line);
break;
case 19:
this.$=instruccionesAPI.nuevoDecremento($$[$0-2], _$[$0-2].first_column, _$[$0-2].first_line);
break;
case 20: case 42:
this.$=instruccionesAPI.nuevoAsignacioSuma($$[$0-3], $$[$0-1], _$[$0-3].first_column, _$[$0-3].first_line);
break;
case 21: case 43:
this.$=instruccionesAPI.nuevoAsignacioResta($$[$0-3], $$[$0-1], _$[$0-3].first_column, _$[$0-3].first_line);
break;
case 22:
this.$=instruccionesAPI.nuevoAcceso($$[$0-1]);
break;
case 23: case 45:
this.$=instruccionesAPI.nuevoBreak();
break;
case 24: case 46:
this.$=instruccionesAPI.nuevoContinue();
break;
case 25: case 47:
this.$=instruccionesAPI.nuevoGraficarTS();
break;
case 27:
 this.$ = [$$[$0]]; 
break;
case 40:
this.$=instruccionesAPI.nuevoIncremento($$[$0-2], $$[$0-1], _$[$0-2].first_column, _$[$0-2].first_line);
break;
case 41:
this.$=instruccionesAPI.nuevoDecremento($$[$0-2], $$[$0-1], _$[$0-2].first_column, _$[$0-2].first_line);
break;
case 44:
this.$=instruccionesAPI.nuevoAcceso($$[$0-1], _$[$0-1].first_column, _$[$0-1].first_line);
break;
case 48:
 this.$ = instruccionesAPI.nuevaOperacionUnaria($$[$0], TIPO_OPERACION.NEGATIVO); 
break;
case 49:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.SUMA); 
break;
case 50:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.RESTA); 
break;
case 51:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MULTIPLICACION); 
break;
case 52:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DIVISION); 
break;
case 53:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.POTENCIA); 
break;
case 54:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MODULO); 
break;
case 55:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR); 
break;
case 56:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR); 
break;
case 57:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR_IGUAL); 
break;
case 58:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR_IGUAL); 
break;
case 59:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.IGUAL_IGUAL); 
break;
case 60:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DISTINTO); 
break;
case 61:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.AND); 
break;
case 62:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.OR); 
break;
case 63:
this.$ =  instruccionesAPI.nuevaOperacionUnaria($$[$0], TIPO_OPERACION.NOT);
break;
case 64:
 this.$ = $$[$0-1]; 
break;
case 65:
 this.$ = instruccionesAPI.nuevoValor(Number($$[$0]), TIPO_VALOR.NUMERO); 
break;
case 66:
 this.$ = instruccionesAPI.nuevoValor(Number($$[$0]), TIPO_VALOR.DECIMAL); 
break;
case 67:
 this.$ = instruccionesAPI.nuevaLlamada($$[$0-3], $$[$0-1], _$[$0-3].first_column, _$[$0-3].first_line); 
break;
case 68:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.TRUE); 
break;
case 69:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.FALSE); 
break;
case 70:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.CADENA); 
break;
case 71:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.CADENA_CHARS); 
break;
case 72:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.CADENA_EJECUTABLE); 
break;
case 73:
 this.$ = instruccionesAPI.nuevoObjeto($$[$0], _$[$0].first_column, _$[$0].first_line); 
break;
case 74:
 this.$ = instruccionesAPI.nuevoArray($$[$0-1], _$[$0-1].first_column, _$[$0-1].first_line); 
break;
case 75:
this.$=instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.IDENTIFICADOR);
break;
case 76:
this.$=instruccionesAPI.nuevoOperadorTernario($$[$0-4], $$[$0-2], $$[$0]);
break;
case 77:
this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.NULL);
break;
case 78:
this.$ = instruccionesAPI.nuevoArgumento($$[$0-1], $$[$0], _$[$0-1].first_column, _$[$0-1].first_line);
break;
case 79:
this.$ = "Epsilon";
break;
case 80:
this.$ = instruccionesAPI.nuevoArgumento($$[$0-1], $$[$0] , _$[$0-1].first_column, _$[$0-1].first_line);
break;
case 81:
this.$ =  "Epsilon";
break;
case 82: case 83:
this.$ = instruccionesAPI.nuevaDeclaracion($$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 84:
 console.error('Este es un error sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column);
						  salida.push('Este es un error sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column);
						  ArrayDeErrores.push({tipo:"sintáctico", linea:this._$.first_line, columna:this._$.first_column, descripcion: yytext});
break;
case 85:
this.$=instruccionesAPI.nuevoID($$[$0-3],$$[$0-2], $$[$0-1],$$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 86: case 88: case 102: case 105: case 107: case 109: case 113: case 120: case 127: case 129: case 131: case 140:
this.$="Epsilon";
break;
case 87:
this.$=instruccionesAPI.nuevoID($$[$0-4], $$[$0-3], $$[$0-1], $$[$0]);
break;
case 90:
this.$="undefined";
break;
case 93:
this.$={tipo:"infer", isArray:false};
break;
case 94: case 95: case 96:
 this.$=instruccionesAPI.nuevoTipo($$[$0-1],$$[$0]); 
break;
case 97:
 this.$ = instruccionesAPI.nuevoTipo($$[$0-1], $$[$0]);
break;
case 98:
this.$=instruccionesAPI.nuevoTipo($$[$0], false);
break;
case 99:
this.$=instruccionesAPI.nuevaDimension($$[$0]);
break;
case 100:
this.$=false;
break;
case 101:
this.$=$$[$0-1];
break;
case 103:
this.$=instruccionesAPI.nuevoObjAtributo($$[$0-3], $$[$0-1], $$[$0]);
break;
case 106: case 108:
this.$=instruccionesAPI.nuevoDato($$[$0-1], $$[$0]);
break;
case 110:
this.$=instruccionesAPI.nuevoType($$[$0-5],$$[$0-2], _$[$0-5].first_line, _$[$0-5].first_column);
break;
case 111:
this.$=instruccionesAPI.nuevoTypeAtributo($$[$0-2], $$[$0-1], $$[$0]);
break;
case 114:
 this.$ = $$[$0];
break;
case 115:
 this.$ = "Epsilon"; 
break;
case 116:
this.$ = instruccionesAPI.nuevoElseIf($$[$0-5], $$[$0-2], $$[$0]);
break;
case 117:
this.$ =  instruccionesAPI.nuevoElse($$[$0-1]);
break;
case 118:
this.$=instruccionesAPI.nuevoCase($$[$0-3], $$[$0-1], $$[$0]);
break;
case 119:
this.$=instruccionesAPI.nuevoDefault($$[$0]);
break;
case 121:
this.$ = instruccionesAPI.nuevaDeclaracion($$[$0-5], $$[$0-4], $$[$0-3], $$[$0-1], "Epsilon");
break;
case 122:
this.$ = instruccionesAPI.nuevaAsignacion($$[$0-3], $$[$0-1]);
break;
case 126: case 128:
this.$=instruccionesAPI.nuevoParametro($$[$0-1], $$[$0-2], $$[$0]);
break;
case 132:
this.$=instruccionesAPI.nuevoArrayIndex($$[$0-2], $$[$0]);
break;
case 133:
this.$="false";
break;
case 134:
this.$=instruccionesAPI.nuevaReferencia($$[$0-1], $$[$0], _$[$0-1].first_column, _$[$0-1].first_line);
break;
case 135:
this.$=instruccionesAPI.nuevoAccPosicion($$[$0-2], $$[$0], _$[$0-3].first_column, _$[$0-3].first_line);
break;
case 136:
this.$=instruccionesAPI.nuevoAccAtributo($$[$0-1], $$[$0], _$[$0-1].first_column, _$[$0-1].first_line);
break;
case 137:
this.$=instruccionesAPI.nuevoPop(_$[$0-2].first_column, _$[$0-2].first_line);
break;
case 138:
this.$=instruccionesAPI.nuevoLength(_$[$0].first_column, _$[$0].first_line);
break;
case 139:
this.$=instruccionesAPI.nuevoPush($$[$0-1], _$[$0-3].first_column, _$[$0-3].first_line);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:$V1,17:$V2,21:$V3,23:$V4,25:$V5,27:$V6,29:15,31:$V7,32:$V8,33:$V9,38:$Va,45:$Vb,46:$Vc,47:$Vd,82:$Ve,93:$Vf},{1:[3]},{2:$V0,5:[1,23],6:24,7:4,8:5,9:$V1,17:$V2,21:$V3,23:$V4,25:$V5,27:$V6,29:15,31:$V7,32:$V8,33:$V9,38:$Va,45:$Vb,46:$Vc,47:$Vd,82:$Ve,93:$Vf},o($Vg,[2,3]),o($Vg,[2,4]),o($Vg,[2,5]),{10:[1,25]},{18:[1,26]},{10:[1,27]},{10:[1,28]},{10:[1,29]},{13:[1,30]},{25:[1,31]},o($Vh,$Vi,{102:33,10:[1,32],18:$Vj,72:$Vk}),{10:$Vl,11:37,13:$Vm,20:$Vn,25:$Vo,29:51,39:36,49:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:49,72:$Vy,76:$Vz},{20:[1,59],40:[1,54],41:[1,55],42:[1,56],43:[1,57],44:[1,58]},{20:[1,60]},{20:[1,61]},{10:[1,62]},{25:[1,63]},{25:[1,64]},{20:[1,65]},{25:[1,66]},{1:[2,1]},o($Vg,[2,2]),{10:$Vl,11:67,13:$Vm,25:$Vo,29:51,49:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:49,72:$Vy,76:$Vz},{19:[1,68]},{10:$Vl,11:69,13:$Vm,25:$Vo,29:51,49:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:49,72:$Vy,76:$Vz},{24:70,25:$VA,27:[1,71]},{10:$Vl,11:73,13:$Vm,25:$Vo,29:51,49:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:49,72:$Vy,76:$Vz},{2:$V0,7:76,9:$VB,14:74,17:$VC,21:$VD,23:$VE,25:$VF,27:$V6,29:85,31:$VG,32:$VH,38:$VI,45:$VJ,46:$VK,47:$VL,48:75,82:$Ve},{10:[1,89]},{10:$Vl,11:91,12:$VM,13:$Vm,25:$Vo,29:51,37:90,49:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:49,72:$Vy,76:$Vz},o($VN,[2,134]),{10:$Vl,11:92,13:$Vm,25:$Vo,29:51,49:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:49,72:$Vy,76:$Vz},{25:[1,93],103:[1,94],104:[1,95],105:[1,96]},{20:[1,97]},{20:[2,130],49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,59:$VY,60:$VZ,61:$V_,62:$V$,75:$V01},{10:$Vl,11:113,13:$Vm,25:$Vo,29:51,49:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:49,72:$Vy,76:$Vz},{10:$Vl,11:114,13:$Vm,25:$Vo,29:51,49:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:49,72:$Vy,76:$Vz},{10:$Vl,11:115,13:$Vm,25:$Vo,29:51,49:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:49,72:$Vy,76:$Vz},o($V11,[2,65]),o($V11,[2,66]),o($V11,$Vi,{102:33,10:[1,116],18:$Vj,72:$Vk}),o($V11,[2,68]),o($V11,[2,69]),o($V11,[2,70]),o($V11,[2,71]),o($V11,[2,72]),o($V11,[2,73]),{10:$Vl,11:118,13:$Vm,25:$Vo,29:51,49:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:49,72:$Vy,73:117,74:[2,107],76:$Vz},o($V11,[2,75]),o($V11,[2,77]),{15:[1,120],25:$V21,90:119},{10:$Vl,11:122,13:$Vm,25:$Vo,29:51,49:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:49,72:$Vy,76:$Vz},{20:[1,123]},{20:[1,124]},{10:$Vl,11:125,13:$Vm,25:$Vo,29:51,49:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:49,72:$Vy,76:$Vz},{10:$Vl,11:126,13:$Vm,25:$Vo,29:51,49:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:49,72:$Vy,76:$Vz},o($Vg,[2,22]),o($Vg,[2,23]),o($Vg,[2,24]),{12:[1,127]},o($V31,$V41,{79:128,35:$V51}),o($V31,$V41,{79:130,35:$V51}),o($V61,[2,84]),{40:[1,131]},{12:[1,132],49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,59:$VY,60:$VZ,61:$V_,62:$V$,75:$V01},{10:[1,133]},{12:[1,134],49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,59:$VY,60:$VZ,61:$V_,62:$V$,75:$V01},{10:$Vl,11:135,13:$Vm,25:$Vo,29:51,49:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:49,72:$Vy,76:$Vz},{25:[1,136]},{40:[1,137]},{12:[1,138],49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,59:$VY,60:$VZ,61:$V_,62:$V$,75:$V01},{2:$V0,7:76,9:$VB,15:[1,139],17:$VC,21:$VD,23:$VE,25:$VF,27:$V6,29:85,31:$VG,32:$VH,38:$VI,45:$VJ,46:$VK,47:$VL,48:140,82:$Ve},o($V71,[2,27]),o($V71,[2,28]),{10:[1,141]},{18:[1,142]},{10:[1,143]},{10:[1,144]},{10:[1,145]},{13:[1,146]},o($Vh,$Vi,{102:33,10:[1,147],18:$Vj,72:$Vk}),{10:$Vl,11:37,13:$Vm,20:$Vn,25:$Vo,29:51,39:148,49:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:49,72:$Vy,76:$Vz},{20:[1,154],40:[1,149],41:[1,150],42:[1,151],43:[1,152],44:[1,153]},{20:[1,155]},{20:[1,156]},{10:[1,157]},{12:[2,127],25:[1,159],34:158},{12:[1,160]},{12:$V81,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,59:$VY,60:$VZ,61:$V_,62:$V$,75:$V01,77:161,78:$V91},{49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,59:$VY,60:$VZ,61:$V_,62:$V$,74:[1,163],75:$V01},o($VN,$Vi,{102:164,18:$Vj,72:$Vk}),{10:[1,165]},o($VN,[2,138]),{10:[1,166]},o($Vg,[2,16]),{10:$Vl,11:167,13:$Vm,25:$Vo,29:51,49:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:49,72:$Vy,76:$Vz},{10:$Vl,11:168,13:$Vm,25:$Vo,29:51,49:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:49,72:$Vy,76:$Vz},{10:$Vl,11:169,13:$Vm,25:$Vo,29:51,49:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:49,72:$Vy,76:$Vz},{10:$Vl,11:170,13:$Vm,25:$Vo,29:51,49:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:49,72:$Vy,76:$Vz},{10:$Vl,11:171,13:$Vm,25:$Vo,29:51,49:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:49,72:$Vy,76:$Vz},{10:$Vl,11:172,13:$Vm,25:$Vo,29:51,49:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:49,72:$Vy,76:$Vz},{10:$Vl,11:173,13:$Vm,25:$Vo,29:51,49:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:49,72:$Vy,76:$Vz},{10:$Vl,11:174,13:$Vm,25:$Vo,29:51,49:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:49,72:$Vy,76:$Vz},{10:$Vl,11:175,13:$Vm,25:$Vo,29:51,49:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:49,72:$Vy,76:$Vz},{10:$Vl,11:176,13:$Vm,25:$Vo,29:51,49:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:49,72:$Vy,76:$Vz},{10:$Vl,11:177,13:$Vm,25:$Vo,29:51,49:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:49,72:$Vy,76:$Vz},{10:$Vl,11:178,13:$Vm,25:$Vo,29:51,49:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:49,72:$Vy,76:$Vz},{10:$Vl,11:179,13:$Vm,25:$Vo,29:51,49:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:49,72:$Vy,76:$Vz},{10:$Vl,11:180,13:$Vm,25:$Vo,29:51,49:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:49,72:$Vy,76:$Vz},{10:$Vl,11:181,13:$Vm,25:$Vo,29:51,49:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:49,72:$Vy,76:$Vz},o($V11,[2,48]),o($V11,[2,63]),{12:[1,182],49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,59:$VY,60:$VZ,61:$V_,62:$V$,75:$V01},{10:$Vl,11:91,12:$VM,13:$Vm,25:$Vo,29:51,37:183,49:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:49,72:$Vy,76:$Vz},{74:[1,184]},{49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,59:$VY,60:$VZ,61:$V_,62:$V$,74:$Va1,75:$V01,78:$Vb1,92:185},{15:[1,187]},o($V11,[2,102]),{35:[1,188]},{20:[1,189],49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,59:$VY,60:$VZ,61:$V_,62:$V$,75:$V01},o($Vg,[2,18]),o($Vg,[2,19]),{20:[1,190],49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,59:$VY,60:$VZ,61:$V_,62:$V$,75:$V01},{20:[1,191],49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,59:$VY,60:$VZ,61:$V_,62:$V$,75:$V01},{20:[1,192]},o($Vc1,$Vd1,{80:193,40:$Ve1}),{25:$Vf1,36:195,85:$Vg1,87:$Vh1,88:$Vi1,89:$Vj1},o($Vc1,$Vd1,{80:201,40:$Ve1}),{13:[1,202]},{13:[1,203]},{10:$Vl,11:204,13:$Vm,25:$Vo,29:51,49:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:49,72:$Vy,76:$Vz},{13:[1,205]},{20:[1,206],49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,59:$VY,60:$VZ,61:$V_,62:$V$,75:$V01},{28:[1,207],30:[1,208],35:$V51,40:$V41,79:209},{10:$Vl,11:210,13:$Vm,25:$Vo,29:51,49:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:49,72:$Vy,76:$Vz},{13:[1,211]},{31:[1,212]},o($V71,[2,26]),{10:$Vl,11:213,13:$Vm,25:$Vo,29:51,49:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:49,72:$Vy,76:$Vz},{19:[1,214]},{10:$Vl,11:215,13:$Vm,25:$Vo,29:51,49:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:49,72:$Vy,76:$Vz},{24:216,25:$VA,27:[1,217]},{10:$Vl,11:218,13:$Vm,25:$Vo,29:51,49:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:49,72:$Vy,76:$Vz},{2:$V0,7:76,9:$VB,14:219,17:$VC,21:$VD,23:$VE,25:$VF,27:$V6,29:85,31:$VG,32:$VH,38:$VI,45:$VJ,46:$VK,47:$VL,48:75,82:$Ve},{10:$Vl,11:91,12:$VM,13:$Vm,25:$Vo,29:51,37:220,49:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:49,72:$Vy,76:$Vz},{20:[1,221]},{10:$Vl,11:222,13:$Vm,25:$Vo,29:51,49:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:49,72:$Vy,76:$Vz},{20:[1,223]},{20:[1,224]},{10:$Vl,11:225,13:$Vm,25:$Vo,29:51,49:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:49,72:$Vy,76:$Vz},{10:$Vl,11:226,13:$Vm,25:$Vo,29:51,49:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:49,72:$Vy,76:$Vz},o($V71,[2,44]),o($V71,[2,45]),o($V71,[2,46]),{12:[1,227]},{12:[1,228]},o($Vk1,$V41,{79:229,35:$V51}),{20:[1,230]},{12:[2,78]},{10:$Vl,11:231,13:$Vm,25:$Vo,29:51,49:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:49,72:$Vy,76:$Vz},o($VN,$Vi,{102:232,18:$Vj,72:$Vk}),o($VN,[2,136]),{12:[1,233]},{10:$Vl,11:234,13:$Vm,25:$Vo,29:51,49:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:49,72:$Vy,76:$Vz},o($Vl1,[2,49],{51:$VQ,52:$VR,53:$VS,54:$VT}),o($Vl1,[2,50],{51:$VQ,52:$VR,53:$VS,54:$VT}),o($Vm1,[2,51],{53:$VS,54:$VT}),o($Vm1,[2,52],{53:$VS,54:$VT}),o($V11,[2,53]),o($V11,[2,54]),o($Vn1,[2,55],{49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT}),o($Vn1,[2,56],{49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT}),o($Vn1,[2,57],{49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT}),o($Vn1,[2,58],{49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT}),o($Vo1,[2,59],{49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX}),o($Vo1,[2,60],{49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX}),o([12,15,20,35,61,62,74,75,78],[2,61],{49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,59:$VY,60:$VZ}),o([12,15,20,35,62,74,75,78],[2,62],{49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,59:$VY,60:$VZ,61:$V_}),{35:[1,235],49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,59:$VY,60:$VZ,61:$V_,62:$V$,75:$V01},o($V11,[2,64]),{12:[1,236]},o($V11,[2,74]),{74:[2,106]},{10:$Vl,11:237,13:$Vm,25:$Vo,29:51,49:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:49,72:$Vy,76:$Vz},o($V11,[2,101]),{10:$Vl,11:238,13:$Vm,25:$Vo,29:51,49:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:49,72:$Vy,76:$Vz},o($Vg,[2,17]),o($Vg,[2,20]),o($Vg,[2,21]),o($Vg,[2,25]),{20:$Vp1,78:$Vq1,81:239},{10:$Vl,11:241,13:$Vm,25:$Vo,29:51,49:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:49,72:$Vy,76:$Vz},o([12,15,20,40,78],[2,92]),o($Vr1,$Vs1,{86:242,72:$Vt1}),o($Vr1,$Vs1,{86:244,72:$Vt1}),o($Vr1,$Vs1,{86:245,72:$Vt1}),o($Vr1,$Vs1,{86:246,72:$Vt1}),o($Vr1,[2,98]),{20:$Vp1,78:$Vq1,81:247},{25:$Vu1,94:248},{2:$V0,7:76,9:$VB,14:250,17:$VC,21:$VD,23:$VE,25:$VF,27:$V6,29:85,31:$VG,32:$VH,38:$VI,45:$VJ,46:$VK,47:$VL,48:75,82:$Ve},{12:[1,251],49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,59:$VY,60:$VZ,61:$V_,62:$V$,75:$V01},{15:$Vv1,22:252,98:$Vw1,99:$Vx1},{25:[1,255]},{25:$Vy1,29:256},{25:$Vy1,29:258},{40:[1,259]},{20:[1,260],49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,59:$VY,60:$VZ,61:$V_,62:$V$,75:$V01},{2:$V0,7:76,9:$VB,14:261,17:$VC,21:$VD,23:$VE,25:$VF,27:$V6,29:85,31:$VG,32:$VH,38:$VI,45:$VJ,46:$VK,47:$VL,48:75,82:$Ve},{10:[1,262]},{12:[1,263],49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,59:$VY,60:$VZ,61:$V_,62:$V$,75:$V01},{10:[1,264]},{12:[1,265],49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,59:$VY,60:$VZ,61:$V_,62:$V$,75:$V01},{10:$Vl,11:266,13:$Vm,25:$Vo,29:51,49:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:49,72:$Vy,76:$Vz},{25:[1,267]},{12:[1,268],49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,59:$VY,60:$VZ,61:$V_,62:$V$,75:$V01},{2:$V0,7:76,9:$VB,15:[1,269],17:$VC,21:$VD,23:$VE,25:$VF,27:$V6,29:85,31:$VG,32:$VH,38:$VI,45:$VJ,46:$VK,47:$VL,48:140,82:$Ve},{12:[1,270]},o($V71,[2,38]),{20:[1,271],49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,59:$VY,60:$VZ,61:$V_,62:$V$,75:$V01},o($V71,[2,40]),o($V71,[2,41]),{20:[1,272],49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,59:$VY,60:$VZ,61:$V_,62:$V$,75:$V01},{20:[1,273],49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,59:$VY,60:$VZ,61:$V_,62:$V$,75:$V01},{20:[1,274]},{35:[1,275]},{12:$Vz1,78:$VA1,100:276},o($Vg,[2,15]),{12:$V81,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,59:$VY,60:$VZ,61:$V_,62:$V$,75:$V01,77:278,78:$V91},o($VN,[2,135]),o($VN,[2,137]),{12:[1,279],49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,59:$VY,60:$VZ,61:$V_,62:$V$,75:$V01},{10:$Vl,11:280,13:$Vm,25:$Vo,29:51,49:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:49,72:$Vy,76:$Vz},o($V11,[2,67]),{49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,59:$VY,60:$VZ,61:$V_,62:$V$,74:$Va1,75:$V01,78:$Vb1,92:281},{15:[2,105],49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,59:$VY,60:$VZ,61:$V_,62:$V$,75:$V01,78:[1,283],91:282},{20:[1,284]},{25:[1,285]},o($Vc1,[2,89],{49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,59:$VY,60:$VZ,61:$V_,62:$V$,75:$V01}),o($Vr1,[2,94]),{74:[1,286]},o($Vr1,[2,95]),o($Vr1,[2,96]),o($Vr1,[2,97]),{20:[1,287]},{15:[1,288]},o([15,78],$V41,{79:289,35:$V51}),{2:$V0,7:76,9:$VB,15:[1,290],17:$VC,21:$VD,23:$VE,25:$VF,27:$V6,29:85,31:$VG,32:$VH,38:$VI,45:$VJ,46:$VK,47:$VL,48:140,82:$Ve},{20:[1,291]},{15:[1,292]},{10:$Vl,11:293,13:$Vm,25:$Vo,29:51,49:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:49,72:$Vy,76:$Vz},{35:[1,294]},{26:295,40:$VB1,41:$VC1,42:$VD1},{12:[1,299]},{12:$Vi,18:$Vj,72:$Vk,102:33},{12:[1,300]},{10:$Vl,11:301,13:$Vm,25:$Vo,29:51,49:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:49,72:$Vy,76:$Vz},o($VE1,[2,122]),{2:$V0,7:76,9:$VB,15:[1,302],17:$VC,21:$VD,23:$VE,25:$VF,27:$V6,29:85,31:$VG,32:$VH,38:$VI,45:$VJ,46:$VK,47:$VL,48:140,82:$Ve},{10:$Vl,11:303,13:$Vm,25:$Vo,29:51,49:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:49,72:$Vy,76:$Vz},{13:[1,304]},{10:$Vl,11:305,13:$Vm,25:$Vo,29:51,49:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:49,72:$Vy,76:$Vz},{13:[1,306]},{20:[1,307],49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,59:$VY,60:$VZ,61:$V_,62:$V$,75:$V01},{28:[1,308],30:[1,309],35:$V51,40:$V41,79:209},{13:[1,310]},{31:[1,311]},{20:[1,312]},o($V71,[2,39]),o($V71,[2,42]),o($V71,[2,43]),o($V71,[2,47]),{25:$Vf1,36:313,85:$Vg1,87:$Vh1,88:$Vi1,89:$Vj1},{12:[2,126]},{25:[1,314]},{12:[2,80]},o($VN,[2,139]),o([12,15,20,35,74,75,78],[2,76],{49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,59:$VY,60:$VZ,61:$V_,62:$V$}),{74:[2,108]},{15:[2,103]},{25:$V21,90:315},o($V61,[2,82]),o($V31,$V41,{79:316,35:$V51}),o($Vr1,$Vs1,{86:317,72:$Vt1}),o($V61,[2,83]),{20:[1,318]},{15:[2,113],78:[1,320],95:319},o($Vg,$VF1,{16:321,96:$VG1}),o($Vg,[2,7]),o($Vg,[2,8]),{35:[1,323],49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,59:$VY,60:$VZ,61:$V_,62:$V$,75:$V01},{2:$V0,7:76,9:$VB,14:324,17:$VC,21:$VD,23:$VE,25:$VF,27:$V6,29:85,31:$VG,32:$VH,38:$VI,45:$VJ,46:$VK,47:$VL,48:75,82:$Ve},{12:[1,325]},{12:[2,123]},{12:[2,124]},{10:$Vl,11:326,13:$Vm,25:$Vo,29:51,49:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:49,72:$Vy,76:$Vz},{13:[1,327]},{13:[1,328]},{20:[1,329],49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,59:$VY,60:$VZ,61:$V_,62:$V$,75:$V01},o($Vg,[2,12]),{12:[1,330],49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,59:$VY,60:$VZ,61:$V_,62:$V$,75:$V01},{2:$V0,7:76,9:$VB,14:331,17:$VC,21:$VD,23:$VE,25:$VF,27:$V6,29:85,31:$VG,32:$VH,38:$VI,45:$VJ,46:$VK,47:$VL,48:75,82:$Ve},{12:[1,332],49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,59:$VY,60:$VZ,61:$V_,62:$V$,75:$V01},{15:$Vv1,22:333,98:$Vw1,99:$Vx1},{25:[1,334]},{25:$Vy1,29:335},{25:$Vy1,29:336},{2:$V0,7:76,9:$VB,14:337,17:$VC,21:$VD,23:$VE,25:$VF,27:$V6,29:85,31:$VG,32:$VH,38:$VI,45:$VJ,46:$VK,47:$VL,48:75,82:$Ve},{10:[1,338]},o($V71,[2,37]),{13:[1,339]},o($Vk1,$V41,{79:340,35:$V51}),{15:[2,104]},o($Vc1,$Vd1,{80:341,40:$Ve1}),o($Vr1,[2,99]),o($Vg,[2,110]),{15:[2,111]},{25:$Vu1,94:342},o($Vg,[2,6]),{9:[1,344],13:[1,345],97:343},{2:$V0,7:76,9:$VB,14:346,17:$VC,21:$VD,23:$VE,25:$VF,27:$V6,29:85,31:$VG,32:$VH,38:$VI,45:$VJ,46:$VK,47:$VL,48:75,82:$Ve},{2:$V0,7:76,9:$VB,15:[2,119],17:$VC,21:$VD,23:$VE,25:$VF,27:$V6,29:85,31:$VG,32:$VH,38:$VI,45:$VJ,46:$VK,47:$VL,48:140,82:$Ve},{13:[1,347]},{12:[2,125],49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,59:$VY,60:$VZ,61:$V_,62:$V$,75:$V01},{2:$V0,7:76,9:$VB,14:348,17:$VC,21:$VD,23:$VE,25:$VF,27:$V6,29:85,31:$VG,32:$VH,38:$VI,45:$VJ,46:$VK,47:$VL,48:75,82:$Ve},{2:$V0,7:76,9:$VB,14:349,17:$VC,21:$VD,23:$VE,25:$VF,27:$V6,29:85,31:$VG,32:$VH,38:$VI,45:$VJ,46:$VK,47:$VL,48:75,82:$Ve},o($VE1,[2,121]),{20:[1,350]},{2:$V0,7:76,9:$VB,15:[1,351],17:$VC,21:$VD,23:$VE,25:$VF,27:$V6,29:85,31:$VG,32:$VH,38:$VI,45:$VJ,46:$VK,47:$VL,48:140,82:$Ve},{20:[1,352]},{15:[1,353]},{26:354,40:$VB1,41:$VC1,42:$VD1},{12:[1,355]},{12:[1,356]},{2:$V0,7:76,9:$VB,15:[1,357],17:$VC,21:$VD,23:$VE,25:$VF,27:$V6,29:85,31:$VG,32:$VH,38:$VI,45:$VJ,46:$VK,47:$VL,48:140,82:$Ve},{10:$Vl,11:358,13:$Vm,25:$Vo,29:51,49:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:49,72:$Vy,76:$Vz},{2:$V0,4:359,6:3,7:4,8:5,9:$V1,17:$V2,21:$V3,23:$V4,25:$V5,27:$V6,29:15,31:$V7,32:$V8,33:$V9,38:$Va,45:$Vb,46:$Vc,47:$Vd,82:$Ve,93:$Vf},{12:$Vz1,78:$VA1,100:360},{20:$Vp1,78:$Vq1,81:361},{15:[2,112]},o($V61,[2,114]),{10:[1,362]},{2:$V0,7:76,9:$VB,14:363,17:$VC,21:$VD,23:$VE,25:$VF,27:$V6,29:85,31:$VG,32:$VH,38:$VI,45:$VJ,46:$VK,47:$VL,48:75,82:$Ve},{2:$V0,7:76,9:$VB,15:$Vv1,17:$VC,21:$VD,22:364,23:$VE,25:$VF,27:$V6,29:85,31:$VG,32:$VH,38:$VI,45:$VJ,46:$VK,47:$VL,48:140,82:$Ve,98:$Vw1,99:$Vx1},{2:$V0,7:76,9:$VB,14:365,17:$VC,21:$VD,23:$VE,25:$VF,27:$V6,29:85,31:$VG,32:$VH,38:$VI,45:$VJ,46:$VK,47:$VL,48:75,82:$Ve},{2:$V0,7:76,9:$VB,15:[1,366],17:$VC,21:$VD,23:$VE,25:$VF,27:$V6,29:85,31:$VG,32:$VH,38:$VI,45:$VJ,46:$VK,47:$VL,48:140,82:$Ve},{2:$V0,7:76,9:$VB,15:[1,367],17:$VC,21:$VD,23:$VE,25:$VF,27:$V6,29:85,31:$VG,32:$VH,38:$VI,45:$VJ,46:$VK,47:$VL,48:140,82:$Ve},o($Vg,[2,13]),o($V71,$VF1,{16:368,96:$VG1}),o($V71,[2,30]),o($V71,[2,31]),{12:[1,369]},{13:[1,370]},{13:[1,371]},o($V71,[2,35]),{12:[1,372],49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,59:$VY,60:$VZ,61:$V_,62:$V$,75:$V01},{2:$V0,6:24,7:4,8:5,9:$V1,15:[1,373],17:$V2,21:$V3,23:$V4,25:$V5,27:$V6,29:15,31:$V7,32:$V8,33:$V9,38:$Va,45:$Vb,46:$Vc,47:$Vd,82:$Ve,93:$Vf},{12:[2,128]},{20:[2,85]},{10:$Vl,11:374,13:$Vm,25:$Vo,29:51,49:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:49,72:$Vy,76:$Vz},{2:$V0,7:76,9:$VB,15:[1,375],17:$VC,21:$VD,23:$VE,25:$VF,27:$V6,29:85,31:$VG,32:$VH,38:$VI,45:$VJ,46:$VK,47:$VL,48:140,82:$Ve},{15:[2,118]},{2:$V0,7:76,9:$VB,15:[1,376],17:$VC,21:$VD,23:$VE,25:$VF,27:$V6,29:85,31:$VG,32:$VH,38:$VI,45:$VJ,46:$VK,47:$VL,48:140,82:$Ve},o($Vg,[2,10]),o($Vg,[2,11]),o($V71,[2,29]),{13:[1,377]},{2:$V0,7:76,9:$VB,14:378,17:$VC,21:$VD,23:$VE,25:$VF,27:$V6,29:85,31:$VG,32:$VH,38:$VI,45:$VJ,46:$VK,47:$VL,48:75,82:$Ve},{2:$V0,7:76,9:$VB,14:379,17:$VC,21:$VD,23:$VE,25:$VF,27:$V6,29:85,31:$VG,32:$VH,38:$VI,45:$VJ,46:$VK,47:$VL,48:75,82:$Ve},{20:[1,380]},o($Vg,[2,14]),{12:[1,381],49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW,58:$VX,59:$VY,60:$VZ,61:$V_,62:$V$,75:$V01},o($V61,[2,117]),o($Vg,[2,9]),{2:$V0,7:76,9:$VB,14:382,17:$VC,21:$VD,23:$VE,25:$VF,27:$V6,29:85,31:$VG,32:$VH,38:$VI,45:$VJ,46:$VK,47:$VL,48:75,82:$Ve},{2:$V0,7:76,9:$VB,15:[1,383],17:$VC,21:$VD,23:$VE,25:$VF,27:$V6,29:85,31:$VG,32:$VH,38:$VI,45:$VJ,46:$VK,47:$VL,48:140,82:$Ve},{2:$V0,7:76,9:$VB,15:[1,384],17:$VC,21:$VD,23:$VE,25:$VF,27:$V6,29:85,31:$VG,32:$VH,38:$VI,45:$VJ,46:$VK,47:$VL,48:140,82:$Ve},o($V71,[2,36]),{13:[1,385]},{2:$V0,7:76,9:$VB,15:[1,386],17:$VC,21:$VD,23:$VE,25:$VF,27:$V6,29:85,31:$VG,32:$VH,38:$VI,45:$VJ,46:$VK,47:$VL,48:140,82:$Ve},o($V71,[2,33]),o($V71,[2,34]),{2:$V0,7:76,9:$VB,14:387,17:$VC,21:$VD,23:$VE,25:$VF,27:$V6,29:85,31:$VG,32:$VH,38:$VI,45:$VJ,46:$VK,47:$VL,48:75,82:$Ve},o($V71,[2,32]),{2:$V0,7:76,9:$VB,15:[1,388],17:$VC,21:$VD,23:$VE,25:$VF,27:$V6,29:85,31:$VG,32:$VH,38:$VI,45:$VJ,46:$VK,47:$VL,48:140,82:$Ve},o($V61,$VF1,{16:389,96:$VG1}),o($V61,[2,116])],
defaultActions: {23:[2,1],161:[2,78],185:[2,106],276:[2,126],278:[2,80],281:[2,108],282:[2,103],296:[2,123],297:[2,124],315:[2,104],319:[2,111],342:[2,112],360:[2,128],361:[2,85],364:[2,118]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	const TIPO_OPERACION	= require('./instrucciones').TIPO_OPERACION;
	const TIPO_VALOR 		= require('./instrucciones').TIPO_VALOR;
	const instruccionesAPI	= require('./instrucciones').instruccionesAPI;
	const TIPO_DATO = require('./instrucciones').TIPO_DATO;
	const TS = require('./instrucciones').TS;
	var salida=[];
	var ArrayDeErrores = [];
	var currentType="";
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 85;
break;
case 1:return 88;
break;
case 2:return 87;
break;
case 3:return 27;
break;
case 4:return 82;
break;
case 5:return 17;
break;
case 6:return 19;
break;
case 7:return 67;
break;
case 8:return 66;
break;
case 9:return 9;
break;
case 10:return 96;
break;
case 11:return 21;
break;
case 12:return 98;
break;
case 13:return 99;
break;
case 14:return 45;
break;
case 15:return 46;
break;
case 16:return 31;
break;
case 17:return 32;
break;
case 18:return 23;
break;
case 19:return 89;
break;
case 20:return 38;
break;
case 21:return 105;
break;
case 22:return 103;
break;
case 23:return 104;
break;
case 24:return 93;
break;
case 25:return 28;
break;
case 26:return 30;
break;
case 27:return 33 ;
break;
case 28:return 76;
break;
case 29:return "R_GRAFICAR_TS";
break;
case 30: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 68;
break;
case 31: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 69;
break;
case 32: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 70;
break;
case 33:return 65;
break;
case 34:return 64;
break;
case 35:return 25;
break;
case 36:
break;
case 37:// comentario simple línea
break;
case 38:// comentario multiple líneas
break;
case 39:return 41;
break;
case 40:return 42;
break;
case 41:return 43;
break;
case 42:return 50;
break;
case 43:return 44;
break;
case 44:return 49;
break;
case 45:return 53;
break;
case 46:return 51;
break;
case 47:return 52;
break;
case 48:return 54;
break;
case 49:return 59;
break;
case 50:return 60;
break;
case 51:return 40;
break;
case 52:return 57;
break;
case 53:return 55;
break;
case 54:return 58;
break;
case 55:return 56;
break;
case 56:return 61;
break;
case 57:return 62;
break;
case 58:return 63;
break;
case 59:return 13;
break;
case 60:return 15;
break;
case 61:return 10;
break;
case 62:return 12;
break;
case 63:return 72;
break;
case 64:return 74;
break;
case 65:return 20;
break;
case 66:return 35;
break;
case 67:return 18;
break;
case 68:return 78;
break;
case 69:return 75;
break;
case 70:return 5;
break;
case 71: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
						 salida.push('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
						 ArrayDeErrores.push({tipo:"léxico", linea:yy_.yylloc.first_line, columna:yy_.yylloc.first_column, descripcion: yy_.yytext});
break;
}
},
rules: [/^(?:number\b)/,/^(?:boolean\b)/,/^(?:string\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:console\b)/,/^(?:log\b)/,/^(?:false\b)/,/^(?:true\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:void\b)/,/^(?:return\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:length\b)/,/^(?:type\b)/,/^(?:of\b)/,/^(?:in\b)/,/^(?:function\b)/,/^(?:null\b)/,/^(?:graficar_ts\b)/,/^(?:"(\\"|\\n|\\t|\\r|\\\\|[^\"])*")/,/^(?:'(\\'|\\n|\\t|\\r|\\\\|[^\'])*')/,/^(?:`(\\"|\\n|\\t|\\r|\\\\|[^\`])*`)/,/^(?:[0-9]+\.([0-9]+)?\b)/,/^(?:[0-9]+\b)/,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/,/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+=)/,/^(?:\+)/,/^(?:-=)/,/^(?:-)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:==)/,/^(?:!=)/,/^(?:=)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:;)/,/^(?::)/,/^(?:\.)/,/^(?:,)/,/^(?:\?)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}