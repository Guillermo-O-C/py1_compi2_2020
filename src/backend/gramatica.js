/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,17],$V1=[1,6],$V2=[1,7],$V3=[1,8],$V4=[1,9],$V5=[1,13],$V6=[1,15],$V7=[1,10],$V8=[1,11],$V9=[1,12],$Va=[1,14],$Vb=[1,16],$Vc=[1,18],$Vd=[2,5,9,15,17,21,23,25,27,30,31,32,37,74,84],$Ve=[2,119],$Vf=[1,30],$Vg=[1,35],$Vh=[1,45],$Vi=[2,117],$Vj=[1,38],$Vk=[1,33],$Vl=[1,34],$Vm=[1,36],$Vn=[1,37],$Vo=[1,39],$Vp=[1,40],$Vq=[1,41],$Vr=[1,42],$Vs=[1,44],$Vt=[1,55],$Vu=[1,61],$Vv=[1,62],$Vw=[1,63],$Vx=[1,64],$Vy=[1,67],$Vz=[1,65],$VA=[1,66],$VB=[1,68],$VC=[2,63],$VD=[1,76],$VE=[1,75],$VF=[1,77],$VG=[1,78],$VH=[1,79],$VI=[1,80],$VJ=[1,81],$VK=[1,82],$VL=[1,83],$VM=[1,84],$VN=[1,85],$VO=[1,86],$VP=[1,87],$VQ=[1,88],$VR=[1,89],$VS=[12,15,20,34,42,43,44,45,46,47,48,49,50,51,52,53,54,55,66,67,70],$VT=[1,99],$VU=[20,40,70],$VV=[2,78],$VW=[1,101],$VX=[2,9,15,17,21,23,25,27,30,31,37,74,84],$VY=[2,65],$VZ=[1,126],$V_=[2,93],$V$=[1,149],$V01=[20,70],$V11=[2,74],$V21=[1,153],$V31=[1,158],$V41=[1,155],$V51=[1,156],$V61=[1,157],$V71=[12,70],$V81=[12,15,20,34,42,43,48,49,50,51,52,53,54,55,66,67,70],$V91=[12,15,20,34,42,43,44,45,48,49,50,51,52,53,54,55,66,67,70],$Va1=[12,15,20,34,48,49,50,51,52,53,54,55,66,67,70],$Vb1=[12,15,20,34,54,55,66,67,70],$Vc1=[2,70],$Vd1=[1,193],$Ve1=[12,13,15,20,40,70],$Vf1=[2,84],$Vg1=[1,196],$Vh1=[1,202],$Vi1=[2,104],$Vj1=[1,206],$Vk1=[1,207],$Vl1=[2,113],$Vm1=[1,226],$Vn1=[1,248],$Vo1=[1,246],$Vp1=[1,247],$Vq1=[10,13,25,42,56,57,58,59,60,61,62,64],$Vr1=[2,99],$Vs1=[1,275];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaracion":7,"type":8,"R_IF":9,"ABRIR_PARENTESIS":10,"expresion":11,"CERRAR_PARENTESIS":12,"ABRIR_LLAVE":13,"sentencias":14,"CERRAR_LLAVE":15,"elseIf":16,"R_CONSOLE":17,"PUNTO":18,"R_LOG":19,"PUNTO_COMA":20,"R_SWITCH":21,"cases":22,"R_FOR":23,"for_init":24,"IDENTIFICADOR":25,"for_change":26,"R_LET":27,"R_OF":28,"R_IN":29,"R_WHILE":30,"R_DO":31,"R_FUNCTION":32,"parametros":33,"DOS_PUNTOS":34,"tipo":35,"argumentos":36,"R_RETURN":37,"retorno":38,"array_position":39,"IGUAL":40,"sentencia":41,"MENOS":42,"MAS":43,"MULTIPLICACION":44,"DIVISION":45,"POTENCIA":46,"MODULO":47,"MAYOR":48,"MENOR":49,"MAYOR_IGUAL":50,"MENOR_IGUAL":51,"IGUALDAD":52,"DISTINTO":53,"AND":54,"OR":55,"NOT":56,"ENTERO":57,"DECIMAL":58,"CARACTER":59,"R_TRUE":60,"R_FALSE":61,"CADENA":62,"objeto":63,"ABRIR_CORCHETE":64,"arrays":65,"CERRAR_CORCHETE":66,"OPERADOR_TERNARIO":67,"nuevoArrayIndex":68,"argumentos_P":69,"COMA":70,"definicion_tipo":71,"definicion":72,"listaID":73,"R_CONST":74,"listaIDConst":75,"definicion_const":76,"R_NUMBER":77,"declarar_array":78,"R_STRING":79,"R_BOOLEAN":80,"obj_atributos":81,"obj_atributos_pr":82,"arrays_pr":83,"R_TYPE":84,"type_atributos":85,"type_atributos_pr":86,"R_ELSE":87,"elseIf_P":88,"R_CASE":89,"R_DEFAULT":90,"INCREMENTO":91,"DECREMENTO":92,"parametros_pr":93,"opcional":94,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"R_IF",10:"ABRIR_PARENTESIS",12:"CERRAR_PARENTESIS",13:"ABRIR_LLAVE",15:"CERRAR_LLAVE",17:"R_CONSOLE",18:"PUNTO",19:"R_LOG",20:"PUNTO_COMA",21:"R_SWITCH",23:"R_FOR",25:"IDENTIFICADOR",27:"R_LET",28:"R_OF",29:"R_IN",30:"R_WHILE",31:"R_DO",32:"R_FUNCTION",34:"DOS_PUNTOS",37:"R_RETURN",40:"IGUAL",42:"MENOS",43:"MAS",44:"MULTIPLICACION",45:"DIVISION",46:"POTENCIA",47:"MODULO",48:"MAYOR",49:"MENOR",50:"MAYOR_IGUAL",51:"MENOR_IGUAL",52:"IGUALDAD",53:"DISTINTO",54:"AND",55:"OR",56:"NOT",57:"ENTERO",58:"DECIMAL",59:"CARACTER",60:"R_TRUE",61:"R_FALSE",62:"CADENA",64:"ABRIR_CORCHETE",66:"CERRAR_CORCHETE",67:"OPERADOR_TERNARIO",68:"nuevoArrayIndex",70:"COMA",74:"R_CONST",77:"R_NUMBER",79:"R_STRING",80:"R_BOOLEAN",84:"R_TYPE",87:"R_ELSE",89:"R_CASE",90:"R_DEFAULT",91:"INCREMENTO",92:"DECREMENTO"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,8],[6,7],[6,7],[6,11],[6,10],[6,10],[6,7],[6,9],[6,10],[6,5],[6,3],[6,5],[14,2],[14,1],[41,1],[41,1],[41,8],[41,7],[41,7],[41,11],[41,10],[41,10],[41,7],[41,9],[41,5],[41,3],[41,5],[11,2],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,2],[11,3],[11,1],[11,1],[11,1],[11,4],[11,1],[11,1],[11,1],[11,1],[11,1],[11,3],[11,5],[11,5],[36,2],[36,0],[69,3],[69,0],[7,6],[7,7],[7,2],[73,5],[73,0],[75,6],[75,0],[72,2],[72,0],[76,2],[76,1],[71,2],[71,0],[35,2],[35,2],[35,2],[35,2],[78,3],[78,0],[63,3],[63,2],[81,4],[82,2],[82,0],[65,2],[65,0],[83,3],[83,0],[8,7],[85,3],[86,2],[86,0],[16,2],[16,0],[88,8],[88,3],[22,7],[22,5],[22,0],[24,6],[24,4],[26,1],[26,1],[26,2],[33,3],[33,0],[93,4],[93,0],[94,1],[94,0],[38,1],[38,0],[39,4],[39,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		// cuado se haya reconocido la entrada completa retornamos el AST
		var temporal = salida;
		salida=[];
		var tempAr = ArrayDeErrores;
		ArrayDeErrores = [];
		return {AST: $$[$0-1], Errores: temporal};
	
break;
case 2: case 18:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3:
this.$=[$$[$0]];
break;
case 4: case 5: case 20: case 21: case 73: case 75: case 77: case 88: case 96: case 107: case 108: case 109: case 116:
this.$=$$[$0];
break;
case 6: case 22:
 this.$ = instruccionesAPI.nuevoIf($$[$0-5], $$[$0-2], $$[$0]);
break;
case 7: case 23:
this.$ = instruccionesAPI.nuevoImprimir($$[$0-2]);
break;
case 8: case 24:
this.$=instruccionesAPI.nuevoSwitch($$[$0-4], $$[$0-1]);
break;
case 9: case 25:
 this.$ = instruccionesAPI.nuevoFor($$[$0-8], $$[$0-7], $$[$0-4], $$[$0-1]);
break;
case 10: case 26:
this.$=instruccionesAPI.nuevoForOF($$[$0-6], $$[$0-4], $$[$0-1]);
break;
case 11: case 27:
this.$=instruccionesAPI.nuevoForIn($$[$0-6], $$[$0-4], $$[$0-1]);
break;
case 12: case 28:
this.$=instruccionesAPI.nuevoWhile($$[$0-4], $$[$0-1]);
break;
case 13: case 29:
this.$=instruccionesAPI.nuevoDoWhile($$[$0-6], $$[$0-2]);
break;
case 14:
  this.$ = instruccionesAPI.nuevaFuncion($$[$0-3], $$[$0-8], $$[$0-6], $$[$0-1]); 
break;
case 15: case 30:
this.$ = instruccionesAPI.nuevaLlamada($$[$0-4], $$[$0-2]);
break;
case 16: case 31:
this.$=instruccionesAPI.nuevoReturn($$[$0-1]);
break;
case 17:
this.$ = instruccionesAPI.nuevaAsignacion($$[$0-4], $$[$0-3], $$[$0-1]);
break;
case 19:
 this.$ = [$$[$0]]; 
break;
case 32:
this.$ = instruccionesAPI.nuevaAsignacion($$[$0-4], $$[$0-3],$$[$0-1]);
break;
case 33:
 this.$ = instruccionesAPI.nuevaOperacionUnaria($$[$0], TIPO_OPERACION.NEGATIVO); 
break;
case 34:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.SUMA); 
break;
case 35:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.RESTA); 
break;
case 36:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MULTIPLICACION); 
break;
case 37:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DIVISION); 
break;
case 38:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.POTENCIA); 
break;
case 39:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MODULO); 
break;
case 40:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR); 
break;
case 41:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR); 
break;
case 42:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR_IGUAL); 
break;
case 43:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR_IGUAL); 
break;
case 44:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.IGUAL_IGUAL); 
break;
case 45:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DISTINTO); 
break;
case 46:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.AND); 
break;
case 47:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.OR); 
break;
case 48:
this.$ =  instruccionesAPI.nuevaOperacionUnaria($$[$0], TIPO_OPERACION.NOT);
break;
case 49:
 this.$ = $$[$0-1]; 
break;
case 50:
 this.$ = instruccionesAPI.nuevoValor(Number($$[$0]), TIPO_VALOR.NUMERO); 
break;
case 51:
 this.$ = instruccionesAPI.nuevoValor(Number($$[$0]), TIPO_VALOR.DECIMAL); 
break;
case 52:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.IDENTIFICADOR); 
break;
case 53:
 this.$ = instruccionesAPI.nuevaLlamada($$[$0-3], $$[$0-1]); 
break;
case 54:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.CARACTER); 
break;
case 55:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.TRUE); 
break;
case 56:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.FALSE); 
break;
case 57:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.CADENA); 
break;
case 58:
 this.$ = instruccionesAPI.nuevoObjeto($$[$0]); 
break;
case 59:
 this.$ = instruccionesAPI.nuevoArray($$[$0-1]); 
break;
case 60:
this.$=instruccionesAPI.nuevoOperadorTernario($$[$0-4], $$[$0-2], $$[$0]);
break;
case 61:
this.$=instruccionesAPI.nuevoAccesoAPosicion($$[$0-4], $$[$0-2], $$[$0]);
break;
case 62: case 64:
this.$ = instruccionesAPI.nuevoArgumento($$[$0-1], $$[$0]);
break;
case 63:
this.$ = "NA";
break;
case 65:
this.$ =  "NM";
break;
case 66:
this.$ = instruccionesAPI.nuevaDeclaracion($$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1]);
break;
case 67:
this.$ = instruccionesAPI.nuevaDeclaracion($$[$0-6], $$[$0-5], $$[$0-4], $$[$0-2], $$[$0-1]);
break;
case 69:
this.$=instruccionesAPI.nuevoID($$[$0-3],$$[$0-2], $$[$0-1],$$[$0]);
break;
case 70: case 72: case 89: case 93: case 97: case 113:
this.$="NM";
break;
case 71:
this.$=instruccionesAPI.nuevoID($$[$0-4], $$[$0-3], $$[$0-1], $$[$0]);
break;
case 74:
this.$="undefined";
break;
case 76:
 console.error('Error sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column+' la declaración de un const tiene que ser inicializado.');	
break;
case 78:
this.$={tipo:"infer", isArray:"undefinied"};
break;
case 79: case 80: case 81:
 this.$=instruccionesAPI.nuevoTipo($$[$0-1],$$[$0]); 
break;
case 82:
 this.$ = instruccionesAPI.nuevoTipo($$[$0-1], $$[$0]);
break;
case 83:
this.$=instruccionesAPI.nuevaDimension($$[$0]);
break;
case 84: case 115:
this.$=false;
break;
case 85:
this.$=$$[$0-1];
break;
case 86: case 91: case 104: case 111: case 117:
this.$="NA";
break;
case 87:
this.$=instruccionesAPI.nuevoObjAtributo($$[$0-3], $$[$0-1], $$[$0]);
break;
case 90: case 92:
this.$=instruccionesAPI.nuevoDato($$[$0-1], $$[$0]);
break;
case 94:
this.$=instruccionesAPI.nuevoType($$[$0-5],$$[$0-2]);
break;
case 95:
this.$=instruccionesAPI.nuevoTypeAtributo($$[$0-2], $$[$0-1], $$[$0]);
break;
case 98:
 this.$ = $$[$0];
break;
case 99:
 this.$ = "NELSE"; 
break;
case 100:
this.$ = instruccionesAPI.nuevoElseIf($$[$0-5], $$[$0-2], $$[$0]);
break;
case 101:
this.$ =  instruccionesAPI.nuevoElse($$[$0-1]);
break;
case 102:
this.$=instruccionesAPI.nuevoCase($$[$0-5], $$[$0-2], $$[$0]);
break;
case 103:
this.$=instruccionesAPI.nuevoDefault($$[$0-1]);
break;
case 105:
this.$ = instruccionesAPI.nuevaDeclaracion($$[$0-5], $$[$0-4], $$[$0-1], $$[$0-3]);
break;
case 106:
this.$ = instruccionesAPI.nuevaAsignacion($$[$0-3], $$[$0-1]);
break;
case 110: case 112:
this.$=instruccionesAPI.nuevoParametro($$[$0-1], $$[$0-2], $$[$0]);
break;
case 114:
this.$=true;
break;
case 118:
this.$=instruccionesAPI.nuevoArrayIndex($$[$0-2], $$[$0]);
break;
case 119:
this.$="false";
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:$V1,17:$V2,21:$V3,23:$V4,25:$V5,27:$V6,30:$V7,31:$V8,32:$V9,37:$Va,74:$Vb,84:$Vc},{1:[3]},{2:$V0,5:[1,19],6:20,7:4,8:5,9:$V1,17:$V2,21:$V3,23:$V4,25:$V5,27:$V6,30:$V7,31:$V8,32:$V9,37:$Va,74:$Vb,84:$Vc},o($Vd,[2,3]),o($Vd,[2,4]),o($Vd,[2,5]),{10:[1,21]},{18:[1,22]},{10:[1,23]},{10:[1,24]},{10:[1,25]},{13:[1,26]},{25:[1,27]},{10:[1,28],39:29,40:$Ve,64:$Vf},{10:$Vg,11:32,13:$Vh,20:$Vi,25:$Vj,38:31,42:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:43,64:$Vs},{25:[1,46]},{25:[1,47]},{20:[1,48]},{25:[1,49]},{1:[2,1]},o($Vd,[2,2]),{10:$Vg,11:50,13:$Vh,25:$Vj,42:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:43,64:$Vs},{19:[1,51]},{10:$Vg,11:52,13:$Vh,25:$Vj,42:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:43,64:$Vs},{24:53,25:$Vt,27:[1,54]},{10:$Vg,11:56,13:$Vh,25:$Vj,42:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:43,64:$Vs},{2:$V0,7:59,8:60,9:$Vu,14:57,17:$Vv,21:$Vw,23:$Vx,25:$Vy,27:$V6,30:$Vz,31:$VA,37:$VB,41:58,74:$Vb,84:$Vc},{10:[1,69]},{10:$Vg,11:71,12:$VC,13:$Vh,25:$Vj,36:70,42:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:43,64:$Vs},{40:[1,72]},{10:$Vg,11:73,13:$Vh,25:$Vj,42:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:43,64:$Vs},{20:[1,74]},{20:[2,116],42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,67:$VR},{10:$Vg,11:90,13:$Vh,25:$Vj,42:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:43,64:$Vs},{10:$Vg,11:91,13:$Vh,25:$Vj,42:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:43,64:$Vs},{10:$Vg,11:92,13:$Vh,25:$Vj,42:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:43,64:$Vs},o($VS,[2,50]),o($VS,[2,51]),o($VS,[2,52],{10:[1,93],64:[1,94]}),o($VS,[2,54]),o($VS,[2,55]),o($VS,[2,56]),o($VS,[2,57]),o($VS,[2,58]),{10:$Vg,11:96,13:$Vh,25:$Vj,42:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:43,64:$Vs,65:95,66:[2,91]},{15:[1,98],25:$VT,81:97},o($VU,$VV,{71:100,34:$VW}),{34:$VW,40:$VV,71:102},o($Vd,[2,68]),{40:[1,103]},{12:[1,104],42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,67:$VR},{10:[1,105]},{12:[1,106],42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,67:$VR},{10:$Vg,11:107,13:$Vh,25:$Vj,42:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:43,64:$Vs},{25:[1,108]},{40:[1,109]},{12:[1,110],42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,67:$VR},{2:$V0,7:59,8:60,9:$Vu,15:[1,111],17:$Vv,21:$Vw,23:$Vx,25:$Vy,27:$V6,30:$Vz,31:$VA,37:$VB,41:112,74:$Vb,84:$Vc},o($VX,[2,19]),o($VX,[2,20]),o($VX,[2,21]),{10:[1,113]},{18:[1,114]},{10:[1,115]},{10:[1,116]},{10:[1,117]},{13:[1,118]},{10:[1,119],39:120,40:$Ve,64:$Vf},{10:$Vg,11:32,13:$Vh,20:$Vi,25:$Vj,38:121,42:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:43,64:$Vs},{12:[2,111],25:[1,123],33:122},{12:[1,124]},{12:$VY,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,67:$VR,69:125,70:$VZ},{10:$Vg,11:127,13:$Vh,25:$Vj,42:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:43,64:$Vs},{42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,66:[1,128],67:$VR},o($Vd,[2,16]),{10:$Vg,11:129,13:$Vh,25:$Vj,42:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:43,64:$Vs},{10:$Vg,11:130,13:$Vh,25:$Vj,42:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:43,64:$Vs},{10:$Vg,11:131,13:$Vh,25:$Vj,42:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:43,64:$Vs},{10:$Vg,11:132,13:$Vh,25:$Vj,42:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:43,64:$Vs},{10:$Vg,11:133,13:$Vh,25:$Vj,42:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:43,64:$Vs},{10:$Vg,11:134,13:$Vh,25:$Vj,42:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:43,64:$Vs},{10:$Vg,11:135,13:$Vh,25:$Vj,42:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:43,64:$Vs},{10:$Vg,11:136,13:$Vh,25:$Vj,42:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:43,64:$Vs},{10:$Vg,11:137,13:$Vh,25:$Vj,42:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:43,64:$Vs},{10:$Vg,11:138,13:$Vh,25:$Vj,42:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:43,64:$Vs},{10:$Vg,11:139,13:$Vh,25:$Vj,42:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:43,64:$Vs},{10:$Vg,11:140,13:$Vh,25:$Vj,42:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:43,64:$Vs},{10:$Vg,11:141,13:$Vh,25:$Vj,42:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:43,64:$Vs},{10:$Vg,11:142,13:$Vh,25:$Vj,42:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:43,64:$Vs},{10:$Vg,11:143,13:$Vh,25:$Vj,42:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:43,64:$Vs},o($VS,[2,33]),o($VS,[2,48]),{12:[1,144],42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,67:$VR},{10:$Vg,11:71,12:$VC,13:$Vh,25:$Vj,36:145,42:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:43,64:$Vs},{10:$Vg,11:146,13:$Vh,25:$Vj,42:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:43,64:$Vs},{66:[1,147]},{42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,66:$V_,67:$VR,70:$V$,83:148},{15:[1,150]},o($VS,[2,86]),{34:[1,151]},o($V01,$V11,{72:152,40:$V21}),{25:$V31,35:154,77:$V41,79:$V51,80:$V61},{40:[1,159]},{13:[1,160]},{13:[1,161]},{10:$Vg,11:162,13:$Vh,25:$Vj,42:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:43,64:$Vs},{13:[1,163]},{20:[1,164],42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,67:$VR},{28:[1,165],29:[1,166],34:$VW,40:$VV,71:167},{10:$Vg,11:168,13:$Vh,25:$Vj,42:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:43,64:$Vs},{13:[1,169]},{30:[1,170]},o($VX,[2,18]),{10:$Vg,11:171,13:$Vh,25:$Vj,42:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:43,64:$Vs},{19:[1,172]},{10:$Vg,11:173,13:$Vh,25:$Vj,42:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:43,64:$Vs},{24:174,25:$Vt,27:[1,175]},{10:$Vg,11:176,13:$Vh,25:$Vj,42:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:43,64:$Vs},{2:$V0,7:59,8:60,9:$Vu,14:177,17:$Vv,21:$Vw,23:$Vx,25:$Vy,27:$V6,30:$Vz,31:$VA,37:$VB,41:58,74:$Vb,84:$Vc},{10:$Vg,11:71,12:$VC,13:$Vh,25:$Vj,36:178,42:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:43,64:$Vs},{40:[1,179]},{20:[1,180]},{12:[1,181]},o($V71,$VV,{71:182,34:$VW}),{20:[1,183]},{12:[2,62]},{10:$Vg,11:184,13:$Vh,25:$Vj,42:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:43,64:$Vs},{20:[1,185],42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,67:$VR},{39:186,40:$Ve,64:$Vf},o($V81,[2,34],{44:$VF,45:$VG,46:$VH,47:$VI}),o($V81,[2,35],{44:$VF,45:$VG,46:$VH,47:$VI}),o($V91,[2,36],{46:$VH,47:$VI}),o($V91,[2,37],{46:$VH,47:$VI}),o($VS,[2,38]),o($VS,[2,39]),o($Va1,[2,40],{42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI}),o($Va1,[2,41],{42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI}),o($Va1,[2,42],{42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI}),o($Va1,[2,43],{42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI}),o($Va1,[2,44],{42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI}),o($Va1,[2,45],{42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI}),o($Vb1,[2,46],{42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO}),o($Vb1,[2,47],{42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO}),{34:[1,187],42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,67:$VR},o($VS,[2,49]),{12:[1,188]},{42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,66:[1,189],67:$VR},o($VS,[2,59]),{66:[2,90]},{10:$Vg,11:190,13:$Vh,25:$Vj,42:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:43,64:$Vs},o($VS,[2,85]),{10:$Vg,11:191,13:$Vh,25:$Vj,42:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:43,64:$Vs},{20:$Vc1,70:$Vd1,73:192},{10:$Vg,11:194,13:$Vh,25:$Vj,42:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:43,64:$Vs},o([12,15,20,40,70],[2,77]),o($Ve1,$Vf1,{78:195,64:$Vg1}),o($Ve1,$Vf1,{78:197,64:$Vg1}),o($Ve1,$Vf1,{78:198,64:$Vg1}),o($Ve1,$Vf1,{78:199,64:$Vg1}),{10:$Vg,11:200,13:$Vh,25:$Vj,42:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:43,64:$Vs},{25:$Vh1,85:201},{2:$V0,7:59,8:60,9:$Vu,14:203,17:$Vv,21:$Vw,23:$Vx,25:$Vy,27:$V6,30:$Vz,31:$VA,37:$VB,41:58,74:$Vb,84:$Vc},{12:[1,204],42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,67:$VR},{15:$Vi1,22:205,89:$Vj1,90:$Vk1},{25:[1,208]},{25:[1,209]},{25:[1,210]},{40:[1,211]},{20:[1,212],42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,67:$VR},{2:$V0,7:59,8:60,9:$Vu,14:213,17:$Vv,21:$Vw,23:$Vx,25:$Vy,27:$V6,30:$Vz,31:$VA,37:$VB,41:58,74:$Vb,84:$Vc},{10:[1,214]},{12:[1,215],42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,67:$VR},{10:[1,216]},{12:[1,217],42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,67:$VR},{10:$Vg,11:218,13:$Vh,25:$Vj,42:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:43,64:$Vs},{25:[1,219]},{12:[1,220],42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,67:$VR},{2:$V0,7:59,8:60,9:$Vu,15:[1,221],17:$Vv,21:$Vw,23:$Vx,25:$Vy,27:$V6,30:$Vz,31:$VA,37:$VB,41:112,74:$Vb,84:$Vc},{12:[1,222]},{10:$Vg,11:223,13:$Vh,25:$Vj,42:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:43,64:$Vs},o($VX,[2,31]),{34:[1,224]},{12:$Vl1,70:$Vm1,93:225},o($Vd,[2,15]),{12:$VY,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,67:$VR,69:227,70:$VZ},o($Vd,[2,17]),{40:[2,118]},{10:$Vg,11:228,13:$Vh,25:$Vj,42:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:43,64:$Vs},o($VS,[2,53]),{68:[1,229]},{42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,66:$V_,67:$VR,70:$V$,83:230},{15:[2,89],42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,67:$VR,70:[1,232],82:231},{20:[1,233]},{25:[1,234]},o($V01,[2,73],{42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,67:$VR}),o($Ve1,[2,79]),{66:[1,235]},o($Ve1,[2,80]),o($Ve1,[2,81]),o($Ve1,[2,82]),{20:[2,72],42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,67:$VR,70:[1,237],75:236},{15:[1,238]},o([15,70],$VV,{71:239,34:$VW}),{2:$V0,7:59,8:60,9:$Vu,15:[1,240],17:$Vv,21:$Vw,23:$Vx,25:$Vy,27:$V6,30:$Vz,31:$VA,37:$VB,41:112,74:$Vb,84:$Vc},{20:[1,241]},{15:[1,242]},{10:$Vg,11:243,13:$Vh,25:$Vj,42:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:43,64:$Vs},{34:[1,244]},{26:245,40:$Vn1,91:$Vo1,92:$Vp1},{12:[1,249]},{12:[1,250]},{10:$Vg,11:251,13:$Vh,25:$Vj,42:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:43,64:$Vs},o($Vq1,[2,106]),{2:$V0,7:59,8:60,9:$Vu,15:[1,252],17:$Vv,21:$Vw,23:$Vx,25:$Vy,27:$V6,30:$Vz,31:$VA,37:$VB,41:112,74:$Vb,84:$Vc},{10:$Vg,11:253,13:$Vh,25:$Vj,42:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:43,64:$Vs},{13:[1,254]},{10:$Vg,11:255,13:$Vh,25:$Vj,42:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:43,64:$Vs},{13:[1,256]},{20:[1,257],42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,67:$VR},{28:[1,258],29:[1,259],34:$VW,40:$VV,71:167},{13:[1,260]},{30:[1,261]},{20:[1,262]},{20:[1,263],42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,67:$VR},{25:$V31,35:264,77:$V41,79:$V51,80:$V61},{12:[2,110]},{25:[1,265]},{12:[2,64]},o([12,15,20,34,66,67,70],[2,60],{42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ}),o($VS,[2,61]),{66:[2,92]},{15:[2,87]},{25:$VT,81:266},o($Vd,[2,66]),o($VU,$VV,{71:267,34:$VW}),o($Ve1,$Vf1,{78:268,64:$Vg1}),{20:[1,269]},{25:[1,270]},{20:[1,271]},{15:[2,97],70:[1,273],86:272},o($Vd,$Vr1,{16:274,87:$Vs1}),o($Vd,[2,7]),o($Vd,[2,8]),{34:[1,276],42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,67:$VR},{13:[1,277]},{12:[1,278]},{12:[2,107]},{12:[2,108]},{10:$Vg,11:279,13:$Vh,25:$Vj,42:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:43,64:$Vs},{13:[1,280]},{13:[1,281]},{20:[1,282],42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,67:$VR},o($Vd,[2,12]),{12:[1,283],42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,67:$VR},{2:$V0,7:59,8:60,9:$Vu,14:284,17:$Vv,21:$Vw,23:$Vx,25:$Vy,27:$V6,30:$Vz,31:$VA,37:$VB,41:58,74:$Vb,84:$Vc},{12:[1,285],42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,67:$VR},{15:$Vi1,22:286,89:$Vj1,90:$Vk1},{25:[1,287]},{25:[1,288]},{25:[1,289]},{2:$V0,7:59,8:60,9:$Vu,14:290,17:$Vv,21:$Vw,23:$Vx,25:$Vy,27:$V6,30:$Vz,31:$VA,37:$VB,41:58,74:$Vb,84:$Vc},{10:[1,291]},o($VX,[2,30]),o($VX,[2,32]),{13:[1,292]},o($V71,$VV,{71:293,34:$VW}),{15:[2,88]},o($V01,$V11,{72:294,40:$V21}),o($Ve1,[2,83]),o($Vd,[2,67]),{34:$VW,40:$VV,71:295},o($Vd,[2,94]),{15:[2,95]},{25:$Vh1,85:296},o($Vd,[2,6]),{9:[1,298],13:[1,299],88:297},{13:[1,300]},{2:$V0,7:59,8:60,9:$Vu,14:301,17:$Vv,21:$Vw,23:$Vx,25:$Vy,27:$V6,30:$Vz,31:$VA,37:$VB,41:58,74:$Vb,84:$Vc},{13:[1,302]},{12:[2,109],42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,67:$VR},{2:$V0,7:59,8:60,9:$Vu,14:303,17:$Vv,21:$Vw,23:$Vx,25:$Vy,27:$V6,30:$Vz,31:$VA,37:$VB,41:58,74:$Vb,84:$Vc},{2:$V0,7:59,8:60,9:$Vu,14:304,17:$Vv,21:$Vw,23:$Vx,25:$Vy,27:$V6,30:$Vz,31:$VA,37:$VB,41:58,74:$Vb,84:$Vc},o($Vq1,[2,105]),{20:[1,305]},{2:$V0,7:59,8:60,9:$Vu,15:[1,306],17:$Vv,21:$Vw,23:$Vx,25:$Vy,27:$V6,30:$Vz,31:$VA,37:$VB,41:112,74:$Vb,84:$Vc},{20:[1,307]},{15:[1,308]},{26:309,40:$Vn1,91:$Vo1,92:$Vp1},{12:[1,310]},{12:[1,311]},{2:$V0,7:59,8:60,9:$Vu,15:[1,312],17:$Vv,21:$Vw,23:$Vx,25:$Vy,27:$V6,30:$Vz,31:$VA,37:$VB,41:112,74:$Vb,84:$Vc},{10:$Vg,11:313,13:$Vh,25:$Vj,42:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:43,64:$Vs},{2:$V0,4:314,6:3,7:4,8:5,9:$V1,17:$V2,21:$V3,23:$V4,25:$V5,27:$V6,30:$V7,31:$V8,32:$V9,37:$Va,74:$Vb,84:$Vc},{12:$Vl1,70:$Vm1,93:315},{20:$Vc1,70:$Vd1,73:316},{40:[1,317]},{15:[2,96]},o($Vd,[2,98]),{10:[1,318]},{2:$V0,7:59,8:60,9:$Vu,14:319,17:$Vv,21:$Vw,23:$Vx,25:$Vy,27:$V6,30:$Vz,31:$VA,37:$VB,41:58,74:$Vb,84:$Vc},{2:$V0,7:59,8:60,9:$Vu,14:320,17:$Vv,21:$Vw,23:$Vx,25:$Vy,27:$V6,30:$Vz,31:$VA,37:$VB,41:58,74:$Vb,84:$Vc},{2:$V0,7:59,8:60,9:$Vu,15:[1,321],17:$Vv,21:$Vw,23:$Vx,25:$Vy,27:$V6,30:$Vz,31:$VA,37:$VB,41:112,74:$Vb,84:$Vc},{2:$V0,7:59,8:60,9:$Vu,14:322,17:$Vv,21:$Vw,23:$Vx,25:$Vy,27:$V6,30:$Vz,31:$VA,37:$VB,41:58,74:$Vb,84:$Vc},{2:$V0,7:59,8:60,9:$Vu,15:[1,323],17:$Vv,21:$Vw,23:$Vx,25:$Vy,27:$V6,30:$Vz,31:$VA,37:$VB,41:112,74:$Vb,84:$Vc},{2:$V0,7:59,8:60,9:$Vu,15:[1,324],17:$Vv,21:$Vw,23:$Vx,25:$Vy,27:$V6,30:$Vz,31:$VA,37:$VB,41:112,74:$Vb,84:$Vc},o($Vd,[2,13]),o($VX,$Vr1,{16:325,87:$Vs1}),o($VX,[2,23]),o($VX,[2,24]),{12:[1,326]},{13:[1,327]},{13:[1,328]},o($VX,[2,28]),{12:[1,329],42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,67:$VR},{2:$V0,6:20,7:4,8:5,9:$V1,15:[1,330],17:$V2,21:$V3,23:$V4,25:$V5,27:$V6,30:$V7,31:$V8,32:$V9,37:$Va,74:$Vb,84:$Vc},{12:[2,112]},{20:[2,69]},{10:$Vg,11:331,13:$Vh,25:$Vj,42:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:43,64:$Vs},{10:$Vg,11:332,13:$Vh,25:$Vj,42:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:43,64:$Vs},{2:$V0,7:59,8:60,9:$Vu,15:[1,333],17:$Vv,21:$Vw,23:$Vx,25:$Vy,27:$V6,30:$Vz,31:$VA,37:$VB,41:112,74:$Vb,84:$Vc},{2:$V0,7:59,8:60,9:$Vu,15:[1,334],17:$Vv,21:$Vw,23:$Vx,25:$Vy,27:$V6,30:$Vz,31:$VA,37:$VB,41:112,74:$Vb,84:$Vc},{15:[2,103]},{2:$V0,7:59,8:60,9:$Vu,15:[1,335],17:$Vv,21:$Vw,23:$Vx,25:$Vy,27:$V6,30:$Vz,31:$VA,37:$VB,41:112,74:$Vb,84:$Vc},o($Vd,[2,10]),o($Vd,[2,11]),o($VX,[2,22]),{13:[1,336]},{2:$V0,7:59,8:60,9:$Vu,14:337,17:$Vv,21:$Vw,23:$Vx,25:$Vy,27:$V6,30:$Vz,31:$VA,37:$VB,41:58,74:$Vb,84:$Vc},{2:$V0,7:59,8:60,9:$Vu,14:338,17:$Vv,21:$Vw,23:$Vx,25:$Vy,27:$V6,30:$Vz,31:$VA,37:$VB,41:58,74:$Vb,84:$Vc},{20:[1,339]},o($Vd,[2,14]),{20:$Vc1,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,67:$VR,70:$Vd1,73:340},{12:[1,341],42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,67:$VR},o($Vd,[2,101]),{15:$Vi1,22:342,89:$Vj1,90:$Vk1},o($Vd,[2,9]),{2:$V0,7:59,8:60,9:$Vu,14:343,17:$Vv,21:$Vw,23:$Vx,25:$Vy,27:$V6,30:$Vz,31:$VA,37:$VB,41:58,74:$Vb,84:$Vc},{2:$V0,7:59,8:60,9:$Vu,15:[1,344],17:$Vv,21:$Vw,23:$Vx,25:$Vy,27:$V6,30:$Vz,31:$VA,37:$VB,41:112,74:$Vb,84:$Vc},{2:$V0,7:59,8:60,9:$Vu,15:[1,345],17:$Vv,21:$Vw,23:$Vx,25:$Vy,27:$V6,30:$Vz,31:$VA,37:$VB,41:112,74:$Vb,84:$Vc},o($VX,[2,29]),{20:[2,71]},{13:[1,346]},{15:[2,102]},{2:$V0,7:59,8:60,9:$Vu,15:[1,347],17:$Vv,21:$Vw,23:$Vx,25:$Vy,27:$V6,30:$Vz,31:$VA,37:$VB,41:112,74:$Vb,84:$Vc},o($VX,[2,26]),o($VX,[2,27]),{2:$V0,7:59,8:60,9:$Vu,14:348,17:$Vv,21:$Vw,23:$Vx,25:$Vy,27:$V6,30:$Vz,31:$VA,37:$VB,41:58,74:$Vb,84:$Vc},o($VX,[2,25]),{2:$V0,7:59,8:60,9:$Vu,15:[1,349],17:$Vv,21:$Vw,23:$Vx,25:$Vy,27:$V6,30:$Vz,31:$VA,37:$VB,41:112,74:$Vb,84:$Vc},o($Vd,$Vr1,{16:350,87:$Vs1}),o($Vd,[2,100])],
defaultActions: {19:[2,1],125:[2,62],148:[2,90],186:[2,118],225:[2,110],227:[2,64],230:[2,92],231:[2,87],246:[2,107],247:[2,108],266:[2,88],272:[2,95],296:[2,96],315:[2,112],316:[2,69],321:[2,103],340:[2,71],342:[2,102]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	const TIPO_OPERACION	= require('./instrucciones').TIPO_OPERACION;
	const TIPO_VALOR 		= require('./instrucciones').TIPO_VALOR;
	const instruccionesAPI	= require('./instrucciones').instruccionesAPI;
	const TIPO_DATO = require('./instrucciones').TIPO_DATO;
	const TS = require('./instrucciones').TS;
	var salida=[];
	var ArrayDeErrores = [];
	var currentType="";
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 77;
break;
case 1:return 80;
break;
case 2:return 79;
break;
case 3:return 27;
break;
case 4:return 74;
break;
case 5:return 17;
break;
case 6:return 19;
break;
case 7:return 61;
break;
case 8:return 60;
break;
case 9:return 9;
break;
case 10:return 87;
break;
case 11:return 21;
break;
case 12:return 89;
break;
case 13:return 90;
break;
case 14:return 'R_BREAK';
break;
case 15:return 'R_CONTINUE';
break;
case 16:return 30;
break;
case 17:return 31;
break;
case 18:return 23;
break;
case 19:return 'R_VOID';
break;
case 20:return 37;
break;
case 21:return 'R_PUSH';
break;
case 22:return 'R_POP';
break;
case 23:return 'R_LENGTH';
break;
case 24:return 84;
break;
case 25:return 28;
break;
case 26:return 29;
break;
case 27:return 32;
break;
case 28: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 62;
break;
case 29: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 59;
break;
case 30:return 58;
break;
case 31:return 57;
break;
case 32:return 25;
break;
case 33:
break;
case 34:// comentario simple línea
break;
case 35:// comentario multiple líneas
break;
case 36:return 91;
break;
case 37:return 92;
break;
case 38:return "MAS";
break;
case 39:return 42;
break;
case 40:return 46;
break;
case 41:return 44;
break;
case 42:return 45;
break;
case 43:return 47;
break;
case 44:return 52;
break;
case 45:return 53;
break;
case 46:return 40;
break;
case 47:return 50;
break;
case 48:return 48;
break;
case 49:return 51;
break;
case 50:return 49;
break;
case 51:return 54;
break;
case 52:return 55;
break;
case 53:return 56;
break;
case 54:return 13;
break;
case 55:return 15;
break;
case 56:return 10;
break;
case 57:return 12;
break;
case 58:return 64;
break;
case 59:return 66;
break;
case 60:return 20;
break;
case 61:return 34;
break;
case 62:return 18;
break;
case 63:return 70;
break;
case 64:return 67;
break;
case 65:return 5;
break;
case 66: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); salida.push('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);  ArrayDeErrores.push({tipo:"léxico", linea:this._$.first_line, columna:this._$.first_column, descripcion: yy_.yytext});
break;
}
},
rules: [/^(?:number\b)/,/^(?:boolean\b)/,/^(?:string\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:console\b)/,/^(?:log\b)/,/^(?:false\b)/,/^(?:true\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:void\b)/,/^(?:return\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:length\b)/,/^(?:type\b)/,/^(?:of\b)/,/^(?:in\b)/,/^(?:function\b)/,/^(?:"(\\"|\\n|\\t|\\r|\\\\|[^\"])*")/,/^(?:'[^\"]?')/,/^(?:[0-9]+\.([0-9]+)?\b)/,/^(?:[0-9]+\b)/,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/,/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:==)/,/^(?:!=)/,/^(?:=)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:;)/,/^(?::)/,/^(?:\.)/,/^(?:,)/,/^(?:\?)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}