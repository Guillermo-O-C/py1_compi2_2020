/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,17],$V1=[1,6],$V2=[1,7],$V3=[1,8],$V4=[1,9],$V5=[1,13],$V6=[1,15],$V7=[1,10],$V8=[1,11],$V9=[1,12],$Va=[1,14],$Vb=[1,16],$Vc=[1,18],$Vd=[2,5,9,15,17,21,23,25,27,30,31,32,37,75,85],$Ve=[40,41,42],$Vf=[2,123],$Vg=[1,30],$Vh=[1,35],$Vi=[1,45],$Vj=[2,121],$Vk=[1,38],$Vl=[1,33],$Vm=[1,34],$Vn=[1,36],$Vo=[1,37],$Vp=[1,39],$Vq=[1,40],$Vr=[1,41],$Vs=[1,42],$Vt=[1,44],$Vu=[1,55],$Vv=[1,61],$Vw=[1,62],$Vx=[1,63],$Vy=[1,64],$Vz=[1,67],$VA=[1,65],$VB=[1,66],$VC=[1,68],$VD=[2,67],$VE=[1,78],$VF=[1,77],$VG=[1,79],$VH=[1,80],$VI=[1,81],$VJ=[1,82],$VK=[1,83],$VL=[1,84],$VM=[1,85],$VN=[1,86],$VO=[1,87],$VP=[1,88],$VQ=[1,89],$VR=[1,90],$VS=[1,91],$VT=[12,15,20,34,44,45,46,47,48,49,50,51,52,53,54,55,56,57,68,69,71],$VU=[1,101],$VV=[20,40,71],$VW=[2,82],$VX=[1,103],$VY=[2,9,15,17,21,23,25,27,30,31,37,75,85],$VZ=[2,69],$V_=[1,128],$V$=[2,97],$V01=[1,153],$V11=[20,71],$V21=[2,78],$V31=[1,157],$V41=[1,162],$V51=[1,159],$V61=[1,160],$V71=[1,161],$V81=[12,71],$V91=[12,15,20,34,40,41,42,44,45,46,47,48,49,50,51,52,53,54,55,56,57,68,69,71],$Va1=[12,15,20,34,44,45,50,51,52,53,54,55,56,57,68,69,71],$Vb1=[12,15,20,34,44,45,46,47,50,51,52,53,54,55,56,57,68,69,71],$Vc1=[12,15,20,34,50,51,52,53,54,55,56,57,68,69,71],$Vd1=[12,15,20,34,56,57,68,69,71],$Ve1=[2,74],$Vf1=[1,199],$Vg1=[12,13,15,20,40,71],$Vh1=[2,88],$Vi1=[1,202],$Vj1=[1,208],$Vk1=[2,108],$Vl1=[1,212],$Vm1=[1,213],$Vn1=[2,117],$Vo1=[1,234],$Vp1=[1,256],$Vq1=[1,254],$Vr1=[1,255],$Vs1=[10,13,25,44,58,59,60,61,62,63,64,66],$Vt1=[2,103],$Vu1=[1,283];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaracion":7,"type":8,"R_IF":9,"ABRIR_PARENTESIS":10,"expresion":11,"CERRAR_PARENTESIS":12,"ABRIR_LLAVE":13,"sentencias":14,"CERRAR_LLAVE":15,"elseIf":16,"R_CONSOLE":17,"PUNTO":18,"R_LOG":19,"PUNTO_COMA":20,"R_SWITCH":21,"cases":22,"R_FOR":23,"for_init":24,"IDENTIFICADOR":25,"for_change":26,"R_LET":27,"R_OF":28,"R_IN":29,"R_WHILE":30,"R_DO":31,"R_FUNCTION":32,"parametros":33,"DOS_PUNTOS":34,"tipo":35,"argumentos":36,"R_RETURN":37,"retorno":38,"array_position":39,"IGUAL":40,"INCREMENTO":41,"DECREMENTO":42,"sentencia":43,"MENOS":44,"MAS":45,"MULTIPLICACION":46,"DIVISION":47,"POTENCIA":48,"MODULO":49,"MAYOR":50,"MENOR":51,"MAYOR_IGUAL":52,"MENOR_IGUAL":53,"IGUALDAD":54,"DISTINTO":55,"AND":56,"OR":57,"NOT":58,"ENTERO":59,"DECIMAL":60,"R_TRUE":61,"R_FALSE":62,"CADENA":63,"CADENA_EJECUTABLE":64,"objeto":65,"ABRIR_CORCHETE":66,"arrays":67,"CERRAR_CORCHETE":68,"OPERADOR_TERNARIO":69,"argumentos_P":70,"COMA":71,"definicion_tipo":72,"definicion":73,"listaID":74,"R_CONST":75,"listaIDConst":76,"definicion_const":77,"R_NUMBER":78,"declarar_array":79,"R_STRING":80,"R_BOOLEAN":81,"obj_atributos":82,"obj_atributos_pr":83,"arrays_pr":84,"R_TYPE":85,"type_atributos":86,"type_atributos_pr":87,"R_ELSE":88,"elseIf_P":89,"R_CASE":90,"R_DEFAULT":91,"parametros_pr":92,"opcional":93,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"R_IF",10:"ABRIR_PARENTESIS",12:"CERRAR_PARENTESIS",13:"ABRIR_LLAVE",15:"CERRAR_LLAVE",17:"R_CONSOLE",18:"PUNTO",19:"R_LOG",20:"PUNTO_COMA",21:"R_SWITCH",23:"R_FOR",25:"IDENTIFICADOR",27:"R_LET",28:"R_OF",29:"R_IN",30:"R_WHILE",31:"R_DO",32:"R_FUNCTION",34:"DOS_PUNTOS",37:"R_RETURN",40:"IGUAL",41:"INCREMENTO",42:"DECREMENTO",44:"MENOS",45:"MAS",46:"MULTIPLICACION",47:"DIVISION",48:"POTENCIA",49:"MODULO",50:"MAYOR",51:"MENOR",52:"MAYOR_IGUAL",53:"MENOR_IGUAL",54:"IGUALDAD",55:"DISTINTO",56:"AND",57:"OR",58:"NOT",59:"ENTERO",60:"DECIMAL",61:"R_TRUE",62:"R_FALSE",63:"CADENA",64:"CADENA_EJECUTABLE",66:"ABRIR_CORCHETE",68:"CERRAR_CORCHETE",69:"OPERADOR_TERNARIO",71:"COMA",75:"R_CONST",78:"R_NUMBER",80:"R_STRING",81:"R_BOOLEAN",85:"R_TYPE",88:"R_ELSE",90:"R_CASE",91:"R_DEFAULT"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,8],[6,7],[6,7],[6,11],[6,10],[6,10],[6,7],[6,9],[6,10],[6,5],[6,3],[6,5],[6,4],[6,4],[14,2],[14,1],[43,1],[43,1],[43,8],[43,7],[43,7],[43,11],[43,10],[43,10],[43,7],[43,9],[43,5],[43,3],[43,5],[43,4],[43,4],[11,2],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,2],[11,3],[11,1],[11,1],[11,1],[11,4],[11,1],[11,1],[11,1],[11,1],[11,1],[11,3],[11,5],[11,5],[36,2],[36,0],[70,3],[70,0],[7,6],[7,7],[7,2],[74,5],[74,0],[76,6],[76,0],[73,2],[73,0],[77,2],[77,1],[72,2],[72,0],[35,2],[35,2],[35,2],[35,2],[79,3],[79,0],[65,3],[65,2],[82,4],[83,2],[83,0],[67,2],[67,0],[84,3],[84,0],[8,7],[86,3],[87,2],[87,0],[16,2],[16,0],[89,8],[89,3],[22,7],[22,5],[22,0],[24,6],[24,4],[26,1],[26,1],[26,2],[33,3],[33,0],[92,4],[92,0],[93,1],[93,0],[38,1],[38,0],[39,4],[39,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		// cuado se haya reconocido la entrada completa retornamos el AST
		var temporal = salida;
		salida=[];
		var tempAr = ArrayDeErrores;
		ArrayDeErrores = [];
		return {AST: $$[$0-1], Errores: temporal};
	
break;
case 2: case 20:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3:
this.$=[$$[$0]];
break;
case 4: case 5: case 22: case 23: case 77: case 79: case 81: case 92: case 100: case 111: case 112: case 113: case 120:
this.$=$$[$0];
break;
case 6: case 24:
 this.$ = instruccionesAPI.nuevoIf($$[$0-5], $$[$0-2], $$[$0]);
break;
case 7: case 25:
this.$ = instruccionesAPI.nuevoImprimir($$[$0-2]);
break;
case 8: case 26:
this.$=instruccionesAPI.nuevoSwitch($$[$0-4], $$[$0-1]);
break;
case 9: case 27:
 this.$ = instruccionesAPI.nuevoFor($$[$0-8], $$[$0-7], $$[$0-4], $$[$0-1]);
break;
case 10: case 28:
this.$=instruccionesAPI.nuevoForOF($$[$0-6], $$[$0-4], $$[$0-1]);
break;
case 11: case 29:
this.$=instruccionesAPI.nuevoForIn($$[$0-6], $$[$0-4], $$[$0-1]);
break;
case 12: case 30:
this.$=instruccionesAPI.nuevoWhile($$[$0-4], $$[$0-1]);
break;
case 13: case 31:
this.$=instruccionesAPI.nuevoDoWhile($$[$0-6], $$[$0-2]);
break;
case 14:
  this.$ = instruccionesAPI.nuevaFuncion($$[$0-3], $$[$0-8], $$[$0-6], $$[$0-1]); 
break;
case 15: case 32:
this.$ = instruccionesAPI.nuevaLlamada($$[$0-4], $$[$0-2]);
break;
case 16: case 33:
this.$=instruccionesAPI.nuevoReturn($$[$0-1]);
break;
case 17:
this.$ = instruccionesAPI.nuevaAsignacion($$[$0-4], $$[$0-3], $$[$0-1]);
break;
case 18: case 35:
this.$=instruccionesAPI.nuevoIncremento($$[$0-3], $$[$0-2]);
break;
case 19: case 36:
this.$=instruccionesAPI.nuevoDecremento($$[$0-3], $$[$0-2]);
break;
case 21:
 this.$ = [$$[$0]]; 
break;
case 34:
this.$ = instruccionesAPI.nuevaAsignacion($$[$0-4], $$[$0-3],$$[$0-1]);
break;
case 37:
 this.$ = instruccionesAPI.nuevaOperacionUnaria($$[$0], TIPO_OPERACION.NEGATIVO); 
break;
case 38:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.SUMA); 
break;
case 39:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.RESTA); 
break;
case 40:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MULTIPLICACION); 
break;
case 41:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DIVISION); 
break;
case 42:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.POTENCIA); 
break;
case 43:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MODULO); 
break;
case 44:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR); 
break;
case 45:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR); 
break;
case 46:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR_IGUAL); 
break;
case 47:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR_IGUAL); 
break;
case 48:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.IGUAL_IGUAL); 
break;
case 49:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DISTINTO); 
break;
case 50:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.AND); 
break;
case 51:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.OR); 
break;
case 52:
this.$ =  instruccionesAPI.nuevaOperacionUnaria($$[$0], TIPO_OPERACION.NOT);
break;
case 53:
 this.$ = $$[$0-1]; 
break;
case 54:
 this.$ = instruccionesAPI.nuevoValor(Number($$[$0]), TIPO_VALOR.NUMERO); 
break;
case 55:
 this.$ = instruccionesAPI.nuevoValor(Number($$[$0]), TIPO_VALOR.DECIMAL); 
break;
case 56:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.IDENTIFICADOR); 
break;
case 57:
 this.$ = instruccionesAPI.nuevaLlamada($$[$0-3], $$[$0-1]); 
break;
case 58:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.TRUE); 
break;
case 59:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.FALSE); 
break;
case 60:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.CADENA); 
break;
case 61:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.CADENA_EJECUTABLE); 
break;
case 62:
 this.$ = instruccionesAPI.nuevoObjeto($$[$0]); 
break;
case 63:
 this.$ = instruccionesAPI.nuevoArray($$[$0-1]); 
break;
case 64:
this.$=instruccionesAPI.nuevoOperadorTernario($$[$0-4], $$[$0-2], $$[$0]);
break;
case 65:
this.$=instruccionesAPI.nuevoAccesoAPosicion($$[$0-4], $$[$0-2], $$[$0]);
break;
case 66: case 68:
this.$ = instruccionesAPI.nuevoArgumento($$[$0-1], $$[$0]);
break;
case 67:
this.$ = "Epsilon";
break;
case 69:
this.$ =  "Epsilon";
break;
case 70:
this.$ = instruccionesAPI.nuevaDeclaracion($$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1]);
break;
case 71:
this.$ = instruccionesAPI.nuevaDeclaracion($$[$0-6], $$[$0-5], $$[$0-4], $$[$0-2], $$[$0-1]);
break;
case 73:
this.$=instruccionesAPI.nuevoID($$[$0-3],$$[$0-2], $$[$0-1],$$[$0]);
break;
case 74: case 76: case 90: case 93: case 95: case 97: case 101: case 108: case 115: case 117: case 121:
this.$="Epsilon";
break;
case 75:
this.$=instruccionesAPI.nuevoID($$[$0-4], $$[$0-3], $$[$0-1], $$[$0]);
break;
case 78:
this.$="undefined";
break;
case 80:
 console.error('Error sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column+' la declaración de un const tiene que ser inicializado.');	
break;
case 82:
this.$={tipo:"infer", isArray:"undefinied"};
break;
case 83: case 84: case 85:
 this.$=instruccionesAPI.nuevoTipo($$[$0-1],$$[$0]); 
break;
case 86:
 this.$ = instruccionesAPI.nuevoTipo($$[$0-1], $$[$0]);
break;
case 87:
this.$=instruccionesAPI.nuevaDimension($$[$0]);
break;
case 88: case 119:
this.$=false;
break;
case 89:
this.$=$$[$0-1];
break;
case 91:
this.$=instruccionesAPI.nuevoObjAtributo($$[$0-3], $$[$0-1], $$[$0]);
break;
case 94: case 96:
this.$=instruccionesAPI.nuevoDato($$[$0-1], $$[$0]);
break;
case 98:
this.$=instruccionesAPI.nuevoType($$[$0-5],$$[$0-2]);
break;
case 99:
this.$=instruccionesAPI.nuevoTypeAtributo($$[$0-2], $$[$0-1], $$[$0]);
break;
case 102:
 this.$ = $$[$0];
break;
case 103:
 this.$ = "Epsilon"; 
break;
case 104:
this.$ = instruccionesAPI.nuevoElseIf($$[$0-5], $$[$0-2], $$[$0]);
break;
case 105:
this.$ =  instruccionesAPI.nuevoElse($$[$0-1]);
break;
case 106:
this.$=instruccionesAPI.nuevoCase($$[$0-5], $$[$0-2], $$[$0]);
break;
case 107:
this.$=instruccionesAPI.nuevoDefault($$[$0-1]);
break;
case 109:
this.$ = instruccionesAPI.nuevaDeclaracion($$[$0-5], $$[$0-4], $$[$0-1], $$[$0-3]);
break;
case 110:
this.$ = instruccionesAPI.nuevaAsignacion($$[$0-3], $$[$0-1]);
break;
case 114: case 116:
this.$=instruccionesAPI.nuevoParametro($$[$0-1], $$[$0-2], $$[$0]);
break;
case 118:
this.$=true;
break;
case 122:
this.$=instruccionesAPI.nuevoArrayIndex($$[$0-2], $$[$0]);
break;
case 123:
this.$="false";
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:$V1,17:$V2,21:$V3,23:$V4,25:$V5,27:$V6,30:$V7,31:$V8,32:$V9,37:$Va,75:$Vb,85:$Vc},{1:[3]},{2:$V0,5:[1,19],6:20,7:4,8:5,9:$V1,17:$V2,21:$V3,23:$V4,25:$V5,27:$V6,30:$V7,31:$V8,32:$V9,37:$Va,75:$Vb,85:$Vc},o($Vd,[2,3]),o($Vd,[2,4]),o($Vd,[2,5]),{10:[1,21]},{18:[1,22]},{10:[1,23]},{10:[1,24]},{10:[1,25]},{13:[1,26]},{25:[1,27]},o($Ve,$Vf,{39:29,10:[1,28],66:$Vg}),{10:$Vh,11:32,13:$Vi,20:$Vj,25:$Vk,38:31,44:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:43,66:$Vt},{25:[1,46]},{25:[1,47]},{20:[1,48]},{25:[1,49]},{1:[2,1]},o($Vd,[2,2]),{10:$Vh,11:50,13:$Vi,25:$Vk,44:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:43,66:$Vt},{19:[1,51]},{10:$Vh,11:52,13:$Vi,25:$Vk,44:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:43,66:$Vt},{24:53,25:$Vu,27:[1,54]},{10:$Vh,11:56,13:$Vi,25:$Vk,44:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:43,66:$Vt},{2:$V0,7:59,8:60,9:$Vv,14:57,17:$Vw,21:$Vx,23:$Vy,25:$Vz,27:$V6,30:$VA,31:$VB,37:$VC,43:58,75:$Vb,85:$Vc},{10:[1,69]},{10:$Vh,11:71,12:$VD,13:$Vi,25:$Vk,36:70,44:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:43,66:$Vt},{40:[1,72],41:[1,73],42:[1,74]},{10:$Vh,11:75,13:$Vi,25:$Vk,44:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:43,66:$Vt},{20:[1,76]},{20:[2,120],44:$VE,45:$VF,46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,53:$VN,54:$VO,55:$VP,56:$VQ,57:$VR,69:$VS},{10:$Vh,11:92,13:$Vi,25:$Vk,44:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:43,66:$Vt},{10:$Vh,11:93,13:$Vi,25:$Vk,44:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:43,66:$Vt},{10:$Vh,11:94,13:$Vi,25:$Vk,44:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:43,66:$Vt},o($VT,[2,54]),o($VT,[2,55]),o($VT,[2,56],{10:[1,95],66:[1,96]}),o($VT,[2,58]),o($VT,[2,59]),o($VT,[2,60]),o($VT,[2,61]),o($VT,[2,62]),{10:$Vh,11:98,13:$Vi,25:$Vk,44:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:43,66:$Vt,67:97,68:[2,95]},{15:[1,100],25:$VU,82:99},o($VV,$VW,{72:102,34:$VX}),{34:$VX,40:$VW,72:104},o($Vd,[2,72]),{40:[1,105]},{12:[1,106],44:$VE,45:$VF,46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,53:$VN,54:$VO,55:$VP,56:$VQ,57:$VR,69:$VS},{10:[1,107]},{12:[1,108],44:$VE,45:$VF,46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,53:$VN,54:$VO,55:$VP,56:$VQ,57:$VR,69:$VS},{10:$Vh,11:109,13:$Vi,25:$Vk,44:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:43,66:$Vt},{25:[1,110]},{40:[1,111]},{12:[1,112],44:$VE,45:$VF,46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,53:$VN,54:$VO,55:$VP,56:$VQ,57:$VR,69:$VS},{2:$V0,7:59,8:60,9:$Vv,15:[1,113],17:$Vw,21:$Vx,23:$Vy,25:$Vz,27:$V6,30:$VA,31:$VB,37:$VC,43:114,75:$Vb,85:$Vc},o($VY,[2,21]),o($VY,[2,22]),o($VY,[2,23]),{10:[1,115]},{18:[1,116]},{10:[1,117]},{10:[1,118]},{10:[1,119]},{13:[1,120]},o($Ve,$Vf,{39:122,10:[1,121],66:$Vg}),{10:$Vh,11:32,13:$Vi,20:$Vj,25:$Vk,38:123,44:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:43,66:$Vt},{12:[2,115],25:[1,125],33:124},{12:[1,126]},{12:$VZ,44:$VE,45:$VF,46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,53:$VN,54:$VO,55:$VP,56:$VQ,57:$VR,69:$VS,70:127,71:$V_},{10:$Vh,11:129,13:$Vi,25:$Vk,44:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:43,66:$Vt},{20:[1,130]},{20:[1,131]},{44:$VE,45:$VF,46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,53:$VN,54:$VO,55:$VP,56:$VQ,57:$VR,68:[1,132],69:$VS},o($Vd,[2,16]),{10:$Vh,11:133,13:$Vi,25:$Vk,44:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:43,66:$Vt},{10:$Vh,11:134,13:$Vi,25:$Vk,44:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:43,66:$Vt},{10:$Vh,11:135,13:$Vi,25:$Vk,44:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:43,66:$Vt},{10:$Vh,11:136,13:$Vi,25:$Vk,44:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:43,66:$Vt},{10:$Vh,11:137,13:$Vi,25:$Vk,44:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:43,66:$Vt},{10:$Vh,11:138,13:$Vi,25:$Vk,44:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:43,66:$Vt},{10:$Vh,11:139,13:$Vi,25:$Vk,44:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:43,66:$Vt},{10:$Vh,11:140,13:$Vi,25:$Vk,44:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:43,66:$Vt},{10:$Vh,11:141,13:$Vi,25:$Vk,44:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:43,66:$Vt},{10:$Vh,11:142,13:$Vi,25:$Vk,44:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:43,66:$Vt},{10:$Vh,11:143,13:$Vi,25:$Vk,44:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:43,66:$Vt},{10:$Vh,11:144,13:$Vi,25:$Vk,44:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:43,66:$Vt},{10:$Vh,11:145,13:$Vi,25:$Vk,44:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:43,66:$Vt},{10:$Vh,11:146,13:$Vi,25:$Vk,44:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:43,66:$Vt},{10:$Vh,11:147,13:$Vi,25:$Vk,44:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:43,66:$Vt},o($VT,[2,37]),o($VT,[2,52]),{12:[1,148],44:$VE,45:$VF,46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,53:$VN,54:$VO,55:$VP,56:$VQ,57:$VR,69:$VS},{10:$Vh,11:71,12:$VD,13:$Vi,25:$Vk,36:149,44:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:43,66:$Vt},{10:$Vh,11:150,13:$Vi,25:$Vk,44:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:43,66:$Vt},{68:[1,151]},{44:$VE,45:$VF,46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,53:$VN,54:$VO,55:$VP,56:$VQ,57:$VR,68:$V$,69:$VS,71:$V01,84:152},{15:[1,154]},o($VT,[2,90]),{34:[1,155]},o($V11,$V21,{73:156,40:$V31}),{25:$V41,35:158,78:$V51,80:$V61,81:$V71},{40:[1,163]},{13:[1,164]},{13:[1,165]},{10:$Vh,11:166,13:$Vi,25:$Vk,44:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:43,66:$Vt},{13:[1,167]},{20:[1,168],44:$VE,45:$VF,46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,53:$VN,54:$VO,55:$VP,56:$VQ,57:$VR,69:$VS},{28:[1,169],29:[1,170],34:$VX,40:$VW,72:171},{10:$Vh,11:172,13:$Vi,25:$Vk,44:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:43,66:$Vt},{13:[1,173]},{30:[1,174]},o($VY,[2,20]),{10:$Vh,11:175,13:$Vi,25:$Vk,44:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:43,66:$Vt},{19:[1,176]},{10:$Vh,11:177,13:$Vi,25:$Vk,44:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:43,66:$Vt},{24:178,25:$Vu,27:[1,179]},{10:$Vh,11:180,13:$Vi,25:$Vk,44:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:43,66:$Vt},{2:$V0,7:59,8:60,9:$Vv,14:181,17:$Vw,21:$Vx,23:$Vy,25:$Vz,27:$V6,30:$VA,31:$VB,37:$VC,43:58,75:$Vb,85:$Vc},{10:$Vh,11:71,12:$VD,13:$Vi,25:$Vk,36:182,44:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:43,66:$Vt},{40:[1,183],41:[1,184],42:[1,185]},{20:[1,186]},{12:[1,187]},o($V81,$VW,{72:188,34:$VX}),{20:[1,189]},{12:[2,66]},{10:$Vh,11:190,13:$Vi,25:$Vk,44:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:43,66:$Vt},{20:[1,191],44:$VE,45:$VF,46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,53:$VN,54:$VO,55:$VP,56:$VQ,57:$VR,69:$VS},o($Vd,[2,18]),o($Vd,[2,19]),o($V91,$Vf,{39:192,66:$Vg}),o($Va1,[2,38],{46:$VG,47:$VH,48:$VI,49:$VJ}),o($Va1,[2,39],{46:$VG,47:$VH,48:$VI,49:$VJ}),o($Vb1,[2,40],{48:$VI,49:$VJ}),o($Vb1,[2,41],{48:$VI,49:$VJ}),o($VT,[2,42]),o($VT,[2,43]),o($Vc1,[2,44],{44:$VE,45:$VF,46:$VG,47:$VH,48:$VI,49:$VJ}),o($Vc1,[2,45],{44:$VE,45:$VF,46:$VG,47:$VH,48:$VI,49:$VJ}),o($Vc1,[2,46],{44:$VE,45:$VF,46:$VG,47:$VH,48:$VI,49:$VJ}),o($Vc1,[2,47],{44:$VE,45:$VF,46:$VG,47:$VH,48:$VI,49:$VJ}),o($Vc1,[2,48],{44:$VE,45:$VF,46:$VG,47:$VH,48:$VI,49:$VJ}),o($Vc1,[2,49],{44:$VE,45:$VF,46:$VG,47:$VH,48:$VI,49:$VJ}),o($Vd1,[2,50],{44:$VE,45:$VF,46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,53:$VN,54:$VO,55:$VP}),o($Vd1,[2,51],{44:$VE,45:$VF,46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,53:$VN,54:$VO,55:$VP}),{34:[1,193],44:$VE,45:$VF,46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,53:$VN,54:$VO,55:$VP,56:$VQ,57:$VR,69:$VS},o($VT,[2,53]),{12:[1,194]},{44:$VE,45:$VF,46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,53:$VN,54:$VO,55:$VP,56:$VQ,57:$VR,68:[1,195],69:$VS},o($VT,[2,63]),{68:[2,94]},{10:$Vh,11:196,13:$Vi,25:$Vk,44:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:43,66:$Vt},o($VT,[2,89]),{10:$Vh,11:197,13:$Vi,25:$Vk,44:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:43,66:$Vt},{20:$Ve1,71:$Vf1,74:198},{10:$Vh,11:200,13:$Vi,25:$Vk,44:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:43,66:$Vt},o([12,15,20,40,71],[2,81]),o($Vg1,$Vh1,{79:201,66:$Vi1}),o($Vg1,$Vh1,{79:203,66:$Vi1}),o($Vg1,$Vh1,{79:204,66:$Vi1}),o($Vg1,$Vh1,{79:205,66:$Vi1}),{10:$Vh,11:206,13:$Vi,25:$Vk,44:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:43,66:$Vt},{25:$Vj1,86:207},{2:$V0,7:59,8:60,9:$Vv,14:209,17:$Vw,21:$Vx,23:$Vy,25:$Vz,27:$V6,30:$VA,31:$VB,37:$VC,43:58,75:$Vb,85:$Vc},{12:[1,210],44:$VE,45:$VF,46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,53:$VN,54:$VO,55:$VP,56:$VQ,57:$VR,69:$VS},{15:$Vk1,22:211,90:$Vl1,91:$Vm1},{25:[1,214]},{25:[1,215]},{25:[1,216]},{40:[1,217]},{20:[1,218],44:$VE,45:$VF,46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,53:$VN,54:$VO,55:$VP,56:$VQ,57:$VR,69:$VS},{2:$V0,7:59,8:60,9:$Vv,14:219,17:$Vw,21:$Vx,23:$Vy,25:$Vz,27:$V6,30:$VA,31:$VB,37:$VC,43:58,75:$Vb,85:$Vc},{10:[1,220]},{12:[1,221],44:$VE,45:$VF,46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,53:$VN,54:$VO,55:$VP,56:$VQ,57:$VR,69:$VS},{10:[1,222]},{12:[1,223],44:$VE,45:$VF,46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,53:$VN,54:$VO,55:$VP,56:$VQ,57:$VR,69:$VS},{10:$Vh,11:224,13:$Vi,25:$Vk,44:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:43,66:$Vt},{25:[1,225]},{12:[1,226],44:$VE,45:$VF,46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,53:$VN,54:$VO,55:$VP,56:$VQ,57:$VR,69:$VS},{2:$V0,7:59,8:60,9:$Vv,15:[1,227],17:$Vw,21:$Vx,23:$Vy,25:$Vz,27:$V6,30:$VA,31:$VB,37:$VC,43:114,75:$Vb,85:$Vc},{12:[1,228]},{10:$Vh,11:229,13:$Vi,25:$Vk,44:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:43,66:$Vt},{20:[1,230]},{20:[1,231]},o($VY,[2,33]),{34:[1,232]},{12:$Vn1,71:$Vo1,92:233},o($Vd,[2,15]),{12:$VZ,44:$VE,45:$VF,46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,53:$VN,54:$VO,55:$VP,56:$VQ,57:$VR,69:$VS,70:235,71:$V_},o($Vd,[2,17]),o($V91,[2,122]),{10:$Vh,11:236,13:$Vi,25:$Vk,44:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:43,66:$Vt},o($VT,[2,57]),o($VT,$Vf,{39:237,66:$Vg}),{44:$VE,45:$VF,46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,53:$VN,54:$VO,55:$VP,56:$VQ,57:$VR,68:$V$,69:$VS,71:$V01,84:238},{15:[2,93],44:$VE,45:$VF,46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,53:$VN,54:$VO,55:$VP,56:$VQ,57:$VR,69:$VS,71:[1,240],83:239},{20:[1,241]},{25:[1,242]},o($V11,[2,77],{44:$VE,45:$VF,46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,53:$VN,54:$VO,55:$VP,56:$VQ,57:$VR,69:$VS}),o($Vg1,[2,83]),{68:[1,243]},o($Vg1,[2,84]),o($Vg1,[2,85]),o($Vg1,[2,86]),{20:[2,76],44:$VE,45:$VF,46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,53:$VN,54:$VO,55:$VP,56:$VQ,57:$VR,69:$VS,71:[1,245],76:244},{15:[1,246]},o([15,71],$VW,{72:247,34:$VX}),{2:$V0,7:59,8:60,9:$Vv,15:[1,248],17:$Vw,21:$Vx,23:$Vy,25:$Vz,27:$V6,30:$VA,31:$VB,37:$VC,43:114,75:$Vb,85:$Vc},{20:[1,249]},{15:[1,250]},{10:$Vh,11:251,13:$Vi,25:$Vk,44:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:43,66:$Vt},{34:[1,252]},{26:253,40:$Vp1,41:$Vq1,42:$Vr1},{12:[1,257]},{12:[1,258]},{10:$Vh,11:259,13:$Vi,25:$Vk,44:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:43,66:$Vt},o($Vs1,[2,110]),{2:$V0,7:59,8:60,9:$Vv,15:[1,260],17:$Vw,21:$Vx,23:$Vy,25:$Vz,27:$V6,30:$VA,31:$VB,37:$VC,43:114,75:$Vb,85:$Vc},{10:$Vh,11:261,13:$Vi,25:$Vk,44:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:43,66:$Vt},{13:[1,262]},{10:$Vh,11:263,13:$Vi,25:$Vk,44:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:43,66:$Vt},{13:[1,264]},{20:[1,265],44:$VE,45:$VF,46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,53:$VN,54:$VO,55:$VP,56:$VQ,57:$VR,69:$VS},{28:[1,266],29:[1,267],34:$VX,40:$VW,72:171},{13:[1,268]},{30:[1,269]},{20:[1,270]},{20:[1,271],44:$VE,45:$VF,46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,53:$VN,54:$VO,55:$VP,56:$VQ,57:$VR,69:$VS},o($VY,[2,35]),o($VY,[2,36]),{25:$V41,35:272,78:$V51,80:$V61,81:$V71},{12:[2,114]},{25:[1,273]},{12:[2,68]},o([12,15,20,34,68,69,71],[2,64],{44:$VE,45:$VF,46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,53:$VN,54:$VO,55:$VP,56:$VQ,57:$VR}),o($VT,[2,65]),{68:[2,96]},{15:[2,91]},{25:$VU,82:274},o($Vd,[2,70]),o($VV,$VW,{72:275,34:$VX}),o($Vg1,$Vh1,{79:276,66:$Vi1}),{20:[1,277]},{25:[1,278]},{20:[1,279]},{15:[2,101],71:[1,281],87:280},o($Vd,$Vt1,{16:282,88:$Vu1}),o($Vd,[2,7]),o($Vd,[2,8]),{34:[1,284],44:$VE,45:$VF,46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,53:$VN,54:$VO,55:$VP,56:$VQ,57:$VR,69:$VS},{13:[1,285]},{12:[1,286]},{12:[2,111]},{12:[2,112]},{10:$Vh,11:287,13:$Vi,25:$Vk,44:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:43,66:$Vt},{13:[1,288]},{13:[1,289]},{20:[1,290],44:$VE,45:$VF,46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,53:$VN,54:$VO,55:$VP,56:$VQ,57:$VR,69:$VS},o($Vd,[2,12]),{12:[1,291],44:$VE,45:$VF,46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,53:$VN,54:$VO,55:$VP,56:$VQ,57:$VR,69:$VS},{2:$V0,7:59,8:60,9:$Vv,14:292,17:$Vw,21:$Vx,23:$Vy,25:$Vz,27:$V6,30:$VA,31:$VB,37:$VC,43:58,75:$Vb,85:$Vc},{12:[1,293],44:$VE,45:$VF,46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,53:$VN,54:$VO,55:$VP,56:$VQ,57:$VR,69:$VS},{15:$Vk1,22:294,90:$Vl1,91:$Vm1},{25:[1,295]},{25:[1,296]},{25:[1,297]},{2:$V0,7:59,8:60,9:$Vv,14:298,17:$Vw,21:$Vx,23:$Vy,25:$Vz,27:$V6,30:$VA,31:$VB,37:$VC,43:58,75:$Vb,85:$Vc},{10:[1,299]},o($VY,[2,32]),o($VY,[2,34]),{13:[1,300]},o($V81,$VW,{72:301,34:$VX}),{15:[2,92]},o($V11,$V21,{73:302,40:$V31}),o($Vg1,[2,87]),o($Vd,[2,71]),{34:$VX,40:$VW,72:303},o($Vd,[2,98]),{15:[2,99]},{25:$Vj1,86:304},o($Vd,[2,6]),{9:[1,306],13:[1,307],89:305},{13:[1,308]},{2:$V0,7:59,8:60,9:$Vv,14:309,17:$Vw,21:$Vx,23:$Vy,25:$Vz,27:$V6,30:$VA,31:$VB,37:$VC,43:58,75:$Vb,85:$Vc},{13:[1,310]},{12:[2,113],44:$VE,45:$VF,46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,53:$VN,54:$VO,55:$VP,56:$VQ,57:$VR,69:$VS},{2:$V0,7:59,8:60,9:$Vv,14:311,17:$Vw,21:$Vx,23:$Vy,25:$Vz,27:$V6,30:$VA,31:$VB,37:$VC,43:58,75:$Vb,85:$Vc},{2:$V0,7:59,8:60,9:$Vv,14:312,17:$Vw,21:$Vx,23:$Vy,25:$Vz,27:$V6,30:$VA,31:$VB,37:$VC,43:58,75:$Vb,85:$Vc},o($Vs1,[2,109]),{20:[1,313]},{2:$V0,7:59,8:60,9:$Vv,15:[1,314],17:$Vw,21:$Vx,23:$Vy,25:$Vz,27:$V6,30:$VA,31:$VB,37:$VC,43:114,75:$Vb,85:$Vc},{20:[1,315]},{15:[1,316]},{26:317,40:$Vp1,41:$Vq1,42:$Vr1},{12:[1,318]},{12:[1,319]},{2:$V0,7:59,8:60,9:$Vv,15:[1,320],17:$Vw,21:$Vx,23:$Vy,25:$Vz,27:$V6,30:$VA,31:$VB,37:$VC,43:114,75:$Vb,85:$Vc},{10:$Vh,11:321,13:$Vi,25:$Vk,44:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:43,66:$Vt},{2:$V0,4:322,6:3,7:4,8:5,9:$V1,17:$V2,21:$V3,23:$V4,25:$V5,27:$V6,30:$V7,31:$V8,32:$V9,37:$Va,75:$Vb,85:$Vc},{12:$Vn1,71:$Vo1,92:323},{20:$Ve1,71:$Vf1,74:324},{40:[1,325]},{15:[2,100]},o($Vd,[2,102]),{10:[1,326]},{2:$V0,7:59,8:60,9:$Vv,14:327,17:$Vw,21:$Vx,23:$Vy,25:$Vz,27:$V6,30:$VA,31:$VB,37:$VC,43:58,75:$Vb,85:$Vc},{2:$V0,7:59,8:60,9:$Vv,14:328,17:$Vw,21:$Vx,23:$Vy,25:$Vz,27:$V6,30:$VA,31:$VB,37:$VC,43:58,75:$Vb,85:$Vc},{2:$V0,7:59,8:60,9:$Vv,15:[1,329],17:$Vw,21:$Vx,23:$Vy,25:$Vz,27:$V6,30:$VA,31:$VB,37:$VC,43:114,75:$Vb,85:$Vc},{2:$V0,7:59,8:60,9:$Vv,14:330,17:$Vw,21:$Vx,23:$Vy,25:$Vz,27:$V6,30:$VA,31:$VB,37:$VC,43:58,75:$Vb,85:$Vc},{2:$V0,7:59,8:60,9:$Vv,15:[1,331],17:$Vw,21:$Vx,23:$Vy,25:$Vz,27:$V6,30:$VA,31:$VB,37:$VC,43:114,75:$Vb,85:$Vc},{2:$V0,7:59,8:60,9:$Vv,15:[1,332],17:$Vw,21:$Vx,23:$Vy,25:$Vz,27:$V6,30:$VA,31:$VB,37:$VC,43:114,75:$Vb,85:$Vc},o($Vd,[2,13]),o($VY,$Vt1,{16:333,88:$Vu1}),o($VY,[2,25]),o($VY,[2,26]),{12:[1,334]},{13:[1,335]},{13:[1,336]},o($VY,[2,30]),{12:[1,337],44:$VE,45:$VF,46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,53:$VN,54:$VO,55:$VP,56:$VQ,57:$VR,69:$VS},{2:$V0,6:20,7:4,8:5,9:$V1,15:[1,338],17:$V2,21:$V3,23:$V4,25:$V5,27:$V6,30:$V7,31:$V8,32:$V9,37:$Va,75:$Vb,85:$Vc},{12:[2,116]},{20:[2,73]},{10:$Vh,11:339,13:$Vi,25:$Vk,44:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:43,66:$Vt},{10:$Vh,11:340,13:$Vi,25:$Vk,44:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:43,66:$Vt},{2:$V0,7:59,8:60,9:$Vv,15:[1,341],17:$Vw,21:$Vx,23:$Vy,25:$Vz,27:$V6,30:$VA,31:$VB,37:$VC,43:114,75:$Vb,85:$Vc},{2:$V0,7:59,8:60,9:$Vv,15:[1,342],17:$Vw,21:$Vx,23:$Vy,25:$Vz,27:$V6,30:$VA,31:$VB,37:$VC,43:114,75:$Vb,85:$Vc},{15:[2,107]},{2:$V0,7:59,8:60,9:$Vv,15:[1,343],17:$Vw,21:$Vx,23:$Vy,25:$Vz,27:$V6,30:$VA,31:$VB,37:$VC,43:114,75:$Vb,85:$Vc},o($Vd,[2,10]),o($Vd,[2,11]),o($VY,[2,24]),{13:[1,344]},{2:$V0,7:59,8:60,9:$Vv,14:345,17:$Vw,21:$Vx,23:$Vy,25:$Vz,27:$V6,30:$VA,31:$VB,37:$VC,43:58,75:$Vb,85:$Vc},{2:$V0,7:59,8:60,9:$Vv,14:346,17:$Vw,21:$Vx,23:$Vy,25:$Vz,27:$V6,30:$VA,31:$VB,37:$VC,43:58,75:$Vb,85:$Vc},{20:[1,347]},o($Vd,[2,14]),{20:$Ve1,44:$VE,45:$VF,46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,53:$VN,54:$VO,55:$VP,56:$VQ,57:$VR,69:$VS,71:$Vf1,74:348},{12:[1,349],44:$VE,45:$VF,46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,53:$VN,54:$VO,55:$VP,56:$VQ,57:$VR,69:$VS},o($Vd,[2,105]),{15:$Vk1,22:350,90:$Vl1,91:$Vm1},o($Vd,[2,9]),{2:$V0,7:59,8:60,9:$Vv,14:351,17:$Vw,21:$Vx,23:$Vy,25:$Vz,27:$V6,30:$VA,31:$VB,37:$VC,43:58,75:$Vb,85:$Vc},{2:$V0,7:59,8:60,9:$Vv,15:[1,352],17:$Vw,21:$Vx,23:$Vy,25:$Vz,27:$V6,30:$VA,31:$VB,37:$VC,43:114,75:$Vb,85:$Vc},{2:$V0,7:59,8:60,9:$Vv,15:[1,353],17:$Vw,21:$Vx,23:$Vy,25:$Vz,27:$V6,30:$VA,31:$VB,37:$VC,43:114,75:$Vb,85:$Vc},o($VY,[2,31]),{20:[2,75]},{13:[1,354]},{15:[2,106]},{2:$V0,7:59,8:60,9:$Vv,15:[1,355],17:$Vw,21:$Vx,23:$Vy,25:$Vz,27:$V6,30:$VA,31:$VB,37:$VC,43:114,75:$Vb,85:$Vc},o($VY,[2,28]),o($VY,[2,29]),{2:$V0,7:59,8:60,9:$Vv,14:356,17:$Vw,21:$Vx,23:$Vy,25:$Vz,27:$V6,30:$VA,31:$VB,37:$VC,43:58,75:$Vb,85:$Vc},o($VY,[2,27]),{2:$V0,7:59,8:60,9:$Vv,15:[1,357],17:$Vw,21:$Vx,23:$Vy,25:$Vz,27:$V6,30:$VA,31:$VB,37:$VC,43:114,75:$Vb,85:$Vc},o($Vd,$Vt1,{16:358,88:$Vu1}),o($Vd,[2,104])],
defaultActions: {19:[2,1],127:[2,66],152:[2,94],233:[2,114],235:[2,68],238:[2,96],239:[2,91],254:[2,111],255:[2,112],274:[2,92],280:[2,99],304:[2,100],323:[2,116],324:[2,73],329:[2,107],348:[2,75],350:[2,106]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	const TIPO_OPERACION	= require('./instrucciones').TIPO_OPERACION;
	const TIPO_VALOR 		= require('./instrucciones').TIPO_VALOR;
	const instruccionesAPI	= require('./instrucciones').instruccionesAPI;
	const TIPO_DATO = require('./instrucciones').TIPO_DATO;
	const TS = require('./instrucciones').TS;
	var salida=[];
	var ArrayDeErrores = [];
	var currentType="";
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 78;
break;
case 1:return 81;
break;
case 2:return 80;
break;
case 3:return 27;
break;
case 4:return 75;
break;
case 5:return 17;
break;
case 6:return 19;
break;
case 7:return 62;
break;
case 8:return 61;
break;
case 9:return 9;
break;
case 10:return 88;
break;
case 11:return 21;
break;
case 12:return 90;
break;
case 13:return 91;
break;
case 14:return 'R_BREAK';
break;
case 15:return 'R_CONTINUE';
break;
case 16:return 30;
break;
case 17:return 31;
break;
case 18:return 23;
break;
case 19:return 'R_VOID';
break;
case 20:return 37;
break;
case 21:return 'R_PUSH';
break;
case 22:return 'R_POP';
break;
case 23:return 'R_LENGTH';
break;
case 24:return 85;
break;
case 25:return 28;
break;
case 26:return 29;
break;
case 27:return 32;
break;
case 28: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 63;
break;
case 29: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 63;
break;
case 30: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 64;
break;
case 31:return 60;
break;
case 32:return 59;
break;
case 33:return 25;
break;
case 34:
break;
case 35:// comentario simple línea
break;
case 36:// comentario multiple líneas
break;
case 37:return 41;
break;
case 38:return 42;
break;
case 39:return "MAS";
break;
case 40:return 44;
break;
case 41:return 48;
break;
case 42:return 46;
break;
case 43:return 47;
break;
case 44:return 49;
break;
case 45:return 54;
break;
case 46:return 55;
break;
case 47:return 40;
break;
case 48:return 52;
break;
case 49:return 50;
break;
case 50:return 53;
break;
case 51:return 51;
break;
case 52:return 56;
break;
case 53:return 57;
break;
case 54:return 58;
break;
case 55:return 13;
break;
case 56:return 15;
break;
case 57:return 10;
break;
case 58:return 12;
break;
case 59:return 66;
break;
case 60:return 68;
break;
case 61:return 20;
break;
case 62:return 34;
break;
case 63:return 18;
break;
case 64:return 71;
break;
case 65:return 69;
break;
case 66:return 5;
break;
case 67: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); salida.push('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);  ArrayDeErrores.push({tipo:"léxico", linea:this._$.first_line, columna:this._$.first_column, descripcion: yy_.yytext});
break;
}
},
rules: [/^(?:number\b)/,/^(?:boolean\b)/,/^(?:string\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:console\b)/,/^(?:log\b)/,/^(?:false\b)/,/^(?:true\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:void\b)/,/^(?:return\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:length\b)/,/^(?:type\b)/,/^(?:of\b)/,/^(?:in\b)/,/^(?:function\b)/,/^(?:"(\\"|\\n|\\t|\\r|\\\\|[^\"])*")/,/^(?:'(\\'|\\n|\\t|\\r|\\\\|[^\'])*')/,/^(?:`(\\"|\\n|\\t|\\r|\\\\|[^\"])*`)/,/^(?:[0-9]+\.([0-9]+)?\b)/,/^(?:[0-9]+\b)/,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/,/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:==)/,/^(?:!=)/,/^(?:=)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:;)/,/^(?::)/,/^(?:\.)/,/^(?:,)/,/^(?:\?)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}